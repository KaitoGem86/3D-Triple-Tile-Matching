%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: -777816280, guid: dd6a5ee66a6a69a4898bee1c40f9c1a2, type: 3}
  m_Name: SVC_Luna
  m_EditorClassIdentifier: 
  _svcLunaVersion: 1
  _shaderVariants:
  - shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 10753, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 10753, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - PIXELSNAP_ON
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNDERLAY_ON
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNDERLAY_ON
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - OUTLINE_ON
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 10720, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_NONE
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_SIMPLE
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_HIGH_QUALITY
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_NONE
    - _SUNDISK_SIMPLE
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_HIGH_QUALITY
    - _SUNDISK_SIMPLE
  - shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  _usedByLunaBuild:
  - shader: {fileID: 10753, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 10720, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  _includedShaderVariants: []
  _excludedShaderVariants: []
  version: 181
  _shaderParsedShaders:
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: GUI/Text Shader
        ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: 32
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 10101, guid: 0000000000000000e000000000000000, type: 0}
    ShaderPath: Library/unity default resources
    ShaderDefinedKeywords: []
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Hidden/BlitCopy
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Color;\nuniform highp sampler2D _MainTex;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid
            main()\n{\n    u_xlat0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0
            = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags: []
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags: []
      UsePass: 0
    Shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Hidden/InternalErrorShader
        ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: 32
      Tags: []
      UsePass: 0
    Shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
    ShaderPath: Library/unity default resources
    ShaderDefinedKeywords: []
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Legacy Shaders/Particles/Additive
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TintColor;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_1;\nvoid
            main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n    u_xlat0 = u_xlat0
            * _TintColor;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat0 = u_xlat0 * u_xlat10_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w
            = clamp(SV_Target0.w, 0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - SOFTPARTICLES_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - __
        keywordGroups:
        - Keywords:
          - __
          - SOFTPARTICLES_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - SOFTPARTICLES_ON
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Mobile/Particles/Additive
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec3 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            vs_COLOR0 = in_COLOR0;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4
            u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            SV_Target0 = u_xlat10_0 * vs_COLOR0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _
        keywordGroups:
        - Keywords:
          - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 10720, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Skybox/Procedural
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform
            \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute
            highp vec4 in_POSITION0;\nvarying mediump float vs_TEXCOORD0;\nvarying
            mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nvec3
            u_xlat13;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat
            u_xlat26;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n       
            u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8
            * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8
            * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat24
            = sqrt(u_xlat24);\n        u_xlat25 = (-u_xlat24) + 1.0;\n        u_xlat25
            = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n       
            u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26
            = u_xlat26 / u_xlat24;\n        u_xlat28 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat24 = u_xlat28 / u_xlat24;\n        u_xlat26 = (-u_xlat26) + 1.0;\n       
            u_xlat28 = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat26
            * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat26 * u_xlat28 + 0.458999991;\n       
            u_xlat26 = u_xlat26 * u_xlat28 + -0.00286999997;\n        u_xlat26 =
            u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat24
            = (-u_xlat24) + 1.0;\n        u_xlat28 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat28 = u_xlat24 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat24
            * u_xlat28 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat28 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat26 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat25 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat24)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat25;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat25 = (-u_xlat0.x) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n       
            u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat4.x = u_xlat26 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat26 * u_xlat4.x + 0.458999991;\n        u_xlat26 = u_xlat26
            * u_xlat4.x + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat26 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat25 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat25;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat5.xyz = vec3(u_xlat26)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat21 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 3.82999992;\n       
            u_xlat21 = u_xlat5.y * u_xlat21 + 0.458999991;\n        u_xlat13.x =
            u_xlat5.y * u_xlat21 + -0.00286999997;\n        u_xlat13.x = u_xlat13.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat13.x);\n        u_xlat21
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.x * u_xlat21
            + 3.82999992;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat21 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat13.xz = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat13.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat5.x = u_xlat26 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat26 = u_xlat13.z * u_xlat26;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat26);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat26 = u_xlat2.y * -50.0;\n   
            u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z)
            * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_27 = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat2.xyz));\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27
            = u_xlat16_27 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_27)
            * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD0 = u_xlat26;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3
            vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0,
            0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n   
            SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_NONE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n       
            u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9
            * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n       
            u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9
            * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27
            = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28
            = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29
            = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n       
            u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29
            * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n       
            u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 =
            u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27
            = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n       
            u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27
            * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n       
            u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n       
            u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n       
            u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27,
            0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29
            * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n       
            u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x =
            u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23
            + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 =
            (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y,
            _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 +
            0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 =
            dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n   
            u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz
            * vec3(27.0, 27.0, 27.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool
            u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz
            = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz,
            u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x
            = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n   
            u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x
            * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x
            = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x
            = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz
            = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n       
            u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9
            * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n       
            u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9
            * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27
            = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28
            = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29
            = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n       
            u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29
            * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n       
            u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 =
            u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27
            = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n       
            u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27
            * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n       
            u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n       
            u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n       
            u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27,
            0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29
            * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n       
            u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x =
            u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23
            + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 =
            (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y,
            _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 +
            0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 =
            dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz,
            0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n   
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(15.0, 15.0, 15.0);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n   
            vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n   
            vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nvarying highp
            vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump
            vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nvoid
            main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n    u_xlat16_0.x = u_xlat16_0.x
            * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat1.x
            = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat1.xyz));\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n   
            u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x *
            _SunSizeConvergence;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_6
            = (-u_xlat16_3.x) * 1.98000002 + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x
            * u_xlat16_3.x + 1.0;\n    u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0,
            0.0100164423);\n    u_xlat16_6 = log2(u_xlat16_6);\n    u_xlat16_0.x
            = u_xlat16_6 * u_xlat16_0.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n   
            u_xlat16_0.x = max(u_xlat16_0.x, 9.99999975e-05);\n    u_xlat16_0.x =
            u_xlat16_0.y / u_xlat16_0.x;\n    u_xlat16_0.x = log2(u_xlat16_0.x);\n   
            u_xlat16_0.x = u_xlat16_0.x * 0.454544991;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n   
            u_xlat16_3.x = u_xlat1.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n    u_xlat16_2.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz
            : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_HIGH_QUALITY
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform
            \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute
            highp vec4 in_POSITION0;\nvarying mediump float vs_TEXCOORD0;\nvarying
            mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nvec3
            u_xlat13;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat
            u_xlat26;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n       
            u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8
            * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8
            * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat24
            = sqrt(u_xlat24);\n        u_xlat25 = (-u_xlat24) + 1.0;\n        u_xlat25
            = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n       
            u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26
            = u_xlat26 / u_xlat24;\n        u_xlat28 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat24 = u_xlat28 / u_xlat24;\n        u_xlat26 = (-u_xlat26) + 1.0;\n       
            u_xlat28 = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat26
            * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat26 * u_xlat28 + 0.458999991;\n       
            u_xlat26 = u_xlat26 * u_xlat28 + -0.00286999997;\n        u_xlat26 =
            u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat24
            = (-u_xlat24) + 1.0;\n        u_xlat28 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat28 = u_xlat24 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat24
            * u_xlat28 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat28 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat26 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat25 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat24)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat25;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat25 = (-u_xlat0.x) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n       
            u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat4.x = u_xlat26 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat26 * u_xlat4.x + 0.458999991;\n        u_xlat26 = u_xlat26
            * u_xlat4.x + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat26 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat25 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat25;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat5.xyz = vec3(u_xlat26)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat21 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 3.82999992;\n       
            u_xlat21 = u_xlat5.y * u_xlat21 + 0.458999991;\n        u_xlat13.x =
            u_xlat5.y * u_xlat21 + -0.00286999997;\n        u_xlat13.x = u_xlat13.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat13.x);\n        u_xlat21
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.x * u_xlat21
            + 3.82999992;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat21 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat13.xz = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat13.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat5.x = u_xlat26 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat26 = u_xlat13.z * u_xlat26;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat26);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat26 = u_xlat2.y * -50.0;\n   
            u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z)
            * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_27 = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat2.xyz));\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27
            = u_xlat16_27 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_27)
            * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD0 = u_xlat26;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3
            vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0,
            0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n   
            SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_NONE
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n       
            u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9
            * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n       
            u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9
            * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27
            = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28
            = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29
            = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n       
            u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29
            * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n       
            u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 =
            u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27
            = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n       
            u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27
            * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n       
            u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n       
            u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n       
            u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27,
            0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29
            * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n       
            u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x =
            u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23
            + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 =
            (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y,
            _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 +
            0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 =
            dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n   
            u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz
            * vec3(27.0, 27.0, 27.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool
            u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz
            = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz,
            u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x
            = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n   
            u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x
            * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x
            = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x
            = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz
            = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_HIGH_QUALITY
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _SUNDISK_HIGH_QUALITY
        - _SUNDISK_NONE
        - _SUNDISK_SIMPLE
        keywordGroups:
        - Keywords:
          - _SUNDISK_NONE
          - _SUNDISK_SIMPLE
          - _SUNDISK_HIGH_QUALITY
        KeywordsMinimalCardinality: 1
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: PreviewType
          Value: Skybox
        - Key: QUEUE
          Value: Background
        - Key: RenderType
          Value: Background
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: PreviewType
        Value: Skybox
      - Key: QUEUE
        Value: Background
      - Key: RenderType
        Value: Background
      UsePass: 0
    Shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - _SUNDISK_HIGH_QUALITY
    - _SUNDISK_NONE
    - _SUNDISK_SIMPLE
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Sprites/Default
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform
            \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2
            vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0
            = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump
            vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0
            * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n   
            SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform
            \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5);
            return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2
            a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a;
            }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy
            * u_xlat1.xy;\n    u_xlat0.xy = unity_roundEven(u_xlat0.xy);\n    u_xlat0.xy
            = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n   
            gl_Position.zw = u_xlat0.zw;\n    u_xlat0 = in_COLOR0 * _Color;\n   
            u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump
            vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0
            * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n   
            SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - PIXELSNAP_ON
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - ETC1_EXTERNAL_ALPHA
        - INSTANCING_ON
        - PIXELSNAP_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _
        - __
        keywordGroups:
        - Keywords:
          - _
          - ETC1_EXTERNAL_ALPHA
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - _
          - PIXELSNAP_ON
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 10753, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - PIXELSNAP_ON
    - ETC1_EXTERNAL_ALPHA
    - INSTANCING_ON
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Bitmap
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n   
            u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n   
            u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy =
            u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125,
            0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n   
            u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n   
            u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX,
            _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw
            = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_FaceTex,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n   
            SV_Target0.xyz = u_xlat0.xyz;\n    u_xlat10_0.x = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    SV_Target0.w = u_xlat10_0.x * vs_COLOR0.w;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n   
            u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n   
            u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy =
            u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125,
            0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n   
            u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n   
            u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX,
            _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw
            = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump
            float u_xlat16_3;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = vs_COLOR0.w * u_xlat10_0.x + -0.00100000005;\n   
            u_xlat16_3 = u_xlat10_0.x * vs_COLOR0.w;\n    SV_Target0.w = u_xlat16_3;\n   
            u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    u_xlat10_0.xyz
            = texture2D(_FaceTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz
            * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n   
            u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n   
            u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy =
            u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125,
            0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n   
            u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n   
            u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX,
            _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw
            = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform
            lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec2 u_xlat1;\nmediump float u_xlat16_2;\nmediump float
            u_xlat16_5;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_FaceTex,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n   
            u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n   
            u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y
            * u_xlat1.x;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n   
            u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_5
            = u_xlat10_0.x * vs_COLOR0.w;\n    SV_Target0.w = u_xlat16_2 * u_xlat16_5;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n   
            u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n   
            u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy =
            u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125,
            0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n   
            u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n   
            u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX,
            _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw
            = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform
            lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump
            float u_xlat16_3;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat0.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0.x
            = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat10_0.x
            * vs_COLOR0.w;\n    u_xlat16_5 = u_xlat16_3 * u_xlat16_1 + -0.00100000005;\n   
            u_xlat16_3 = u_xlat16_1 * u_xlat16_3;\n    SV_Target0.w = u_xlat16_3;\n   
            u_xlatb0 = u_xlat16_5<0.0;\n    if(u_xlatb0){discard;}\n    u_xlat10_0.xyz
            = texture2D(_FaceTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz
            * vs_COLOR0.xyz;\n    SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat0.xyz;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        keywordGroups:
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: 128e987d567d4e2c824d754223b3f3b0, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_Bitmap.shader
    ShaderDefinedKeywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Bitmap Custom Atlas
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n   
            u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n   
            u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy =
            u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125,
            0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n   
            u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n   
            u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX,
            _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw
            = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec4 u_xlat10_0;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex,
            vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat0
            = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n   
            u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n   
            u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy =
            u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125,
            0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n   
            u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n   
            u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX,
            _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw
            = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec4 u_xlat10_0;\nbool u_xlatb0;\nlowp vec4 u_xlat10_1;\nmediump float
            u_xlat16_2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0
            * u_xlat10_1;\n    u_xlat16_2 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n   
            u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0
            = u_xlat16_2<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n   
            u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n   
            u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy =
            u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125,
            0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n   
            u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n   
            u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX,
            _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw
            = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform
            lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec4 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float
            u_xlat16_2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0
            * u_xlat10_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy)
            + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy,
            0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    SV_Target0 =
            u_xlat0 * vec4(u_xlat16_2);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n   
            u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n   
            u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy =
            u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125,
            0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n   
            u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n   
            u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX,
            _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw
            = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform
            lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec4 u_xlat10_1;\nbool
            u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0
            * u_xlat10_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy)
            + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy,
            0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 =
            u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_0 = u_xlat0 *
            vec4(u_xlat16_2);\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_5<0.0;\n   
            if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        keywordGroups:
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: 48bb5f55d8670e349b6e614913f9d910, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_Bitmap-Custom-Atlas.shader
    ShaderDefinedKeywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Distance Field
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool
            u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid
            main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x)
            + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz *
            vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4
            u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat
            u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid
            main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x)
            + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n   
            u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat5 = u_xlat0.x
            * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n   
            u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6
            / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1
            = (-u_xlat16_1) + 1.0;\n    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 +
            -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;\n   
            SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n   
            if(u_xlatb4){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2
            u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump
            float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n   
            u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 =
            u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) +
            vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz *
            u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n   
            u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y
            * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0
            = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2
            u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool
            u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid
            main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x)
            + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz *
            u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n   
            u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y
            * u_xlat4.x;\n    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n   
            u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0
            * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - BEVEL_ON
        - GLOW_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNDERLAY_INNER
        - UNDERLAY_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        keywordGroups:
        - Keywords:
          - __
          - BEVEL_ON
        - Keywords:
          - __
          - UNDERLAY_ON
          - UNDERLAY_INNER
        - Keywords:
          - __
          - GLOW_ON
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 227
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF.shader
    ShaderDefinedKeywords:
    - BEVEL_ON
    - GLOW_ON
    - UNDERLAY_INNER
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Distance Field (Surface)
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump
            vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump
            vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute
            highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute
            highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp
            vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4
            vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool
            u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy
            + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n   
            u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n   
            gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n   
            u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n   
            u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy =
            u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n   
            u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 *
            _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y
            * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w
            * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w
            * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w
            * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n   
            u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 =
            u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n   
            u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy
            * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz
            + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0
            = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n   
            u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n   
            u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n   
            u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22)
            * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz
            + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21
            = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n   
            u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx
            * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n   
            vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x
            = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n   
            vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y
            = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n   
            vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n   
            u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n   
            vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n   
            u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x
            + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x
            = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n   
            u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz
            * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat
            _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform
            \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform
            \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform
            \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform
            \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat
            _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform
            \tmediump vec4 _ReflectOutlineColor;\nuniform \tfloat _ShaderFlags;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float
            _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp
            samplerCube _Cube;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3
            vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4
            u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec2
            u_xlat4;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec4 u_xlat5;\nmediump
            float u_xlat16_5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3
            u_xlat9;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat
            u_xlat13;\nfloat u_xlat16;\nlowp vec2 u_xlat10_16;\nbool u_xlatb22;\nfloat
            u_xlat30;\nlowp float u_xlat10_30;\nmediump float u_xlat16_31;\nfloat
            u_xlat36;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD2.w;\n    u_xlat0.y
            = vs_TEXCOORD3.w;\n    u_xlat0.z = vs_TEXCOORD4.w;\n    u_xlat0.xyz =
            (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat16_1.xyz
            = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_31
            = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = inversesqrt(u_xlat16_31);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;\n    u_xlat0.x =
            vs_TEXCOORD5.x + _BevelOffset;\n    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth,
            _TextureHeight);\n    u_xlat2.z = 0.0;\n    u_xlat3 = (-u_xlat2.xzzy)
            + vs_TEXCOORD0.xyxy;\n    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;\n   
            u_xlat10_4.x = texture2D(_MainTex, u_xlat3.xy).w;\n    u_xlat10_4.z =
            texture2D(_MainTex, u_xlat3.zw).w;\n    u_xlat10_4.y = texture2D(_MainTex,
            u_xlat2.xy).w;\n    u_xlat10_4.w = texture2D(_MainTex, u_xlat2.zw).w;\n   
            u_xlat0 = u_xlat0.xxxx + u_xlat10_4;\n    u_xlat0 = u_xlat0 + vec4(-0.5,
            -0.5, -0.5, -0.5);\n    u_xlat2.x = _BevelWidth + _OutlineWidth;\n   
            u_xlat2.x = max(u_xlat2.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat2.xxxx;\n   
            u_xlat2.x = u_xlat2.x * _Bevel;\n    u_xlat2.x = u_xlat2.x * _GradientScale;\n   
            u_xlat2.x = u_xlat2.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5,
            0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat3 = u_xlat0
            * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat3
            = -abs(u_xlat3) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat12.x = _ShaderFlags
            * 0.5;\n    u_xlatb22 = u_xlat12.x>=(-u_xlat12.x);\n    u_xlat12.x =
            fract(abs(u_xlat12.x));\n    u_xlat12.x = (u_xlatb22) ? u_xlat12.x :
            (-u_xlat12.x);\n    u_xlatb12 = u_xlat12.x>=0.5;\n    u_xlat0 = (bool(u_xlatb12))
            ? u_xlat3 : u_xlat0;\n    u_xlat3 = u_xlat0 * vec4(1.57079601, 1.57079601,
            1.57079601, 1.57079601);\n    u_xlat3 = sin(u_xlat3);\n    u_xlat3 =
            (-u_xlat0) + u_xlat3;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness,
            _BevelRoundness, _BevelRoundness)) * u_xlat3 + u_xlat0;\n    u_xlat12.x
            = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat12.xxxx);\n   
            u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy *
            u_xlat2.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w
            = float(1.0);\n    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat2.x
            = inversesqrt(u_xlat2.x);\n    u_xlat30 = dot(u_xlat0.zw, u_xlat0.zw);\n   
            u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat3.x = u_xlat30 * u_xlat0.z;\n   
            u_xlat3.yz = vec2(u_xlat30) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n   
            u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz
            * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat3.zxy * u_xlat0.yzx + (-u_xlat2.xyz);\n   
            u_xlat10_30 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat30 =
            (-u_xlat10_30) + 0.5;\n    u_xlat30 = u_xlat30 + (-vs_TEXCOORD5.x);\n   
            u_xlat30 = u_xlat30 * vs_TEXCOORD5.y + 0.5;\n    u_xlat2.x = _OutlineWidth
            * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_31
            = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0,
            1.0);\n    u_xlat16_5 = min(u_xlat2.x, 1.0);\n    u_xlat16_5 = sqrt(u_xlat16_5);\n   
            u_xlat16_31 = u_xlat16_31 * u_xlat16_5;\n    u_xlat12.xy = vec2(_OutlineUVSpeedX,
            _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_3 = texture2D(_OutlineTex,
            u_xlat12.xy);\n    u_xlat12.xyz = u_xlat10_3.xyz * _OutlineColor.xyz;\n   
            u_xlat3.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat13 = u_xlat10_3.w
            * u_xlat3.x;\n    u_xlat4.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy
            + vs_TEXCOORD0.zw;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat4.xy);\n   
            u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_4 * u_xlat5;\n   
            u_xlat16_7.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat12.xyz
            * vec3(u_xlat13) + (-u_xlat16_7.xyz);\n    u_xlat16_7.w = u_xlat3.x *
            u_xlat10_3.w + (-u_xlat6.w);\n    u_xlat16_3 = vec4(u_xlat16_31) * u_xlat16_7;\n   
            u_xlat16_4.w = u_xlat5.w * u_xlat10_4.w + u_xlat16_3.w;\n    u_xlat16_4.xyz
            = u_xlat6.xyz * u_xlat6.www + u_xlat16_3.xyz;\n    u_xlat16_31 = (-u_xlat2.x)
            * 0.5 + u_xlat30;\n    u_xlat30 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat30
            = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat12.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_7.x = u_xlat2.x
            * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_31 = u_xlat12.x * 0.5 + u_xlat16_31;\n   
            u_xlat16_31 = u_xlat16_31 / u_xlat16_7.x;\n    u_xlat16_31 = clamp(u_xlat16_31,
            0.0, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_2 =
            vec4(u_xlat16_31) * u_xlat16_4;\n    u_xlat6.x = (-_BumpFace) + _BumpOutline;\n   
            u_xlat6.x = u_xlat30 * u_xlat6.x + _BumpFace;\n    u_xlat10_16.xy = texture2D(_BumpMap,
            vs_TEXCOORD0.zw).yw;\n    u_xlat16_7.xy = u_xlat10_16.yx * vec2(2.0,
            2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_7.xy, u_xlat16_7.xy);\n   
            u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31)
            + 1.0;\n    u_xlat16_7.z = sqrt(u_xlat16_31);\n    u_xlat6.xyz = u_xlat16_7.xyz
            * u_xlat6.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat6.xyz = u_xlat16_2.www
            * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz +
            (-u_xlat6.xyz);\n    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat0.xyz = u_xlat0.xyz *
            u_xlat6.xxx;\n    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n   
            u_xlat16_7.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.z
            = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat16_7.xyz,
            u_xlat16_7.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat3.xyz
            = u_xlat6.xxx * u_xlat16_7.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz,
            u_xlat16_1.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat6.x
            = log2(u_xlat16_1.x);\n    u_xlat16 = (-_FaceShininess) + _OutlineShininess;\n   
            u_xlat16 = u_xlat30 * u_xlat16 + _FaceShininess;\n    u_xlat16_1.x =
            u_xlat16 * 128.0;\n    u_xlat6.x = u_xlat6.x * u_xlat16_1.x;\n    u_xlat6.x
            = exp2(u_xlat6.x);\n    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;\n   
            u_xlat6.xyz = u_xlat6.xxx * u_xlat16_1.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat36 = max(u_xlat16_2.w, 9.99999975e-05);\n    u_xlat8.xyz = u_xlat16_2.xyz
            / vec3(u_xlat36);\n    u_xlat16_11.xyz = u_xlat8.xyz * _LightColor0.xyz;\n   
            u_xlat6.xyz = u_xlat16_11.xyz * u_xlat16_1.xxx + u_xlat6.xyz;\n    u_xlat3.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat3);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat3);\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1.xyz
            = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat9.xyz = log2(u_xlat16_1.xyz);\n   
            u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat9.xyz = exp2(u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz
            = u_xlat8.xyz * u_xlat9.xyz + u_xlat6.xyz;\n    u_xlat6.xyz = (-_ReflectFaceColor.xyz)
            + _ReflectOutlineColor.xyz;\n    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz
            + _ReflectFaceColor.xyz;\n    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx +
            u_xlat8.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat30 = dot(vs_TEXCOORD6.xyz, u_xlat0.xyz);\n   
            u_xlat30 = u_xlat30 + u_xlat30;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30))
            + vs_TEXCOORD6.xyz;\n    u_xlat10_0.xyz = textureCube(_Cube, u_xlat0.xyz).xyz;\n   
            u_xlat0.xyz = u_xlat6.xyz * u_xlat10_0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz
            * u_xlat16_2.www + u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_2.w;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump
            vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump
            vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute
            highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute
            highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp
            vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4
            vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool
            u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy
            + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n   
            u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n   
            gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n   
            u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n   
            u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy =
            u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n   
            u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 *
            _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y
            * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w
            * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w
            * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w
            * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n   
            u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 =
            u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n   
            u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy
            * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz
            + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0
            = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n   
            u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n   
            u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n   
            u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22)
            * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz
            + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21
            = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n   
            u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx
            * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n   
            vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x
            = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n   
            vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y
            = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n   
            vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n   
            u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n   
            vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n   
            u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x
            + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x
            = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n   
            u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz
            * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat
            _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform
            \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform
            \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform
            \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform
            \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat
            _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform
            \tmediump vec4 _ReflectOutlineColor;\nuniform \tfloat _ShaderFlags;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float
            _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp
            samplerCube _Cube;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3
            vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4
            u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec2
            u_xlat4;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec4 u_xlat5;\nmediump
            float u_xlat16_5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3
            u_xlat9;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat
            u_xlat13;\nfloat u_xlat16;\nlowp vec2 u_xlat10_16;\nbool u_xlatb22;\nfloat
            u_xlat30;\nlowp float u_xlat10_30;\nmediump float u_xlat16_31;\nfloat
            u_xlat36;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD2.w;\n    u_xlat0.y
            = vs_TEXCOORD3.w;\n    u_xlat0.z = vs_TEXCOORD4.w;\n    u_xlat0.xyz =
            (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat16_1.xyz
            = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_31
            = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = inversesqrt(u_xlat16_31);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;\n    u_xlat0.x =
            vs_TEXCOORD5.x + _BevelOffset;\n    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth,
            _TextureHeight);\n    u_xlat2.z = 0.0;\n    u_xlat3 = (-u_xlat2.xzzy)
            + vs_TEXCOORD0.xyxy;\n    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;\n   
            u_xlat10_4.x = texture2D(_MainTex, u_xlat3.xy).w;\n    u_xlat10_4.z =
            texture2D(_MainTex, u_xlat3.zw).w;\n    u_xlat10_4.y = texture2D(_MainTex,
            u_xlat2.xy).w;\n    u_xlat10_4.w = texture2D(_MainTex, u_xlat2.zw).w;\n   
            u_xlat0 = u_xlat0.xxxx + u_xlat10_4;\n    u_xlat0 = u_xlat0 + vec4(-0.5,
            -0.5, -0.5, -0.5);\n    u_xlat2.x = _BevelWidth + _OutlineWidth;\n   
            u_xlat2.x = max(u_xlat2.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat2.xxxx;\n   
            u_xlat2.x = u_xlat2.x * _Bevel;\n    u_xlat2.x = u_xlat2.x * _GradientScale;\n   
            u_xlat2.x = u_xlat2.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5,
            0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat3 = u_xlat0
            * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat3
            = -abs(u_xlat3) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat12.x = _ShaderFlags
            * 0.5;\n    u_xlatb22 = u_xlat12.x>=(-u_xlat12.x);\n    u_xlat12.x =
            fract(abs(u_xlat12.x));\n    u_xlat12.x = (u_xlatb22) ? u_xlat12.x :
            (-u_xlat12.x);\n    u_xlatb12 = u_xlat12.x>=0.5;\n    u_xlat0 = (bool(u_xlatb12))
            ? u_xlat3 : u_xlat0;\n    u_xlat3 = u_xlat0 * vec4(1.57079601, 1.57079601,
            1.57079601, 1.57079601);\n    u_xlat3 = sin(u_xlat3);\n    u_xlat3 =
            (-u_xlat0) + u_xlat3;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness,
            _BevelRoundness, _BevelRoundness)) * u_xlat3 + u_xlat0;\n    u_xlat12.x
            = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat12.xxxx);\n   
            u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy *
            u_xlat2.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w
            = float(1.0);\n    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat2.x
            = inversesqrt(u_xlat2.x);\n    u_xlat30 = dot(u_xlat0.zw, u_xlat0.zw);\n   
            u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat3.x = u_xlat30 * u_xlat0.z;\n   
            u_xlat3.yz = vec2(u_xlat30) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n   
            u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz
            * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat3.zxy * u_xlat0.yzx + (-u_xlat2.xyz);\n   
            u_xlat10_30 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat30 =
            (-u_xlat10_30) + 0.5;\n    u_xlat30 = u_xlat30 + (-vs_TEXCOORD5.x);\n   
            u_xlat30 = u_xlat30 * vs_TEXCOORD5.y + 0.5;\n    u_xlat2.x = _OutlineWidth
            * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_31
            = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0,
            1.0);\n    u_xlat16_5 = min(u_xlat2.x, 1.0);\n    u_xlat16_5 = sqrt(u_xlat16_5);\n   
            u_xlat16_31 = u_xlat16_31 * u_xlat16_5;\n    u_xlat12.xy = vec2(_OutlineUVSpeedX,
            _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_3 = texture2D(_OutlineTex,
            u_xlat12.xy);\n    u_xlat12.xyz = u_xlat10_3.xyz * _OutlineColor.xyz;\n   
            u_xlat3.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat13 = u_xlat10_3.w
            * u_xlat3.x;\n    u_xlat4.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy
            + vs_TEXCOORD0.zw;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat4.xy);\n   
            u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_4 * u_xlat5;\n   
            u_xlat16_7.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat12.xyz
            * vec3(u_xlat13) + (-u_xlat16_7.xyz);\n    u_xlat16_7.w = u_xlat3.x *
            u_xlat10_3.w + (-u_xlat6.w);\n    u_xlat16_3 = vec4(u_xlat16_31) * u_xlat16_7;\n   
            u_xlat16_4.w = u_xlat5.w * u_xlat10_4.w + u_xlat16_3.w;\n    u_xlat16_4.xyz
            = u_xlat6.xyz * u_xlat6.www + u_xlat16_3.xyz;\n    u_xlat16_31 = (-u_xlat2.x)
            * 0.5 + u_xlat30;\n    u_xlat30 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat30
            = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat12.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_7.x = u_xlat2.x
            * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_31 = u_xlat12.x * 0.5 + u_xlat16_31;\n   
            u_xlat16_31 = u_xlat16_31 / u_xlat16_7.x;\n    u_xlat16_31 = clamp(u_xlat16_31,
            0.0, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_2 =
            vec4(u_xlat16_31) * u_xlat16_4;\n    u_xlat6.x = (-_BumpFace) + _BumpOutline;\n   
            u_xlat6.x = u_xlat30 * u_xlat6.x + _BumpFace;\n    u_xlat10_16.xy = texture2D(_BumpMap,
            vs_TEXCOORD0.zw).yw;\n    u_xlat16_7.xy = u_xlat10_16.yx * vec2(2.0,
            2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_7.xy, u_xlat16_7.xy);\n   
            u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31)
            + 1.0;\n    u_xlat16_7.z = sqrt(u_xlat16_31);\n    u_xlat6.xyz = u_xlat16_7.xyz
            * u_xlat6.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat6.xyz = u_xlat16_2.www
            * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz +
            (-u_xlat6.xyz);\n    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat0.xyz = u_xlat0.xyz *
            u_xlat6.xxx;\n    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n   
            u_xlat16_7.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.z
            = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat16_7.xyz,
            u_xlat16_7.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat3.xyz
            = u_xlat6.xxx * u_xlat16_7.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz,
            u_xlat16_1.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat6.x
            = log2(u_xlat16_1.x);\n    u_xlat16 = (-_FaceShininess) + _OutlineShininess;\n   
            u_xlat16 = u_xlat30 * u_xlat16 + _FaceShininess;\n    u_xlat16_1.x =
            u_xlat16 * 128.0;\n    u_xlat6.x = u_xlat6.x * u_xlat16_1.x;\n    u_xlat6.x
            = exp2(u_xlat6.x);\n    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;\n   
            u_xlat6.xyz = u_xlat6.xxx * u_xlat16_1.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat36 = max(u_xlat16_2.w, 9.99999975e-05);\n    u_xlat8.xyz = u_xlat16_2.xyz
            / vec3(u_xlat36);\n    u_xlat16_11.xyz = u_xlat8.xyz * _LightColor0.xyz;\n   
            u_xlat6.xyz = u_xlat16_11.xyz * u_xlat16_1.xxx + u_xlat6.xyz;\n    u_xlat3.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat3);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat3);\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1.xyz
            = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat9.xyz = log2(u_xlat16_1.xyz);\n   
            u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat9.xyz = exp2(u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz
            = u_xlat8.xyz * u_xlat9.xyz + u_xlat6.xyz;\n    u_xlat6.xyz = (-_ReflectFaceColor.xyz)
            + _ReflectOutlineColor.xyz;\n    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz
            + _ReflectFaceColor.xyz;\n    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx +
            u_xlat8.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat30 = dot(vs_TEXCOORD6.xyz, u_xlat0.xyz);\n   
            u_xlat30 = u_xlat30 + u_xlat30;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30))
            + vs_TEXCOORD6.xyz;\n    u_xlat10_0.xyz = textureCube(_Cube, u_xlat0.xyz).xyz;\n   
            u_xlat0.xyz = u_xlat6.xyz * u_xlat10_0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz
            * u_xlat16_2.www + u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_2.w;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4
            unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump
            vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform
            \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute
            mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump
            vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump
            vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat
            u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n   
            u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy =
            u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n   
            u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 *
            _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y
            * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w
            * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w
            * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w
            * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n   
            u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 =
            u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n   
            u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy
            * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz
            + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0
            = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n   
            u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n   
            u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n   
            u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22)
            * u_xlat21 + u_xlat2.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) *
            u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz
            = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w
            * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n   
            vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x
            = u_xlat2.z;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n   
            vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y
            = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD3.w = u_xlat1.y;\n   
            vs_TEXCOORD4.z = u_xlat3.w;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_COLOR0
            = in_COLOR0;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n   
            u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n   
            u_xlat0 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat2 = u_xlat3.yyyy
            * u_xlat0;\n    u_xlat0 = u_xlat0 * u_xlat0;\n    u_xlat4 = (-u_xlat1.xxxx)
            + unity_4LightPosX0;\n    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n   
            u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;\n    u_xlat0 = u_xlat4 *
            u_xlat4 + u_xlat0;\n    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;\n    u_xlat1
            = u_xlat1 * u_xlat3.wwzw + u_xlat2;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07,
            9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat2 = inversesqrt(u_xlat0);\n   
            u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat1 = u_xlat1
            * u_xlat2;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat0 * u_xlat1;\n    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz
            * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_5.x = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5.x = u_xlat3.x *
            u_xlat3.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat3.ywzx * u_xlat3;\n   
            u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD7.xyz
            = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat
            _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform
            \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform
            \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform
            \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform
            \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat
            _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform
            \tmediump vec4 _ReflectOutlineColor;\nuniform \tfloat _ShaderFlags;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float
            _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp
            samplerCube _Cube;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3
            vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4
            u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec2
            u_xlat4;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec4 u_xlat5;\nmediump
            float u_xlat16_5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3
            u_xlat9;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat
            u_xlat13;\nfloat u_xlat16;\nlowp vec2 u_xlat10_16;\nbool u_xlatb22;\nfloat
            u_xlat30;\nlowp float u_xlat10_30;\nmediump float u_xlat16_31;\nfloat
            u_xlat36;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD2.w;\n    u_xlat0.y
            = vs_TEXCOORD3.w;\n    u_xlat0.z = vs_TEXCOORD4.w;\n    u_xlat0.xyz =
            (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat16_1.xyz
            = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_31
            = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = inversesqrt(u_xlat16_31);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;\n    u_xlat0.x =
            vs_TEXCOORD5.x + _BevelOffset;\n    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth,
            _TextureHeight);\n    u_xlat2.z = 0.0;\n    u_xlat3 = (-u_xlat2.xzzy)
            + vs_TEXCOORD0.xyxy;\n    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;\n   
            u_xlat10_4.x = texture2D(_MainTex, u_xlat3.xy).w;\n    u_xlat10_4.z =
            texture2D(_MainTex, u_xlat3.zw).w;\n    u_xlat10_4.y = texture2D(_MainTex,
            u_xlat2.xy).w;\n    u_xlat10_4.w = texture2D(_MainTex, u_xlat2.zw).w;\n   
            u_xlat0 = u_xlat0.xxxx + u_xlat10_4;\n    u_xlat0 = u_xlat0 + vec4(-0.5,
            -0.5, -0.5, -0.5);\n    u_xlat2.x = _BevelWidth + _OutlineWidth;\n   
            u_xlat2.x = max(u_xlat2.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat2.xxxx;\n   
            u_xlat2.x = u_xlat2.x * _Bevel;\n    u_xlat2.x = u_xlat2.x * _GradientScale;\n   
            u_xlat2.x = u_xlat2.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5,
            0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat3 = u_xlat0
            * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat3
            = -abs(u_xlat3) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat12.x = _ShaderFlags
            * 0.5;\n    u_xlatb22 = u_xlat12.x>=(-u_xlat12.x);\n    u_xlat12.x =
            fract(abs(u_xlat12.x));\n    u_xlat12.x = (u_xlatb22) ? u_xlat12.x :
            (-u_xlat12.x);\n    u_xlatb12 = u_xlat12.x>=0.5;\n    u_xlat0 = (bool(u_xlatb12))
            ? u_xlat3 : u_xlat0;\n    u_xlat3 = u_xlat0 * vec4(1.57079601, 1.57079601,
            1.57079601, 1.57079601);\n    u_xlat3 = sin(u_xlat3);\n    u_xlat3 =
            (-u_xlat0) + u_xlat3;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness,
            _BevelRoundness, _BevelRoundness)) * u_xlat3 + u_xlat0;\n    u_xlat12.x
            = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat12.xxxx);\n   
            u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy *
            u_xlat2.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w
            = float(1.0);\n    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat2.x
            = inversesqrt(u_xlat2.x);\n    u_xlat30 = dot(u_xlat0.zw, u_xlat0.zw);\n   
            u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat3.x = u_xlat30 * u_xlat0.z;\n   
            u_xlat3.yz = vec2(u_xlat30) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n   
            u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz
            * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat3.zxy * u_xlat0.yzx + (-u_xlat2.xyz);\n   
            u_xlat10_30 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat30 =
            (-u_xlat10_30) + 0.5;\n    u_xlat30 = u_xlat30 + (-vs_TEXCOORD5.x);\n   
            u_xlat30 = u_xlat30 * vs_TEXCOORD5.y + 0.5;\n    u_xlat2.x = _OutlineWidth
            * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_31
            = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0,
            1.0);\n    u_xlat16_5 = min(u_xlat2.x, 1.0);\n    u_xlat16_5 = sqrt(u_xlat16_5);\n   
            u_xlat16_31 = u_xlat16_31 * u_xlat16_5;\n    u_xlat12.xy = vec2(_OutlineUVSpeedX,
            _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_3 = texture2D(_OutlineTex,
            u_xlat12.xy);\n    u_xlat12.xyz = u_xlat10_3.xyz * _OutlineColor.xyz;\n   
            u_xlat3.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat13 = u_xlat10_3.w
            * u_xlat3.x;\n    u_xlat4.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy
            + vs_TEXCOORD0.zw;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat4.xy);\n   
            u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_4 * u_xlat5;\n   
            u_xlat16_7.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz = u_xlat12.xyz
            * vec3(u_xlat13) + (-u_xlat16_7.xyz);\n    u_xlat16_7.w = u_xlat3.x *
            u_xlat10_3.w + (-u_xlat6.w);\n    u_xlat16_3 = vec4(u_xlat16_31) * u_xlat16_7;\n   
            u_xlat16_4.w = u_xlat5.w * u_xlat10_4.w + u_xlat16_3.w;\n    u_xlat16_4.xyz
            = u_xlat6.xyz * u_xlat6.www + u_xlat16_3.xyz;\n    u_xlat16_31 = (-u_xlat2.x)
            * 0.5 + u_xlat30;\n    u_xlat30 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat30
            = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat12.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_7.x = u_xlat2.x
            * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_31 = u_xlat12.x * 0.5 + u_xlat16_31;\n   
            u_xlat16_31 = u_xlat16_31 / u_xlat16_7.x;\n    u_xlat16_31 = clamp(u_xlat16_31,
            0.0, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_2 =
            vec4(u_xlat16_31) * u_xlat16_4;\n    u_xlat6.x = (-_BumpFace) + _BumpOutline;\n   
            u_xlat6.x = u_xlat30 * u_xlat6.x + _BumpFace;\n    u_xlat10_16.xy = texture2D(_BumpMap,
            vs_TEXCOORD0.zw).yw;\n    u_xlat16_7.xy = u_xlat10_16.yx * vec2(2.0,
            2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_7.xy, u_xlat16_7.xy);\n   
            u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31)
            + 1.0;\n    u_xlat16_7.z = sqrt(u_xlat16_31);\n    u_xlat6.xyz = u_xlat16_7.xyz
            * u_xlat6.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat6.xyz = u_xlat16_2.www
            * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz +
            (-u_xlat6.xyz);\n    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat0.xyz = u_xlat0.xyz *
            u_xlat6.xxx;\n    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n   
            u_xlat16_7.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.z
            = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat16_7.xyz,
            u_xlat16_7.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat3.xyz
            = u_xlat6.xxx * u_xlat16_7.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz,
            u_xlat16_1.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat6.x
            = log2(u_xlat16_1.x);\n    u_xlat16 = (-_FaceShininess) + _OutlineShininess;\n   
            u_xlat16 = u_xlat30 * u_xlat16 + _FaceShininess;\n    u_xlat16_1.x =
            u_xlat16 * 128.0;\n    u_xlat6.x = u_xlat6.x * u_xlat16_1.x;\n    u_xlat6.x
            = exp2(u_xlat6.x);\n    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;\n   
            u_xlat6.xyz = u_xlat6.xxx * u_xlat16_1.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n   
            u_xlat36 = max(u_xlat16_2.w, 9.99999975e-05);\n    u_xlat8.xyz = u_xlat16_2.xyz
            / vec3(u_xlat36);\n    u_xlat16_11.xyz = u_xlat8.xyz * _LightColor0.xyz;\n   
            u_xlat6.xyz = u_xlat16_11.xyz * u_xlat16_1.xxx + u_xlat6.xyz;\n    u_xlat3.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat3);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat3);\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1.xyz
            = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat9.xyz = log2(u_xlat16_1.xyz);\n   
            u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat9.xyz = exp2(u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz
            = u_xlat8.xyz * u_xlat9.xyz + u_xlat6.xyz;\n    u_xlat6.xyz = (-_ReflectFaceColor.xyz)
            + _ReflectOutlineColor.xyz;\n    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz
            + _ReflectFaceColor.xyz;\n    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx +
            u_xlat8.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat30 = dot(vs_TEXCOORD6.xyz, u_xlat0.xyz);\n   
            u_xlat30 = u_xlat30 + u_xlat30;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30))
            + vs_TEXCOORD6.xyz;\n    u_xlat10_0.xyz = textureCube(_Cube, u_xlat0.xyz).xyz;\n   
            u_xlat0.xyz = u_xlat6.xyz * u_xlat10_0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz
            * u_xlat16_2.www + u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_2.w;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - VERTEXLIGHT_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - DIRECTIONAL
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - GLOW_ON
        - INSTANCING_ON
        - LIGHTPROBE_SH
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - VERTEXLIGHT_ON
        - __
        keywordGroups:
        - Keywords:
          - __
          - GLOW_ON
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - DIRECTIONAL
        - Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - LIGHTPROBE_SH
        KeywordsMinimalCardinality: 3
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: FORWARDBASE
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 227
        PlatformMask: -1
      - ShaderName: TextMeshPro/Distance Field (Surface)
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform
            \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute
            mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3
            vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying
            highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec3 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nint
            u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat
            u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool
            u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX,
            _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 +
            in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n   
            u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n   
            u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n   
            u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n   
            u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy
            * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw
            + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0
            = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n   
            u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n   
            u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n   
            u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx *
            u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y
            = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal)
            + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n   
            u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 *
            _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z
            = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz
            = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w
            * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n   
            vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z
            = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n   
            vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y
            = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy
            * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz
            * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz
            * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat1.xxx +
            u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat1.zzz + u_xlat0.xyz;\n    vs_TEXCOORD8.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat1.www + u_xlat0.xyz;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump
            vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform
            \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat
            _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float
            _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp
            sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4
            vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4
            u_xlat10_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump
            vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec3
            u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3
            u_xlat16_12;\nlowp vec2 u_xlat10_13;\nbool u_xlatb17;\nfloat u_xlat24;\nlowp
            float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid
            main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy
            = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z
            = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1
            = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex,
            u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n   
            u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w =
            texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n   
            u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth
            + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n   
            u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n   
            u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x *
            -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0
            = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0,
            2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0,
            1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 =
            u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n   
            u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n   
            u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0
            * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2
            = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness,
            _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n   
            u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n   
            u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy *
            u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w
            = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x
            = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n   
            u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n   
            u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz
            * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n   
            u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 =
            (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n   
            u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth
            * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x
            = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x,
            0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x
            = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n   
            u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n   
            u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat10_2.xyz
            * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n   
            u_xlat10 = u_xlat10_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex,
            u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_3
            * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz
            = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w
            = u_xlat2.x * u_xlat10_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx
            * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat10_3.w + u_xlat16_2.w;\n   
            u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x
            = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n   
            u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x
            = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5
            + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n   
            u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x)
            + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x
            = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x
            + _BumpFace;\n    u_xlat10_13.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n   
            u_xlat16_4.xy = u_xlat10_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28,
            1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n   
            u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n   
            u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n   
            u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz
            = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz,
            (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n   
            u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n   
            u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) *
            u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n   
            u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w
            = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz,
            u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x =
            dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw,
            vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8.x
            = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 *
            u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n   
            u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n   
            u_xlat8.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx
            + u_xlat8.xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD5.zzz + u_xlat8.xyz;\n    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.x = texture2D(_LightTexture0,
            u_xlat8.xx).x;\n    u_xlat16_4.xyz = u_xlat8.xxx * _LightColor0.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n    u_xlat0.xyz =
            u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n   
            u_xlat5.xyz = u_xlat16_1.xyz / vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat5.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz
            * u_xlat16_4.www + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - POINT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute
            highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute
            highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp
            vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD7;\nvec3 u_xlat0;\nint
            u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nint
            u_xlati4;\nvec3 u_xlat6;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat12
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat12);\n   
            u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy =
            u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat12 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n   
            u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat12;\n   
            u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat12;\n   
            u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat12;\n   
            u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n   
            u_xlat2.xy = vec2(u_xlat12) / u_xlat2.xy;\n    u_xlat12 = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat13 = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat13 =
            u_xlat13 * u_xlat2.x;\n    u_xlat2.x = u_xlat12 * u_xlat13;\n    u_xlat6.x
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat6.x * u_xlat2.x;\n   
            u_xlat12 = u_xlat12 * u_xlat13 + (-u_xlat2.x);\n    u_xlat6.xyz = _WorldSpaceCameraPos.yyy
            * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * _WorldSpaceCameraPos.xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * _WorldSpaceCameraPos.zzz + u_xlat6.xyz;\n    u_xlat6.xyz = u_xlat6.xyz
            + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat6.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            u_xlat0.xyz);\n    u_xlati4 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0
            = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati4) + u_xlati0;\n   
            u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n   
            u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat6.xyz = (-u_xlat1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n   
            u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;\n    u_xlat1.x = dot(u_xlat0.yzx,
            u_xlat1.xyz);\n    vs_TEXCOORD6.y = abs(u_xlat1.x) * u_xlat12 + u_xlat2.x;\n   
            u_xlatb12 = 0.0>=in_TEXCOORD1.y;\n    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);\n   
            u_xlat1.x = (-_WeightNormal) + _WeightBold;\n    u_xlat12 = u_xlat12
            * u_xlat1.x + _WeightNormal;\n    u_xlat12 = u_xlat12 * 0.25 + _FaceDilate;\n   
            u_xlat12 = u_xlat12 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat12 *
            0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat1.xyz = in_TANGENT0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx
            * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx
            * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat3.xyz
            = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat3.xyz);\n    u_xlat4 = in_TANGENT0.w
            * unity_WorldTransformParams.w;\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat3.xyz;\n   
            vs_TEXCOORD2.y = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat1.z;\n    vs_TEXCOORD3.z
            = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat1.x;\n   
            vs_TEXCOORD4.x = u_xlat1.y;\n    vs_TEXCOORD3.y = u_xlat3.y;\n    vs_TEXCOORD4.y
            = u_xlat3.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat6.yyy
            * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz
            * u_xlat6.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz
            * u_xlat6.zzz + u_xlat0.xyz;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat
            _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform
            \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform
            \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform
            \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform
            \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat
            _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float
            _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2
            vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying
            highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump
            vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp
            vec4 u_xlat10_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4
            u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump
            vec4 u_xlat16_7;\nfloat u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat
            u_xlat10;\nmediump vec3 u_xlat16_12;\nlowp vec2 u_xlat10_13;\nbool u_xlatb17;\nfloat
            u_xlat24;\nlowp float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat
            u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n   
            u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n   
            u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n   
            u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex,
            u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n   
            u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w =
            texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n   
            u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth
            + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n   
            u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n   
            u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x *
            -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0
            = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0,
            2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0,
            1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 =
            u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n   
            u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n   
            u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0
            * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2
            = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness,
            _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n   
            u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n   
            u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy *
            u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w
            = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x
            = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n   
            u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n   
            u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz
            * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n   
            u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 =
            (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n   
            u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth
            * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x
            = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x,
            0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x
            = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n   
            u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n   
            u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat10_2.xyz
            * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n   
            u_xlat10 = u_xlat10_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex,
            u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_3
            * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz
            = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w
            = u_xlat2.x * u_xlat10_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx
            * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat10_3.w + u_xlat16_2.w;\n   
            u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x
            = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n   
            u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x
            = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5
            + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n   
            u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x)
            + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x
            = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x
            + _BumpFace;\n    u_xlat10_13.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n   
            u_xlat16_4.xy = u_xlat10_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28,
            1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n   
            u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n   
            u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n   
            u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz
            = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz,
            (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n   
            u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n   
            u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat5.xyz *
            vec3(u_xlat29) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_28 = dot(u_xlat16_4.xyz,
            u_xlat16_4.xyz);\n    u_xlat16_28 = inversesqrt(u_xlat16_28);\n    u_xlat16_4.xyz
            = vec3(u_xlat16_28) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz,
            u_xlat16_4.xyz);\n    u_xlat16_4.y = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));\n    u_xlat0.x =
            log2(u_xlat16_4.x);\n    u_xlat8 = (-_FaceShininess) + _OutlineShininess;\n   
            u_xlat8 = u_xlat24 * u_xlat8 + _FaceShininess;\n    u_xlat16_4.x = u_xlat8
            * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x =
            exp2(u_xlat0.x);\n    u_xlat16_4.xzw = _LightColor0.xyz * _SpecColor.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xzw;\n    u_xlat24 = max(u_xlat16_1.w,
            9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz / vec3(u_xlat24);\n   
            SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xzw = u_xlat5.xyz * _LightColor0.xyz;\n   
            u_xlat0.xyz = u_xlat16_4.xzw * u_xlat16_4.yyy + u_xlat0.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform
            \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute
            mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3
            vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying
            highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec3 vs_TEXCOORD7;\nvarying highp vec4 vs_TEXCOORD8;\nvec4 u_xlat0;\nint
            u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat
            u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool
            u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX,
            _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 +
            in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n   
            u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n   
            u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n   
            u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n   
            u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy
            * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw
            + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0
            = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n   
            u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n   
            u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n   
            u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx *
            u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y
            = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal)
            + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n   
            u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 *
            _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z
            = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz
            = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w
            * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n   
            vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z
            = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n   
            vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y
            = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy
            * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz
            * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz
            * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;\n   
            vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump
            vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform
            \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat
            _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float
            _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp
            sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp
            vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying
            mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp
            vec4 u_xlat10_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4
            u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump
            vec4 u_xlat16_7;\nvec2 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat
            u_xlat10;\nmediump vec3 u_xlat16_12;\nlowp vec2 u_xlat10_13;\nbool u_xlatb16;\nbool
            u_xlatb17;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat
            u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n   
            u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n   
            u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n   
            u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex,
            u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n   
            u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w =
            texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n   
            u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth
            + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n   
            u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n   
            u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x *
            -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0
            = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0,
            2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0,
            1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 =
            u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n   
            u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n   
            u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0
            * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2
            = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness,
            _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n   
            u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n   
            u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy *
            u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w
            = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x
            = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n   
            u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n   
            u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz
            * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n   
            u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 =
            (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n   
            u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth
            * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x
            = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x,
            0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x
            = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n   
            u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n   
            u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat10_2.xyz
            * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n   
            u_xlat10 = u_xlat10_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex,
            u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_3
            * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz
            = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w
            = u_xlat2.x * u_xlat10_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx
            * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat10_3.w + u_xlat16_2.w;\n   
            u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x
            = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n   
            u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x
            = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5
            + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n   
            u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x)
            + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x
            = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x
            + _BumpFace;\n    u_xlat10_13.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n   
            u_xlat16_4.xy = u_xlat10_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28,
            1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n   
            u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n   
            u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n   
            u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz
            = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz,
            (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n   
            u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n   
            u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) *
            u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n   
            u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w
            = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz,
            u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x =
            dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw,
            vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8.x
            = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 *
            u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n   
            u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n   
            u_xlat2 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat2;\n   
            u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat2;\n   
            u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat8.xy
            = u_xlat2.xy / u_xlat2.ww;\n    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);\n   
            u_xlat8.x = texture2D(_LightTexture0, u_xlat8.xy).w;\n    u_xlatb16 =
            0.0<u_xlat2.z;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24
            = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat16_4.x = (u_xlatb16)
            ? 1.0 : 0.0;\n    u_xlat16_4.x = u_xlat8.x * u_xlat16_4.x;\n    u_xlat16_4.x
            = u_xlat24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n    u_xlat0.xyz =
            u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n   
            u_xlat5.xyz = u_xlat16_1.xyz / vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat5.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz
            * u_xlat16_4.www + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - SPOT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform
            \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute
            mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3
            vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying
            highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec3 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nint
            u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat
            u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool
            u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX,
            _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 +
            in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n   
            u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n   
            u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n   
            u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n   
            u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy
            * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw
            + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0
            = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n   
            u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n   
            u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n   
            u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx *
            u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y
            = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal)
            + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n   
            u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 *
            _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z
            = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz
            = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w
            * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n   
            vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z
            = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n   
            vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y
            = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy
            * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz
            * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz
            * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat1.xxx +
            u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * u_xlat1.zzz + u_xlat0.xyz;\n    vs_TEXCOORD8.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz
            * u_xlat1.www + u_xlat0.xyz;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump
            vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform
            \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat
            _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float
            _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp
            sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp
            vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying
            mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp
            vec4 u_xlat10_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4
            u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump
            vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat
            u_xlat10;\nmediump vec3 u_xlat16_12;\nlowp vec2 u_xlat10_13;\nfloat u_xlat16;\nbool
            u_xlatb17;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat
            u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n   
            u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n   
            u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n   
            u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex,
            u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n   
            u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w =
            texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n   
            u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth
            + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n   
            u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n   
            u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x *
            -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0
            = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0,
            2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0,
            1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 =
            u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n   
            u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n   
            u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0
            * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2
            = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness,
            _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n   
            u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n   
            u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy *
            u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w
            = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x
            = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n   
            u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n   
            u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz
            * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n   
            u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 =
            (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n   
            u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth
            * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x
            = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x,
            0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x
            = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n   
            u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n   
            u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat10_2.xyz
            * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n   
            u_xlat10 = u_xlat10_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex,
            u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_3
            * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz
            = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w
            = u_xlat2.x * u_xlat10_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx
            * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat10_3.w + u_xlat16_2.w;\n   
            u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x
            = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n   
            u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x
            = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5
            + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n   
            u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x)
            + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x
            = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x
            + _BumpFace;\n    u_xlat10_13.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n   
            u_xlat16_4.xy = u_xlat10_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28,
            1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n   
            u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n   
            u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n   
            u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz
            = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz,
            (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n   
            u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz)
            + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n   
            u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) *
            u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n   
            u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w
            = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz,
            u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x =
            dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw,
            vec2(0.0, 0.0));\n    u_xlat0.x = log2(u_xlat16_4.x);\n    u_xlat8.x
            = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 *
            u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n   
            u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat0.x = exp2(u_xlat0.x);\n   
            u_xlat8.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n   
            u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx
            + u_xlat8.xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz
            * vs_TEXCOORD5.zzz + u_xlat8.xyz;\n    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n   
            u_xlat5.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.x = textureCube(_LightTexture0,
            u_xlat8.xyz).w;\n    u_xlat16 = texture2D(_LightTextureB0, u_xlat5.xx).x;\n   
            u_xlat8.x = u_xlat8.x * u_xlat16;\n    u_xlat16_4.xyz = u_xlat8.xxx *
            _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat24 = max(u_xlat16_1.w,
            9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz / vec3(u_xlat24);\n   
            SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat5.xyz;\n   
            u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat0.xyz;\n    SV_Target0.xyz
            = u_xlat0.xyz;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - POINT_COOKIE
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform
            \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute
            mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3
            vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying
            highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec3 vs_TEXCOORD7;\nvarying highp vec2 vs_TEXCOORD8;\nvec3 u_xlat0;\nint
            u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat
            u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool
            u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX,
            _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 +
            in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15
            = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n   
            u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n   
            u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n   
            u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n   
            u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy
            * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw
            + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0
            = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n   
            u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n   
            u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3]
            * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n   
            u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx *
            u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y
            = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal)
            + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n   
            u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 *
            _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z
            = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz
            = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w
            * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n   
            vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z
            = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n   
            vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y
            = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy
            * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz
            * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz
            * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;\n   
            vs_TEXCOORD8.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww
            + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform
            \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump
            vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform
            \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat
            _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float
            _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp
            sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3
            vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4
            vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4
            u_xlat10_2;\nvec2 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump
            vec4 u_xlat16_4;\nvec4 u_xlat5;\nvec4 u_xlat6;\nmediump vec4 u_xlat16_7;\nvec2
            u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nmediump vec3
            u_xlat16_12;\nlowp vec2 u_xlat10_13;\nbool u_xlatb17;\nfloat u_xlat24;\nlowp
            float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid
            main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy
            = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z
            = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1
            = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat10_3.x = texture2D(_MainTex,
            u_xlat2.xy).w;\n    u_xlat10_3.z = texture2D(_MainTex, u_xlat2.zw).w;\n   
            u_xlat10_3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat10_3.w =
            texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat10_3;\n   
            u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth
            + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n   
            u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n   
            u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x *
            -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0
            = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0,
            2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0,
            1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 =
            u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n   
            u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n   
            u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0
            * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2
            = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness,
            _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n   
            u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n   
            u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy *
            u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w
            = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x
            = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n   
            u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n   
            u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz
            * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n   
            u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat24 =
            (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.x);\n   
            u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth
            * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x
            = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x,
            0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x
            = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n   
            u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n   
            u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat9.xyz = u_xlat10_2.xyz
            * _OutlineColor.xyz;\n    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;\n   
            u_xlat10 = u_xlat10_2.w * u_xlat2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex,
            u_xlat3.xy);\n    u_xlat5 = vs_COLOR0 * _FaceColor;\n    u_xlat6 = u_xlat10_3
            * u_xlat5;\n    u_xlat16_12.xyz = u_xlat6.www * u_xlat6.xyz;\n    u_xlat16_7.xyz
            = u_xlat9.xyz * vec3(u_xlat10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w
            = u_xlat2.x * u_xlat10_2.w + (-u_xlat6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx
            * u_xlat16_7;\n    u_xlat16_3.w = u_xlat5.w * u_xlat10_3.w + u_xlat16_2.w;\n   
            u_xlat16_3.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x
            = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n   
            u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x
            = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5
            + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n   
            u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x)
            + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x
            = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x
            + _BumpFace;\n    u_xlat10_13.xy = texture2D(_BumpMap, vs_TEXCOORD0.zw).yw;\n   
            u_xlat16_4.xy = u_xlat10_13.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_28 = dot(u_xlat16_4.xy, u_xlat16_4.xy);\n    u_xlat16_28 = min(u_xlat16_28,
            1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_4.z = sqrt(u_xlat16_28);\n   
            u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n   
            u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n   
            u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz
            = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz,
            (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n   
            u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat0.x
            = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n   
            u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat5.xyz *
            vec3(u_xlat29) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_28 = dot(u_xlat16_4.xyz,
            u_xlat16_4.xyz);\n    u_xlat16_28 = inversesqrt(u_xlat16_28);\n    u_xlat16_4.xyz
            = vec3(u_xlat16_28) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz,
            u_xlat16_4.xyz);\n    u_xlat16_4.y = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));\n    u_xlat0.x =
            log2(u_xlat16_4.x);\n    u_xlat8.x = (-_FaceShininess) + _OutlineShininess;\n   
            u_xlat8.x = u_xlat24 * u_xlat8.x + _FaceShininess;\n    u_xlat16_4.x
            = u_xlat8.x * 128.0;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n   
            u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat8.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx
            + u_xlat8.xy;\n    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy
            * vs_TEXCOORD5.zz + u_xlat8.xy;\n    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n   
            u_xlat8.x = texture2D(_LightTexture0, u_xlat8.xy).w;\n    u_xlat16_4.xzw
            = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xzw
            * _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n   
            u_xlat24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat5.xyz = u_xlat16_1.xyz
            / vec3(u_xlat24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xzw
            = u_xlat16_4.xzw * u_xlat5.xyz;\n    u_xlat0.xyz = u_xlat16_4.xzw * u_xlat16_4.yyy
            + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 4
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL_COOKIE
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - DIRECTIONAL
        - DIRECTIONAL_COOKIE
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - GLOW_ON
        - POINT
        - POINT_COOKIE
        - SPOT
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - __
        keywordGroups:
        - Keywords:
          - __
          - GLOW_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - POINT
        - Keywords:
          - DIRECTIONAL
        - Keywords:
          - SPOT
        - Keywords:
          - POINT_COOKIE
        - Keywords:
          - DIRECTIONAL_COOKIE
        KeywordsMinimalCardinality: 5
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: FORWARDADD
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 227
        PlatformMask: -1
      - ShaderName: TextMeshPro/Distance Field (Surface)
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 unity_LightShadowBias;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _ScaleRatioA;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD3;\nvarying highp
            float vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat4;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat4
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat4);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat4) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3.xy
            = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    u_xlat0.x
            = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat0.x = (-_FaceDilate)
            * _ScaleRatioA + u_xlat0.x;\n    vs_TEXCOORD2 = u_xlat0.x * 0.5;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD1;\nvarying
            highp float vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nlowp
            float u_xlat10_0;\nbool u_xlatb0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD1.xy).w;\n    u_xlat0 = u_xlat10_0 + (-vs_TEXCOORD2);\n   
            u_xlatb0 = u_xlat0<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 2
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
          - Key: SHADOWSUPPORT
            Value: true
        definedKeywords:
        - SHADOWS_CUBE
        - SHADOWS_DEPTH
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - SHADOWS_DEPTH
        - Keywords:
          - SHADOWS_CUBE
        KeywordsMinimalCardinality: 2
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 2
        SubShaderIndex: 0
        SerializedObjectId: 2
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        - Key: SHADOWSUPPORT
          Value: true
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: f7ada0af4f174f0694ca6a487b8f543d, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF-Surface.shader
    ShaderDefinedKeywords:
    - DIRECTIONAL
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - GLOW_ON
    - LIGHTPROBE_SH
    - VERTEXLIGHT_ON
    - DIRECTIONAL_COOKIE
    - POINT
    - POINT_COOKIE
    - SPOT
    - SHADOWS_DEPTH
    - INSTANCING_ON
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    - SHADOWS_CUBE
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Distance Field Overlay
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool
            u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid
            main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x)
            + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz *
            vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Overlay
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4
            u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat
            u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid
            main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x)
            + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n   
            u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat5 = u_xlat0.x
            * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n   
            u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6
            / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1
            = (-u_xlat16_1) + 1.0;\n    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 +
            -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;\n   
            SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n   
            if(u_xlatb4){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Overlay
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2
            u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump
            float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n   
            u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 =
            u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) +
            vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz *
            u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n   
            u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y
            * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0
            = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Overlay
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2
            u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool
            u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid
            main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x)
            + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz *
            u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n   
            u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y
            * u_xlat4.x;\n    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n   
            u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0
            * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Overlay
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - BEVEL_ON
        - GLOW_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNDERLAY_INNER
        - UNDERLAY_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        keywordGroups:
        - Keywords:
          - __
          - BEVEL_ON
        - Keywords:
          - __
          - UNDERLAY_ON
          - UNDERLAY_INNER
        - Keywords:
          - __
          - GLOW_ON
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Overlay
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 227
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Overlay
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: dd89cf5b9246416f84610a006f916af7, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF Overlay.shader
    ShaderDefinedKeywords:
    - BEVEL_ON
    - GLOW_ON
    - UNDERLAY_INNER
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Distance Field SSD
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            float vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX,
            _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 =
            0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n   
            u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x
            * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n   
            u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x *
            0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension
            GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying
            highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            float vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvec2 u_xlat3;\nlowp
            vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nmediump float
            u_xlat16_7;\nfloat u_xlat10;\nlowp float u_xlat10_10;\nmediump float
            u_xlat16_12;\nvoid main()\n{\n    u_xlat0.x = (-vs_TEXCOORD1) + 0.5;\n   
            u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y = dFdy(vs_TEXCOORD0.y);\n   
            u_xlat5.x = _TextureWidth * 0.75;\n    u_xlat5.xy = u_xlat5.xx * u_xlat1.xy;\n   
            u_xlat5.x = dot(u_xlat5.xy, u_xlat5.xy);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n   
            u_xlat5.x = u_xlat5.x * _GradientScale;\n    u_xlat10 = _Sharpness +
            1.0;\n    u_xlat5.x = u_xlat10 * u_xlat5.x;\n    u_xlat10 = 0.5 / u_xlat5.x;\n   
            u_xlat0.x = u_xlat10 + u_xlat0.x;\n    u_xlat10_10 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_10) + u_xlat0.x;\n   
            u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat5.x *
            u_xlat10;\n    u_xlat16_2 = u_xlat10 * 0.5;\n    u_xlat16_7 = min(u_xlat10,
            1.0);\n    u_xlat16_7 = sqrt(u_xlat16_7);\n    u_xlat16_12 = u_xlat0.x
            * u_xlat5.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x * u_xlat5.x
            + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_2
            = u_xlat16_7 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat10 = u_xlat5.x * u_xlat0.x;\n    u_xlat16_7 = u_xlat0.x * u_xlat5.x
            + 1.0;\n    u_xlat16_12 = u_xlat10 * 0.5 + u_xlat16_12;\n    u_xlat16_7
            = u_xlat16_12 / u_xlat16_7;\n    u_xlat16_7 = clamp(u_xlat16_7, 0.0,
            1.0);\n    u_xlat16_7 = (-u_xlat16_7) + 1.0;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX,
            _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat1 = u_xlat10_0 * _OutlineColor;\n    u_xlat0.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat3.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_3 = texture2D(_FaceTex,
            u_xlat3.xy);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat10_3.xyz;\n    u_xlat3.x
            = u_xlat10_3.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xxx;\n   
            u_xlat16_1.xyz = u_xlat1.xyz * u_xlat1.www + (-u_xlat16_4.xyz);\n   
            u_xlat16_1.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat3.x);\n    u_xlat16_1
            = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat16_0.xyz = u_xlat0.xyz *
            u_xlat3.xxx + u_xlat16_1.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_3.w
            + u_xlat16_1.w;\n    u_xlat16_0 = vec4(u_xlat16_7) * u_xlat16_0;\n   
            u_xlat0 = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            float vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX,
            _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 =
            0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n   
            u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x
            * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n   
            u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x *
            0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension
            GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying
            highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            float vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvec2 u_xlat3;\nlowp
            vec4 u_xlat10_3;\nbool u_xlatb3;\nmediump vec4 u_xlat16_4;\nvec2 u_xlat5;\nmediump
            float u_xlat16_7;\nfloat u_xlat10;\nlowp float u_xlat10_10;\nmediump
            float u_xlat16_12;\nvoid main()\n{\n    u_xlat0.x = (-vs_TEXCOORD1) +
            0.5;\n    u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y = dFdy(vs_TEXCOORD0.y);\n   
            u_xlat5.x = _TextureWidth * 0.75;\n    u_xlat5.xy = u_xlat5.xx * u_xlat1.xy;\n   
            u_xlat5.x = dot(u_xlat5.xy, u_xlat5.xy);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n   
            u_xlat5.x = u_xlat5.x * _GradientScale;\n    u_xlat10 = _Sharpness +
            1.0;\n    u_xlat5.x = u_xlat10 * u_xlat5.x;\n    u_xlat10 = 0.5 / u_xlat5.x;\n   
            u_xlat0.x = u_xlat10 + u_xlat0.x;\n    u_xlat10_10 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_10) + u_xlat0.x;\n   
            u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat5.x *
            u_xlat10;\n    u_xlat16_2 = u_xlat10 * 0.5;\n    u_xlat16_7 = min(u_xlat10,
            1.0);\n    u_xlat16_7 = sqrt(u_xlat16_7);\n    u_xlat16_12 = u_xlat0.x
            * u_xlat5.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x * u_xlat5.x
            + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_2
            = u_xlat16_7 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat10 = u_xlat5.x * u_xlat0.x;\n    u_xlat16_7 = u_xlat0.x * u_xlat5.x
            + 1.0;\n    u_xlat16_12 = u_xlat10 * 0.5 + u_xlat16_12;\n    u_xlat16_7
            = u_xlat16_12 / u_xlat16_7;\n    u_xlat16_7 = clamp(u_xlat16_7, 0.0,
            1.0);\n    u_xlat16_7 = (-u_xlat16_7) + 1.0;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX,
            _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat1 = u_xlat10_0 * _OutlineColor;\n    u_xlat0.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat3.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_3 = texture2D(_FaceTex,
            u_xlat3.xy);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat10_3.xyz;\n    u_xlat3.x
            = u_xlat10_3.w * _FaceColor.w;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xxx;\n   
            u_xlat16_1.xyz = u_xlat1.xyz * u_xlat1.www + (-u_xlat16_4.xyz);\n   
            u_xlat16_1.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat3.x);\n    u_xlat16_1
            = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat16_4.w = _FaceColor.w * u_xlat10_3.w
            + u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat3.xxx + u_xlat16_1.xyz;\n   
            u_xlat16_0 = vec4(u_xlat16_7) * u_xlat16_4;\n    u_xlat16_2 = u_xlat16_4.w
            * u_xlat16_7 + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n   
            u_xlat0 = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            float vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX,
            _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 =
            0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n   
            u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x
            * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n   
            u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x *
            0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension
            GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp float vs_TEXCOORD1;\nvarying highp
            vec2 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nvec3
            u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump float
            u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_4;\nmediump
            vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_8;\nvec2 u_xlat12;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat10_0 =
            texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat6.x = (-vs_TEXCOORD1)
            + 0.5;\n    u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y = dFdy(vs_TEXCOORD0.y);\n   
            u_xlat12.x = _TextureWidth * 0.75;\n    u_xlat12.xy = u_xlat12.xx * u_xlat1.xy;\n   
            u_xlat12.x = dot(u_xlat12.xy, u_xlat12.xy);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n   
            u_xlat12.x = u_xlat12.x * _GradientScale;\n    u_xlat18 = _Sharpness
            + 1.0;\n    u_xlat12.x = u_xlat18 * u_xlat12.x;\n    u_xlat18 = 0.5 /
            u_xlat12.x;\n    u_xlat6.x = u_xlat18 + u_xlat6.x;\n    u_xlat0.x = (-u_xlat10_0)
            + u_xlat6.x;\n    u_xlat6.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat6.x
            = u_xlat12.x * u_xlat6.x;\n    u_xlat16_2 = u_xlat6.x * 0.5;\n    u_xlat16_8
            = min(u_xlat6.x, 1.0);\n    u_xlat16_8 = sqrt(u_xlat16_8);\n    u_xlat16_14
            = u_xlat0.x * u_xlat12.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x
            * u_xlat12.x + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n   
            u_xlat16_2 = u_xlat16_8 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat6.x = u_xlat12.x * u_xlat0.x;\n    u_xlat16_8
            = u_xlat0.x * u_xlat12.x + 1.0;\n    u_xlat0.x = float(1.0) / u_xlat12.x;\n   
            u_xlat0.xz = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25)
            + u_xlat0.xx;\n    u_xlat0.xz = vec2(0.25, 0.25) / u_xlat0.xz;\n    u_xlat16_14
            = u_xlat6.x * 0.5 + u_xlat16_14;\n    u_xlat16_8 = u_xlat16_14 / u_xlat16_8;\n   
            u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8)
            + 1.0;\n    u_xlat6.xz = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy
            + vs_TEXCOORD5.zw;\n    u_xlat10_1 = texture2D(_OutlineTex, u_xlat6.xz);\n   
            u_xlat3 = u_xlat10_1 * _OutlineColor;\n    u_xlat1.xyz = vs_COLOR0.xyz
            * _FaceColor.xyz;\n    u_xlat6.xz = vec2(_FaceUVSpeedX, _FaceUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat6.xz);\n   
            u_xlat1.xyz = u_xlat1.xyz * u_xlat10_4.xyz;\n    u_xlat6.x = u_xlat10_4.w
            * _FaceColor.w;\n    u_xlat16_5.xyz = u_xlat6.xxx * u_xlat1.xyz;\n   
            u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_5.xyz);\n   
            u_xlat16_3.w = _OutlineColor.w * u_xlat10_1.w + (-u_xlat6.x);\n    u_xlat16_3
            = vec4(u_xlat16_2) * u_xlat16_3;\n    u_xlat16_1.xyz = u_xlat1.xyz *
            u_xlat6.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_3.w;\n    u_xlat16_1 = vec4(u_xlat16_8) * u_xlat16_1;\n   
            u_xlat6.xz = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat6.xz = u_xlat6.xz
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xz * u_xlat6.xz;\n   
            u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat0.y
            * u_xlat0.x;\n    u_xlat16_0 = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat0
            = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            float vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX,
            _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    vs_COLOR0 = in_COLOR0;\n    u_xlatb8 =
            0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n   
            u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x
            * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n   
            u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    vs_TEXCOORD1 = u_xlat8.x *
            0.5;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension
            GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _TextureWidth;\nuniform \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp float vs_TEXCOORD1;\nvarying highp
            vec2 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nvec3
            u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump float
            u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_4;\nbool
            u_xlatb4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_8;\nvec2
            u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat6.x =
            (-vs_TEXCOORD1) + 0.5;\n    u_xlat1.x = dFdx(vs_TEXCOORD0.y);\n    u_xlat1.y
            = dFdy(vs_TEXCOORD0.y);\n    u_xlat12.x = _TextureWidth * 0.75;\n   
            u_xlat12.xy = u_xlat12.xx * u_xlat1.xy;\n    u_xlat12.x = dot(u_xlat12.xy,
            u_xlat12.xy);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.x
            = u_xlat12.x * _GradientScale;\n    u_xlat18 = _Sharpness + 1.0;\n   
            u_xlat12.x = u_xlat18 * u_xlat12.x;\n    u_xlat18 = 0.5 / u_xlat12.x;\n   
            u_xlat6.x = u_xlat18 + u_xlat6.x;\n    u_xlat0.x = (-u_xlat10_0) + u_xlat6.x;\n   
            u_xlat6.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat6.x = u_xlat12.x
            * u_xlat6.x;\n    u_xlat16_2 = u_xlat6.x * 0.5;\n    u_xlat16_8 = min(u_xlat6.x,
            1.0);\n    u_xlat16_8 = sqrt(u_xlat16_8);\n    u_xlat16_14 = u_xlat0.x
            * u_xlat12.x + (-u_xlat16_2);\n    u_xlat16_2 = u_xlat0.x * u_xlat12.x
            + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_2
            = u_xlat16_8 * u_xlat16_2;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat6.x = u_xlat12.x * u_xlat0.x;\n    u_xlat16_8 = u_xlat0.x * u_xlat12.x
            + 1.0;\n    u_xlat0.x = float(1.0) / u_xlat12.x;\n    u_xlat0.xz = vec2(_MaskSoftnessX,
            _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xx;\n    u_xlat0.xz = vec2(0.25,
            0.25) / u_xlat0.xz;\n    u_xlat16_14 = u_xlat6.x * 0.5 + u_xlat16_14;\n   
            u_xlat16_8 = u_xlat16_14 / u_xlat16_8;\n    u_xlat16_8 = clamp(u_xlat16_8,
            0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + 1.0;\n    u_xlat6.xz = vec2(_OutlineUVSpeedX,
            _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_1 = texture2D(_OutlineTex,
            u_xlat6.xz);\n    u_xlat3 = u_xlat10_1 * _OutlineColor;\n    u_xlat1.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat6.xz = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat6.xz);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_4.xyz;\n    u_xlat6.x
            = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_5.xyz = u_xlat6.xxx * u_xlat1.xyz;\n   
            u_xlat16_3.xyz = u_xlat3.xyz * u_xlat3.www + (-u_xlat16_5.xyz);\n   
            u_xlat16_3.w = _OutlineColor.w * u_xlat10_1.w + (-u_xlat6.x);\n    u_xlat16_3
            = vec4(u_xlat16_2) * u_xlat16_3;\n    u_xlat16_1.xyz = u_xlat1.xyz *
            u_xlat6.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_3.w;\n    u_xlat16_1 = vec4(u_xlat16_8) * u_xlat16_1;\n   
            u_xlat6.xz = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat6.xz = u_xlat6.xz
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xz * u_xlat6.xz;\n   
            u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat0.y
            * u_xlat0.x;\n    u_xlat16_8 = u_xlat16_1.w * u_xlat16_2 + -0.00100000005;\n   
            u_xlat16_0 = u_xlat16_1 * vec4(u_xlat16_2);\n    u_xlat0 = u_xlat16_0
            * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    u_xlatb4 = u_xlat16_8<0.0;\n   
            if(u_xlatb4){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - BEVEL_ON
        - FORCE_LINEAR
        - GLOW_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNDERLAY_INNER
        - UNDERLAY_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        keywordGroups:
        - Keywords:
          - __
          - BEVEL_ON
        - Keywords:
          - __
          - UNDERLAY_ON
          - UNDERLAY_INNER
        - Keywords:
          - __
          - GLOW_ON
        - Keywords:
          - __
          - FORCE_LINEAR
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: 14eb328de4b8eb245bb7cea29e4ac00b, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF SSD.shader
    ShaderDefinedKeywords:
    - BEVEL_ON
    - FORCE_LINEAR
    - GLOW_ON
    - UNDERLAY_INNER
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Mobile/Bitmap
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tfloat _DiffusePower;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute highp
            vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    u_xlat6.xy = vec2(_MaskSoftnessX, _MaskSoftnessY)
            * vec2(0.25, 0.25) + u_xlat1.ww;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat6.xy;\n    u_xlat16_1 = in_COLOR0 * _Color;\n    u_xlat2.xyz
            = u_xlat16_1.xyz * vec3(_DiffusePower);\n    vs_COLOR0.w = u_xlat16_1.w;\n   
            vs_COLOR0.xyz = u_xlat2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat1.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nlowp
            float u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat0 = u_xlat10_0 * vs_COLOR0.w;\n    SV_Target0.w
            = u_xlat0;\n    SV_Target0.xyz = vs_COLOR0.xyz;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tfloat _DiffusePower;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute highp
            vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    u_xlat6.xy = vec2(_MaskSoftnessX, _MaskSoftnessY)
            * vec2(0.25, 0.25) + u_xlat1.ww;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat6.xy;\n    u_xlat16_1 = in_COLOR0 * _Color;\n    u_xlat2.xyz
            = u_xlat16_1.xyz * vec3(_DiffusePower);\n    vs_COLOR0.w = u_xlat16_1.w;\n   
            vs_COLOR0.xyz = u_xlat2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat1.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nlowp
            float u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1
            = vs_COLOR0.w * u_xlat10_0 + -0.00100000005;\n    u_xlat0 = u_xlat10_0
            * vs_COLOR0.w;\n    SV_Target0.w = u_xlat0;\n    u_xlatb0 = u_xlat16_1<0.0;\n   
            if(u_xlatb0){discard;}\n    SV_Target0.xyz = vs_COLOR0.xyz;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tfloat _DiffusePower;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute highp
            vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    u_xlat6.xy = vec2(_MaskSoftnessX, _MaskSoftnessY)
            * vec2(0.25, 0.25) + u_xlat1.ww;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat6.xy;\n    u_xlat16_1 = in_COLOR0 * _Color;\n    u_xlat2.xyz
            = u_xlat16_1.xyz * vec3(_DiffusePower);\n    vs_COLOR0.w = u_xlat16_1.w;\n   
            vs_COLOR0.xyz = u_xlat2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat1.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nlowp
            float u_xlat10_0;\nmediump float u_xlat16_1;\nvec2 u_xlat2;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0 = u_xlat10_0
            * vs_COLOR0.w;\n    u_xlat2.xy = (-_ClipRect.xy) + _ClipRect.zw;\n   
            u_xlat2.xy = u_xlat2.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat2.xy = u_xlat2.xy
            * vs_TEXCOORD2.zw;\n    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);\n   
            u_xlat16_1 = u_xlat2.y * u_xlat2.x;\n    SV_Target0.w = u_xlat0 * u_xlat16_1;\n   
            SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tfloat _DiffusePower;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute highp
            vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x
            = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n   
            u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy
            * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy
            = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n   
            gl_Position.zw = u_xlat1.zw;\n    u_xlat6.xy = vec2(_MaskSoftnessX, _MaskSoftnessY)
            * vec2(0.25, 0.25) + u_xlat1.ww;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat6.xy;\n    u_xlat16_1 = in_COLOR0 * _Color;\n    u_xlat2.xyz
            = u_xlat16_1.xyz * vec3(_DiffusePower);\n    vs_COLOR0.w = u_xlat16_1.w;\n   
            vs_COLOR0.xyz = u_xlat2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy =
            (-u_xlat1.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nlowp
            float u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump
            float u_xlat16_3;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat0.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 =
            texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = u_xlat10_0 *
            vs_COLOR0.w;\n    u_xlat16_3 = u_xlat0.x * u_xlat16_1 + -0.00100000005;\n   
            u_xlat16_5 = u_xlat16_1 * u_xlat0.x;\n    SV_Target0.xyz = vec3(u_xlat16_1)
            * vs_COLOR0.xyz;\n    SV_Target0.w = u_xlat16_5;\n    u_xlatb0 = u_xlat16_3<0.0;\n   
            if(u_xlatb0){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        keywordGroups:
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    - Index: 1
      Passes:
      - ShaderName: TextMeshPro/Mobile/Bitmap
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec3 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            vs_COLOR0 = in_COLOR0;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0
            gl_FragData[0]\nlowp float u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    SV_Target0.w = u_xlat10_0
            * _Color.w;\n    SV_Target0.xyz = vs_COLOR0.xyz * _Color.xyz;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 1
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 1
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: 1e3b057af24249748ff873be7fafee47, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_Bitmap-Mobile.shader
    ShaderDefinedKeywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Mobile/Distance Field
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1
            = clamp(u_xlat16_1, 0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0
            = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n   
            u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx
            * u_xlat16_0 + vs_COLOR1;\n    SV_Target0 = u_xlat16_2.yyyy * u_xlat16_0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat
            _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3
            in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2
            in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4
            vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat
            u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w
            = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w
            = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz
            = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n   
            u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n   
            u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w
            = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz
            = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n   
            u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x =
            u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n   
            u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16)
            * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x
            = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n   
            u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n   
            u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w
            = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w
            = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX,
            _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC,
            _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy
            = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16
            + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y
            * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp
            float u_xlat10_2;\nmediump vec2 u_xlat16_3;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat10_0
            * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x,
            0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n   
            u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat0 = u_xlat16_1.xxxx * u_xlat16_0;\n   
            u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = vec2(u_xlat10_2) * vs_TEXCOORD1.xx
            + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0,
            1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n   
            u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w)
            * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat16_1.xxxx + u_xlat16_2;\n   
            u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNDERLAY_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1
            = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 =
            clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = vs_COLOR0.w * u_xlat16_1
            + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * vs_COLOR0;\n   
            SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_1;\nbool u_xlatb1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n   
            u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx
            + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0,
            1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n   
            u_xlat16_2.x = u_xlat16_0.w * u_xlat16_2.y + -0.00100000005;\n    u_xlat16_0
            = u_xlat16_2.yyyy * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1
            = u_xlat16_2.x<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 4
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat
            _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3
            in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2
            in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4
            vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat
            u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w
            = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w
            = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz
            = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n   
            u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n   
            u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w
            = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz
            = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n   
            u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x =
            u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n   
            u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16)
            * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x
            = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n   
            u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n   
            u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w
            = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w
            = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX,
            _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC,
            _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy
            = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16
            + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y
            * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp
            float u_xlat10_2;\nmediump vec2 u_xlat16_3;\nbool u_xlatb4;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x
            = u_xlat10_0 * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x
            = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat0
            = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n   
            u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy
            = vec2(u_xlat10_2) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy
            = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx *
            u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n   
            u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0
            * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat16_1.x = u_xlat0.w * vs_TEXCOORD3.z
            + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;\n    SV_Target0
            = u_xlat0;\n    u_xlatb4 = u_xlat16_1.x<0.0;\n    if(u_xlatb4){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 5
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 =
            texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat10_0
            * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3,
            0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0
            = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 6
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec2
            u_xlat1;\nlowp float u_xlat10_1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n   
            u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx
            + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0,
            1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n   
            u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n    u_xlat1.xy = (-_ClipRect.xy)
            + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy,
            0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.x;\n    SV_Target0
            = u_xlat16_0 * u_xlat16_2.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 7
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat
            _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3
            in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2
            in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4
            vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat
            u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w
            = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w
            = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz
            = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n   
            u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n   
            u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w
            = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz
            = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n   
            u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x =
            u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n   
            u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16)
            * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x
            = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n   
            u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n   
            u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w
            = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w
            = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX,
            _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC,
            _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy
            = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16
            + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y
            * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump
            vec2 u_xlat16_3;\nvec2 u_xlat4;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat10_0 * vs_TEXCOORD4.x +
            (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n   
            u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    u_xlat16_0.w
            = _UnderlayColor.w;\n    u_xlat0 = u_xlat16_1.xxxx * u_xlat16_0;\n   
            u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = vec2(u_xlat10_2) * vs_TEXCOORD1.xx
            + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0,
            1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n   
            u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w)
            * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat16_1.xxxx + u_xlat16_2;\n   
            u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n   
            u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat4.y
            * u_xlat4.x;\n    u_xlat16_0 = u_xlat0 * u_xlat16_1.xxxx;\n    u_xlat0
            = u_xlat16_0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 8
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNDERLAY_ON
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n   
            u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n   
            u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y
            * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_4 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_4
            = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4) * vs_COLOR0;\n   
            u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0
            = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2
            = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 9
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec2
            u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nmediump vec2 u_xlat16_2;\nmediump
            float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy
            = vec2(u_xlat10_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy
            = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx *
            u_xlat16_0 + vs_COLOR1;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n   
            u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n   
            u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y
            * u_xlat1.x;\n    u_xlat16_5 = u_xlat16_0.w * u_xlat16_2.x + -0.00100000005;\n   
            u_xlat16_0 = u_xlat16_0 * u_xlat16_2.xxxx;\n    SV_Target0 = u_xlat16_0;\n   
            u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 10
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat
            _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3
            in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2
            in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4
            vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump
            vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat
            u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w
            = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w
            = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz
            = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n   
            u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n   
            u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w
            = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n   
            u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz
            = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n   
            u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x =
            u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n   
            u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16)
            * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x
            = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n   
            u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n   
            u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w
            = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w
            = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX,
            _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC,
            _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy
            = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16
            + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y
            * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump
            vec2 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x
            = u_xlat10_0 * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x
            = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat0
            = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n   
            u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy
            = vec2(u_xlat10_2) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy
            = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx *
            u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n   
            u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat0 = u_xlat0
            * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n   
            u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy
            * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n   
            u_xlat16_1.x = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat0 * u_xlat16_1.xxxx;\n   
            u_xlat16_1.x = u_xlat16_0.w * vs_TEXCOORD3.z + -0.00100000005;\n    u_xlat0
            = u_xlat16_0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    u_xlatb4
            = u_xlat16_1.x<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 11
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - OUTLINE_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNDERLAY_INNER
        - UNDERLAY_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        keywordGroups:
        - Keywords:
          - __
          - OUTLINE_ON
        - Keywords:
          - __
          - UNDERLAY_ON
          - UNDERLAY_INNER
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile.shader
    ShaderDefinedKeywords:
    - OUTLINE_ON
    - UNDERLAY_INNER
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Mobile/Distance Field - Masking
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskWipeControl;\nuniform
            \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform
            \tint _MaskInverse;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _MaskTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_0;\nmediump float u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3
            u_xlat3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump float u_xlat16_6;\nfloat
            u_xlat18;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n   
            u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy
            * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n   
            u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_6 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n   
            u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_6)
            * vs_COLOR0;\n    u_xlat16_6 = u_xlat16_1 * u_xlat16_0.w;\n    u_xlat16_2.xyz
            = vec3(u_xlat16_6) * _MaskEdgeColor.xyz;\n    u_xlat3.xyz = u_xlat16_0.xyz
            * vec3(u_xlat16_1) + (-u_xlat16_2.xyz);\n    u_xlat18 = (_MaskInverse
            != 0) ? 1.0 : 0.0;\n    u_xlat10_4 = texture2D(_MaskTex, vs_TEXCOORD0.zw).w;\n   
            u_xlat18 = u_xlat18 + (-u_xlat10_4);\n    u_xlat4 = (-_MaskWipeControl)
            + 1.0;\n    u_xlat18 = u_xlat4 * _MaskEdgeSoftness + abs(u_xlat18);\n   
            u_xlat18 = u_xlat18 + (-_MaskWipeControl);\n    u_xlat18 = u_xlat18 /
            _MaskEdgeSoftness;\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat3.xyz
            = vec3(u_xlat18) * u_xlat3.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat0.w = u_xlat16_6 * u_xlat18;\n    SV_Target0
            = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskWipeControl;\nuniform
            \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform
            \tint _MaskInverse;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _MaskTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define
            SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nmediump float u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nvec3 u_xlat5;\nlowp
            float u_xlat10_5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump
            float u_xlat16_11;\nvoid main()\n{\n    u_xlat0 = (_MaskInverse != 0)
            ? 1.0 : 0.0;\n    u_xlat10_5 = texture2D(_MaskTex, vs_TEXCOORD0.zw).w;\n   
            u_xlat0 = (-u_xlat10_5) + u_xlat0;\n    u_xlat5.x = (-_MaskWipeControl)
            + 1.0;\n    u_xlat0 = u_xlat5.x * _MaskEdgeSoftness + abs(u_xlat0);\n   
            u_xlat0 = u_xlat0 + (-_MaskWipeControl);\n    u_xlat0 = u_xlat0 / _MaskEdgeSoftness;\n   
            u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat5.xy = (-_ClipRect.xy)
            + _ClipRect.zw;\n    u_xlat5.xy = u_xlat5.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD2.zw;\n    u_xlat5.xy = clamp(u_xlat5.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat5.y * u_xlat5.x;\n    u_xlat10_5 =
            texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_6 = u_xlat10_5
            * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_2 = vec4(u_xlat16_6) * vs_COLOR0;\n    u_xlat16_6
            = u_xlat16_1 * u_xlat16_2.w;\n    u_xlat16_11 = u_xlat16_6 * u_xlat0
            + -0.00100000005;\n    u_xlatb5 = u_xlat16_11<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat16_3.xyz = vec3(u_xlat16_6) * _MaskEdgeColor.xyz;\n    u_xlat4.w
            = u_xlat0 * u_xlat16_6;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_1)
            + (-u_xlat16_3.xyz);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat5.xyz +
            u_xlat16_3.xyz;\n    u_xlat4.xyz = vec3(u_xlat0) * u_xlat5.xyz;\n   
            SV_Target0 = u_xlat4;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskWipeControl;\nuniform
            \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform
            \tint _MaskInverse;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _MaskTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_0;\nmediump float u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3
            u_xlat3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump float u_xlat16_6;\nfloat
            u_xlat18;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n   
            u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy
            * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n   
            u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_6 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n   
            u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_6)
            * vs_COLOR0;\n    u_xlat16_6 = u_xlat16_1 * u_xlat16_0.w;\n    u_xlat16_2.xyz
            = vec3(u_xlat16_6) * _MaskEdgeColor.xyz;\n    u_xlat3.xyz = u_xlat16_0.xyz
            * vec3(u_xlat16_1) + (-u_xlat16_2.xyz);\n    u_xlat18 = (_MaskInverse
            != 0) ? 1.0 : 0.0;\n    u_xlat10_4 = texture2D(_MaskTex, vs_TEXCOORD0.zw).w;\n   
            u_xlat18 = u_xlat18 + (-u_xlat10_4);\n    u_xlat4 = (-_MaskWipeControl)
            + 1.0;\n    u_xlat18 = u_xlat4 * _MaskEdgeSoftness + abs(u_xlat18);\n   
            u_xlat18 = u_xlat18 + (-_MaskWipeControl);\n    u_xlat18 = u_xlat18 /
            _MaskEdgeSoftness;\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat3.xyz
            = vec3(u_xlat18) * u_xlat3.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat0.w = u_xlat16_6 * u_xlat18;\n    SV_Target0
            = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskWipeControl;\nuniform
            \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform
            \tint _MaskInverse;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _MaskTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define
            SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nmediump float u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nvec3 u_xlat5;\nlowp
            float u_xlat10_5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump
            float u_xlat16_11;\nvoid main()\n{\n    u_xlat0 = (_MaskInverse != 0)
            ? 1.0 : 0.0;\n    u_xlat10_5 = texture2D(_MaskTex, vs_TEXCOORD0.zw).w;\n   
            u_xlat0 = (-u_xlat10_5) + u_xlat0;\n    u_xlat5.x = (-_MaskWipeControl)
            + 1.0;\n    u_xlat0 = u_xlat5.x * _MaskEdgeSoftness + abs(u_xlat0);\n   
            u_xlat0 = u_xlat0 + (-_MaskWipeControl);\n    u_xlat0 = u_xlat0 / _MaskEdgeSoftness;\n   
            u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat5.xy = (-_ClipRect.xy)
            + _ClipRect.zw;\n    u_xlat5.xy = u_xlat5.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD2.zw;\n    u_xlat5.xy = clamp(u_xlat5.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat5.y * u_xlat5.x;\n    u_xlat10_5 =
            texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_6 = u_xlat10_5
            * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_2 = vec4(u_xlat16_6) * vs_COLOR0;\n    u_xlat16_6
            = u_xlat16_1 * u_xlat16_2.w;\n    u_xlat16_11 = u_xlat16_6 * u_xlat0
            + -0.00100000005;\n    u_xlatb5 = u_xlat16_11<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat16_3.xyz = vec3(u_xlat16_6) * _MaskEdgeColor.xyz;\n    u_xlat4.w
            = u_xlat0 * u_xlat16_6;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_1)
            + (-u_xlat16_3.xyz);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat5.xyz +
            u_xlat16_3.xyz;\n    u_xlat4.xyz = vec3(u_xlat0) * u_xlat5.xyz;\n   
            SV_Target0 = u_xlat4;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - OUTLINE_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNDERLAY_INNER
        - UNDERLAY_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        keywordGroups:
        - Keywords:
          - __
          - OUTLINE_ON
        - Keywords:
          - __
          - UNDERLAY_ON
          - UNDERLAY_INNER
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: bc1ede39bf3643ee8e493720e4259791, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile Masking.shader
    ShaderDefinedKeywords:
    - OUTLINE_ON
    - UNDERLAY_INNER
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Mobile/Distance Field (Surface)
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump
            vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump
            vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute
            highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute
            highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp
            vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4
            vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool
            u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy
            + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n   
            u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n   
            gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n   
            u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n   
            u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy =
            u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n   
            u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 *
            _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y
            * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w
            * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w
            * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w
            * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n   
            u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 =
            u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n   
            u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy
            * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz
            + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0
            = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n   
            u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n   
            u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n   
            u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22)
            * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz
            + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21
            = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n   
            u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx
            * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n   
            vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x
            = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n   
            vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y
            = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n   
            vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n   
            u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n   
            vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n   
            u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x
            + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x
            = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n   
            u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz
            * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump
            vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3
            vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat
            u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec4
            u_xlat4;\nvec4 u_xlat5;\nmediump vec4 u_xlat16_6;\nfloat u_xlat7;\nmediump
            vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump float u_xlat16_15;\nvec2
            u_xlat16;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0.x) + 0.5;\n    u_xlat0.x
            = u_xlat0.x + (-vs_TEXCOORD5.x);\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y
            + 0.5;\n    u_xlat7 = _OutlineWidth * _ScaleRatioA;\n    u_xlat7 = u_xlat7
            * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;\n   
            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_8.x = (-u_xlat7)
            * 0.5 + u_xlat0.x;\n    u_xlat16_15 = min(u_xlat7, 1.0);\n    u_xlat16_15
            = sqrt(u_xlat16_15);\n    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;\n   
            u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n   
            u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat10_0.xyz
            * _OutlineColor.xyz;\n    u_xlat2 = vs_COLOR0.w * _OutlineColor.w;\n   
            u_xlat9 = u_xlat10_0.w * u_xlat2;\n    u_xlat16.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex,
            u_xlat16.xy);\n    u_xlat4 = vs_COLOR0 * _FaceColor;\n    u_xlat5 = u_xlat10_3
            * u_xlat4;\n    u_xlat16_6.xyz = u_xlat5.www * u_xlat5.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xyz * vec3(u_xlat9) + (-u_xlat16_6.xyz);\n    u_xlat16_6.w
            = u_xlat2 * u_xlat10_0.w + (-u_xlat5.w);\n    u_xlat16_0 = u_xlat16_1.xxxx
            * u_xlat16_6;\n    u_xlat16_2.w = u_xlat4.w * u_xlat10_3.w + u_xlat16_0.w;\n   
            u_xlat16_2.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat16_0.xyz;\n    u_xlat3.x
            = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat3.x * vs_TEXCOORD5.y;\n   
            u_xlat16_1.x = u_xlat3.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_8.x =
            u_xlat10 * 0.5 + u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;\n   
            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (-u_xlat16_1.x)
            + 1.0;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;\n    u_xlat3.x
            = max(u_xlat16_0.w, 9.99999975e-05);\n    u_xlat3.xyz = u_xlat16_0.xyz
            / u_xlat3.xxx;\n    SV_Target0.w = u_xlat16_0.w;\n    u_xlat4.x = vs_TEXCOORD2.z;\n   
            u_xlat4.y = vs_TEXCOORD3.z;\n    u_xlat4.z = vs_TEXCOORD4.z;\n    u_xlat24
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x =
            dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.yzw = u_xlat16_6.xyz
            + vs_TEXCOORD7.xyz;\n    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0,
            0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_1.yzw);\n    u_xlat4.xyz
            = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz
            = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_8.xyz
            = u_xlat3.xyz * u_xlat4.xyz;\n    u_xlat16_6.xyz = u_xlat3.xyz * _LightColor0.xyz;\n   
            SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump
            vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump
            vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute
            highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute
            highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp
            vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4
            vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool
            u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy
            + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n   
            u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n   
            gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n   
            u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n   
            u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy =
            u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n   
            u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 *
            _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y
            * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w
            * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w
            * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w
            * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n   
            u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 =
            u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n   
            u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy
            * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz
            + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0
            = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n   
            u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n   
            u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n   
            u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22)
            * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz
            + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21
            = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n   
            u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx
            * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n   
            vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x
            = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n   
            vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y
            = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n   
            vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n   
            u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n   
            vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n   
            u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x
            + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x
            = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n   
            u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz
            * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump
            vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3
            vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat
            u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec4
            u_xlat4;\nvec4 u_xlat5;\nmediump vec4 u_xlat16_6;\nfloat u_xlat7;\nmediump
            vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump float u_xlat16_15;\nvec2
            u_xlat16;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0.x) + 0.5;\n    u_xlat0.x
            = u_xlat0.x + (-vs_TEXCOORD5.x);\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y
            + 0.5;\n    u_xlat7 = _OutlineWidth * _ScaleRatioA;\n    u_xlat7 = u_xlat7
            * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;\n   
            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_8.x = (-u_xlat7)
            * 0.5 + u_xlat0.x;\n    u_xlat16_15 = min(u_xlat7, 1.0);\n    u_xlat16_15
            = sqrt(u_xlat16_15);\n    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;\n   
            u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n   
            u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat10_0.xyz
            * _OutlineColor.xyz;\n    u_xlat2 = vs_COLOR0.w * _OutlineColor.w;\n   
            u_xlat9 = u_xlat10_0.w * u_xlat2;\n    u_xlat16.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex,
            u_xlat16.xy);\n    u_xlat4 = vs_COLOR0 * _FaceColor;\n    u_xlat5 = u_xlat10_3
            * u_xlat4;\n    u_xlat16_6.xyz = u_xlat5.www * u_xlat5.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xyz * vec3(u_xlat9) + (-u_xlat16_6.xyz);\n    u_xlat16_6.w
            = u_xlat2 * u_xlat10_0.w + (-u_xlat5.w);\n    u_xlat16_0 = u_xlat16_1.xxxx
            * u_xlat16_6;\n    u_xlat16_2.w = u_xlat4.w * u_xlat10_3.w + u_xlat16_0.w;\n   
            u_xlat16_2.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat16_0.xyz;\n    u_xlat3.x
            = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat3.x * vs_TEXCOORD5.y;\n   
            u_xlat16_1.x = u_xlat3.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_8.x =
            u_xlat10 * 0.5 + u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;\n   
            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (-u_xlat16_1.x)
            + 1.0;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;\n    u_xlat3.x
            = max(u_xlat16_0.w, 9.99999975e-05);\n    u_xlat3.xyz = u_xlat16_0.xyz
            / u_xlat3.xxx;\n    SV_Target0.w = u_xlat16_0.w;\n    u_xlat4.x = vs_TEXCOORD2.z;\n   
            u_xlat4.y = vs_TEXCOORD3.z;\n    u_xlat4.z = vs_TEXCOORD4.z;\n    u_xlat24
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x =
            dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.yzw = u_xlat16_6.xyz
            + vs_TEXCOORD7.xyz;\n    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0,
            0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_1.yzw);\n    u_xlat4.xyz
            = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz
            = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_8.xyz
            = u_xlat3.xyz * u_xlat4.xyz;\n    u_xlat16_6.xyz = u_xlat3.xyz * _LightColor0.xyz;\n   
            SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4
            unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump
            vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform
            \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform
            \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute
            mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump
            vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump
            vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat
            u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n   
            u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy =
            u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n   
            u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 *
            _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y
            * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w
            * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w
            * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w
            * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n   
            u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 =
            u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x
            = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n   
            u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy
            * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz
            + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n   
            u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz,
            u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0
            = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n   
            u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n   
            u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n   
            u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22)
            * u_xlat21 + u_xlat2.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) *
            u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz
            = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w
            * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n   
            vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x
            = u_xlat2.z;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n   
            vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y
            = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD3.w = u_xlat1.y;\n   
            vs_TEXCOORD4.z = u_xlat3.w;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_COLOR0
            = in_COLOR0;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n   
            u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n   
            u_xlat0 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat2 = u_xlat3.yyyy
            * u_xlat0;\n    u_xlat0 = u_xlat0 * u_xlat0;\n    u_xlat4 = (-u_xlat1.xxxx)
            + unity_4LightPosX0;\n    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n   
            u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;\n    u_xlat0 = u_xlat4 *
            u_xlat4 + u_xlat0;\n    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;\n    u_xlat1
            = u_xlat1 * u_xlat3.wwzw + u_xlat2;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07,
            9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat2 = inversesqrt(u_xlat0);\n   
            u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat1 = u_xlat1
            * u_xlat2;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n   
            u_xlat0 = u_xlat0 * u_xlat1;\n    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n   
            u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n   
            u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n   
            u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz
            * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_5.x = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5.x = u_xlat3.x *
            u_xlat3.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat3.ywzx * u_xlat3;\n   
            u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg,
            u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD7.xyz
            = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump
            vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D
            _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4
            vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3
            vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat
            u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec4
            u_xlat4;\nvec4 u_xlat5;\nmediump vec4 u_xlat16_6;\nfloat u_xlat7;\nmediump
            vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump float u_xlat16_15;\nvec2
            u_xlat16;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0.x) + 0.5;\n    u_xlat0.x
            = u_xlat0.x + (-vs_TEXCOORD5.x);\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y
            + 0.5;\n    u_xlat7 = _OutlineWidth * _ScaleRatioA;\n    u_xlat7 = u_xlat7
            * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;\n   
            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_8.x = (-u_xlat7)
            * 0.5 + u_xlat0.x;\n    u_xlat16_15 = min(u_xlat7, 1.0);\n    u_xlat16_15
            = sqrt(u_xlat16_15);\n    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;\n   
            u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n   
            u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat10_0.xyz
            * _OutlineColor.xyz;\n    u_xlat2 = vs_COLOR0.w * _OutlineColor.w;\n   
            u_xlat9 = u_xlat10_0.w * u_xlat2;\n    u_xlat16.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex,
            u_xlat16.xy);\n    u_xlat4 = vs_COLOR0 * _FaceColor;\n    u_xlat5 = u_xlat10_3
            * u_xlat4;\n    u_xlat16_6.xyz = u_xlat5.www * u_xlat5.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xyz * vec3(u_xlat9) + (-u_xlat16_6.xyz);\n    u_xlat16_6.w
            = u_xlat2 * u_xlat10_0.w + (-u_xlat5.w);\n    u_xlat16_0 = u_xlat16_1.xxxx
            * u_xlat16_6;\n    u_xlat16_2.w = u_xlat4.w * u_xlat10_3.w + u_xlat16_0.w;\n   
            u_xlat16_2.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat16_0.xyz;\n    u_xlat3.x
            = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat3.x * vs_TEXCOORD5.y;\n   
            u_xlat16_1.x = u_xlat3.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_8.x =
            u_xlat10 * 0.5 + u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;\n   
            u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (-u_xlat16_1.x)
            + 1.0;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;\n    u_xlat3.x
            = max(u_xlat16_0.w, 9.99999975e-05);\n    u_xlat3.xyz = u_xlat16_0.xyz
            / u_xlat3.xxx;\n    SV_Target0.w = u_xlat16_0.w;\n    u_xlat4.x = vs_TEXCOORD2.z;\n   
            u_xlat4.y = vs_TEXCOORD3.z;\n    u_xlat4.z = vs_TEXCOORD4.z;\n    u_xlat24
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x =
            dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.yzw = u_xlat16_6.xyz
            + vs_TEXCOORD7.xyz;\n    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0,
            0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_1.yzw);\n    u_xlat4.xyz
            = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz
            = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_8.xyz
            = u_xlat3.xyz * u_xlat4.xyz;\n    u_xlat16_6.xyz = u_xlat3.xyz * _LightColor0.xyz;\n   
            SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - VERTEXLIGHT_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - DIRECTIONAL
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - GLOW_ON
        - INSTANCING_ON
        - LIGHTPROBE_SH
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - VERTEXLIGHT_ON
        - __
        keywordGroups:
        - Keywords:
          - __
          - GLOW_ON
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - DIRECTIONAL
        - Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - LIGHTPROBE_SH
        KeywordsMinimalCardinality: 3
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: FORWARDBASE
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 227
        PlatformMask: -1
      - ShaderName: TextMeshPro/Mobile/Distance Field (Surface)
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 unity_LightShadowBias;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _ScaleRatioA;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD3;\nvarying highp
            float vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat4;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat1.x = unity_LightShadowBias.x /
            u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat4
            = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat4);\n   
            gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat4) + u_xlat1.x;\n   
            gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3.xy
            = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    u_xlat0.x
            = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat0.x = (-_FaceDilate)
            * _ScaleRatioA + u_xlat0.x;\n    vs_TEXCOORD2 = u_xlat0.x * 0.5;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD1;\nvarying
            highp float vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nlowp
            float u_xlat10_0;\nbool u_xlatb0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD1.xy).w;\n    u_xlat0 = u_xlat10_0 + (-vs_TEXCOORD2);\n   
            u_xlatb0 = u_xlat0<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_DEPTH
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
          - Key: SHADOWSUPPORT
            Value: true
        definedKeywords:
        - SHADOWS_CUBE
        - SHADOWS_DEPTH
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups:
        - Keywords:
          - SHADOWS_DEPTH
        - Keywords:
          - SHADOWS_CUBE
        KeywordsMinimalCardinality: 2
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        - Key: SHADOWSUPPORT
          Value: true
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: 85187c2149c549c5b33f0cdb02836b17, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF-Surface-Mobile.shader
    ShaderDefinedKeywords:
    - DIRECTIONAL
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - GLOW_ON
    - LIGHTPROBE_SH
    - VERTEXLIGHT_ON
    - SHADOWS_DEPTH
    - INSTANCING_ON
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    - SHADOWS_CUBE
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Mobile/Distance Field Overlay
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1
            = clamp(u_xlat16_1, 0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Overlay
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1
            = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 =
            clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = vs_COLOR0.w * u_xlat16_1
            + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * vs_COLOR0;\n   
            SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Overlay
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 =
            texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat10_0
            * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3,
            0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0
            = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Overlay
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n   
            u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n   
            u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y
            * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_4 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_4
            = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4) * vs_COLOR0;\n   
            u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0
            = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2
            = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Overlay
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - OUTLINE_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNDERLAY_INNER
        - UNDERLAY_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        keywordGroups:
        - Keywords:
          - __
          - OUTLINE_ON
        - Keywords:
          - __
          - UNDERLAY_ON
          - UNDERLAY_INNER
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Overlay
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Overlay
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: a02a7d8c237544f1962732b55a9aebf1, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile Overlay.shader
    ShaderDefinedKeywords:
    - OUTLINE_ON
    - UNDERLAY_INNER
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Mobile/Distance Field SSD
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform
            \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat
            _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp
            vec4 vs_COLOR0;\nvarying highp vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n   
            vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n   
            u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx
            * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy + (-u_xlat1.xy);\n   
            u_xlat6.xy = (-u_xlat1.xy) + u_xlat1.zw;\n    vs_TEXCOORD0.zw = u_xlat0.xy
            / u_xlat6.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 =
            0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x)
            * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3
            = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y
            = u_xlat0.x / _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n   
            vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2.xy
            = vec2(0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension
            GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nuniform
            lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec2 u_xlat0;\nfloat u_xlat1;\nlowp float u_xlat10_1;\nvec2
            u_xlat2;\nvoid main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n   
            u_xlat2.xy = dFdy(vs_TEXCOORD0.yx);\n    u_xlat1 = u_xlat2.y * u_xlat0.y;\n   
            u_xlat0.x = u_xlat0.x * u_xlat2.x + (-u_xlat1);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n   
            u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat1 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat1 = u_xlat1 * u_xlat0.x + 1.0;\n    u_xlat0.x
            = u_xlat0.x / u_xlat1;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat1 = u_xlat10_1 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat1 *
            u_xlat0.x + 0.5;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    SV_Target0
            = u_xlat0.xxxx * vs_COLOR0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform
            \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat
            _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp
            vec4 vs_COLOR0;\nvarying highp vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n   
            vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n   
            u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx
            * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy + (-u_xlat1.xy);\n   
            u_xlat6.xy = (-u_xlat1.xy) + u_xlat1.zw;\n    vs_TEXCOORD0.zw = u_xlat0.xy
            / u_xlat6.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 =
            0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x)
            * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3
            = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y
            = u_xlat0.x / _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n   
            vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2.xy
            = vec2(0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension
            GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nuniform
            lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp
            float u_xlat10_2;\nvec2 u_xlat4;\nvoid main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n   
            u_xlat4.xy = dFdy(vs_TEXCOORD0.yx);\n    u_xlat2 = u_xlat4.y * u_xlat0.y;\n   
            u_xlat0.x = u_xlat0.x * u_xlat4.x + (-u_xlat2);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n   
            u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat2 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat2 = u_xlat2 * u_xlat0.x + 1.0;\n    u_xlat0.x
            = u_xlat0.x / u_xlat2;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat2 = u_xlat10_2 + (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat2 *
            u_xlat0.x + 0.5;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat2
            = vs_COLOR0.w * u_xlat0.x + -0.00100000005;\n    u_xlat1 = u_xlat0.xxxx
            * vs_COLOR0;\n    SV_Target0 = u_xlat1;\n    u_xlatb0 = u_xlat2<0.0;\n   
            if(u_xlatb0){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform
            \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat
            _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp
            vec4 vs_COLOR0;\nvarying highp vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n   
            vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n   
            u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx
            * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat6.xy = u_xlat0.xy + (-u_xlat1.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy
            = (-u_xlat1.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat1.xy) + u_xlat1.zw;\n   
            vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x)
            * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3
            = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y
            = u_xlat0.x / _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n   
            vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension
            GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2
            vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nvec4
            u_xlat1;\nvec2 u_xlat2;\nvec2 u_xlat4;\nlowp float u_xlat10_4;\nvoid
            main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n    u_xlat4.xy =
            dFdy(vs_TEXCOORD0.yx);\n    u_xlat2.x = u_xlat4.y * u_xlat0.y;\n    u_xlat0.x
            = u_xlat0.x * u_xlat4.x + (-u_xlat2.x);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n   
            u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat2.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * u_xlat0.x + 1.0;\n    u_xlat0.x
            = u_xlat0.x / u_xlat2.x;\n    u_xlat2.x = float(1.0) / u_xlat0.x;\n   
            u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25)
            + u_xlat2.xx;\n    u_xlat2.xy = vec2(0.25, 0.25) / u_xlat2.xy;\n    u_xlat1.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat2.xy = u_xlat2.xy * u_xlat1.xy;\n    u_xlat2.xy = clamp(u_xlat2.xy,
            0.0, 1.0);\n    u_xlat2.x = u_xlat2.y * u_xlat2.x;\n    u_xlat10_4 =
            texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat4.x = u_xlat10_4 +
            (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 0.5;\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = u_xlat0.xxxx *
            vs_COLOR0;\n    SV_Target0 = u_xlat2.xxxx * u_xlat1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tmediump vec4 _OutlineColor;\nuniform
            \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat
            _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _TextureWidth;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp
            vec4 vs_COLOR0;\nvarying highp vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat3;\nvec2 u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = in_COLOR0 * _FaceColor;\n   
            vs_COLOR0.xyz = u_xlat1.www * u_xlat1.xyz;\n    vs_COLOR0.w = u_xlat1.w;\n   
            u_xlat6.x = in_COLOR0.w * _OutlineColor.w;\n    vs_COLOR1.xyz = u_xlat6.xxx
            * _OutlineColor.xyz;\n    vs_COLOR1.w = u_xlat6.x;\n    u_xlat1 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat6.xy = u_xlat0.xy + (-u_xlat1.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy
            = (-u_xlat1.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat1.xy) + u_xlat1.zw;\n   
            vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat3 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat3 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    vs_TEXCOORD1.x = (-u_xlat0.x)
            * 0.5 + 0.5;\n    u_xlat0.x = _GradientScale * 1.33329999;\n    u_xlat3
            = _Sharpness + 1.0;\n    u_xlat0.x = u_xlat3 * u_xlat0.x;\n    vs_TEXCOORD1.y
            = u_xlat0.x / _TextureWidth;\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n   
            vs_TEXCOORD1.z = u_xlat0.x * 0.5;\n    vs_TEXCOORD1.w = 0.0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n#ifdef GL_OES_standard_derivatives\n#extension
            GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2
            vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec2 u_xlat2;\nvec2 u_xlat4;\nlowp float u_xlat10_4;\nvoid
            main()\n{\n    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);\n    u_xlat4.xy =
            dFdy(vs_TEXCOORD0.yx);\n    u_xlat2.x = u_xlat4.y * u_xlat0.y;\n    u_xlat0.x
            = u_xlat0.x * u_xlat4.x + (-u_xlat2.x);\n    u_xlat0.x = inversesqrt(abs(u_xlat0.x));\n   
            u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat2.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * u_xlat0.x + 1.0;\n    u_xlat0.x
            = u_xlat0.x / u_xlat2.x;\n    u_xlat2.x = float(1.0) / u_xlat0.x;\n   
            u_xlat2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25)
            + u_xlat2.xx;\n    u_xlat2.xy = vec2(0.25, 0.25) / u_xlat2.xy;\n    u_xlat1.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat2.xy = u_xlat2.xy * u_xlat1.xy;\n    u_xlat2.xy = clamp(u_xlat2.xy,
            0.0, 1.0);\n    u_xlat2.x = u_xlat2.y * u_xlat2.x;\n    u_xlat10_4 =
            texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat4.x = u_xlat10_4 +
            (-vs_TEXCOORD1.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 0.5;\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = u_xlat0.xxxx *
            vs_COLOR0;\n    u_xlat0.x = u_xlat1.w * u_xlat2.x + -0.00100000005;\n   
            u_xlat1 = u_xlat2.xxxx * u_xlat1;\n    SV_Target0 = u_xlat1;\n    u_xlatb0
            = u_xlat0.x<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - OUTLINE_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNDERLAY_INNER
        - UNDERLAY_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        keywordGroups:
        - Keywords:
          - __
          - OUTLINE_ON
        - Keywords:
          - __
          - UNDERLAY_ON
          - UNDERLAY_INNER
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: c8d12adcee749c344b8117cf7c7eb912, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile SSD.shader
    ShaderDefinedKeywords:
    - OUTLINE_ON
    - UNDERLAY_INNER
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: TextMeshPro/Sprite
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nbool
            u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n   
            u_xlat16_1 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 =
            u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_1<0.0;\n   
            if(u_xlatb0){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4
            u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx,
            _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw,
            vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n   
            u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z
            ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n   
            u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat1.w
            = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4
            u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy
            = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw
            = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x
            = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0)
            : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w
            = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n   
            u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x
            + -0.00100000005;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0
            = u_xlat1;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        keywordGroups:
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_Sprite.shader
    ShaderDefinedKeywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: UI/Default
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4
            u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat unity_roundEven(float x) { float
            y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2
            unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x);
            a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4
            unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid
            main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x
            = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0
            = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n   
            SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4
            u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x
            = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n   
            u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3
            = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n   
            u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n   
            SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump float u_xlat16_4;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 =
            vs_COLOR0.w * 255.0;\n    u_xlat16_4 = unity_roundEven(u_xlat16_4);\n   
            u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat10_2 + _TextureSampleAdd;\n   
            u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n   
            u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz
            * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp
            vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump
            float u_xlat16_5;\nfloat unity_roundEven(float x) { float y = floor(x
            + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2
            a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a;
            }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x
            = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n   
            u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n   
            u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n   
            u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y
            * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n   
            u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz
            * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n   
            if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - _
        keywordGroups:
        - Keywords:
          - _
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - _
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    fallbackShader: {fileID: 0}
    CompilationErrors: []
  _modifiedShaders: []
  invalidShaders: 0
  _sceneLightData:
    PointLightCount: 0
    SpotLightCount: 0
    DirectionalLightCount: 0
    LightmapOn: 0
    DirlightmapCombined: 0
    DirectionalCookieExists: 0
    PointCookieExists: 0
    SpotCookieExists: 0
    AddiitonalLightsKeywordRequired: 0
