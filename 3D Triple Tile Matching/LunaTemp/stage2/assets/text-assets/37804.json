{"id":37804,"path":"Assets/Plugins/Demigiant/DOTween/DOTween.XML","assetBundleId":-1,"data":["DOTween",null,"<?xml version=\"1.0\"?>\r\n<doc>\r\n    <assembly>\r\n        <name>DOTween</name>\r\n    </assembly>\r\n    <members>\r\n        <member name=\"T:DG.Tweening.AutoPlay\">\r\n            <summary>\r\n            Types of autoPlay behaviours\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.AutoPlay.None\">\r\n            <summary>No tween is automatically played</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.AutoPlay.AutoPlaySequences\">\r\n            <summary>Only Sequences are automatically played</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.AutoPlay.AutoPlayTweeners\">\r\n            <summary>Only Tweeners are automatically played</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.AutoPlay.All\">\r\n            <summary>All tweens are automatically played</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.AxisConstraint\">\r\n            <summary>\r\n            What axis to constrain in case of Vector tweens\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.ABSSequentiable.onStart\">\r\n            <summary>Called the first time the tween is set in a playing state, after any eventual delay</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.DOGetter`1\">\r\n            <summary>\r\n            Used in place of <c>System.Func</c>, which is not available in mscorlib.\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.DOSetter`1\">\r\n            <summary>\r\n            Used in place of <c>System.Action</c>.\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.Debugger\">\r\n            <summary>\r\n            Public so it can be used by lose scripts related to DOTween (like DOTweenAnimation)\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.DOTweenComponent\">\r\n            <summary>\r\n            Used to separate DOTween class from the MonoBehaviour instance (in order to use static constructors on DOTween).\r\n            Contains all instance-based methods\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.DOTweenComponent.inspectorUpdater\">\r\n            <summary>Used internally inside Unity Editor, as a trick to update DOTween's inspector at every frame</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.DOTweenComponent.SetCapacity(System.Int32,System.Int32)\">\r\n            <summary>\r\n            Directly sets the current max capacity of Tweeners and Sequences\r\n            (meaning how many Tweeners and Sequences can be running at the same time),\r\n            so that DOTween doesn't need to automatically increase them in case the max is reached\r\n            (which might lead to hiccups when that happens).\r\n            Sequences capacity must be less or equal to Tweeners capacity\r\n            (if you pass a low Tweener capacity it will be automatically increased to match the Sequence's).\r\n            Beware: use this method only when there are no tweens running.\r\n            </summary>\r\n            <param name=\"tweenersCapacity\">Max Tweeners capacity.\r\n            Default: 200</param>\r\n            <param name=\"sequencesCapacity\">Max Sequences capacity.\r\n            Default: 50</param>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.Easing.Bounce\">\r\n            <summary>\r\n            This class contains a C# port of the easing equations created by Robert Penner (http://robertpenner.com/easing).\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.Easing.Bounce.EaseIn(System.Single,System.Single,System.Single,System.Single)\">\r\n            <summary>\r\n            Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in: accelerating from zero velocity.\r\n            </summary>\r\n            <param name=\"time\">\r\n            Current time (in frames or seconds).\r\n            </param>\r\n            <param name=\"duration\">\r\n            Expected easing duration (in frames or seconds).\r\n            </param>\r\n            <param name=\"unusedOvershootOrAmplitude\">Unused: here to keep same delegate for all ease types.</param>\r\n            <param name=\"unusedPeriod\">Unused: here to keep same delegate for all ease types.</param>\r\n            <returns>\r\n            The eased value.\r\n            </returns>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.Easing.Bounce.EaseOut(System.Single,System.Single,System.Single,System.Single)\">\r\n            <summary>\r\n            Easing equation function for a bounce (exponentially decaying parabolic bounce) easing out: decelerating from zero velocity.\r\n            </summary>\r\n            <param name=\"time\">\r\n            Current time (in frames or seconds).\r\n            </param>\r\n            <param name=\"duration\">\r\n            Expected easing duration (in frames or seconds).\r\n            </param>\r\n            <param name=\"unusedOvershootOrAmplitude\">Unused: here to keep same delegate for all ease types.</param>\r\n            <param name=\"unusedPeriod\">Unused: here to keep same delegate for all ease types.</param>\r\n            <returns>\r\n            The eased value.\r\n            </returns>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.Easing.Bounce.EaseInOut(System.Single,System.Single,System.Single,System.Single)\">\r\n            <summary>\r\n            Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in/out: acceleration until halfway, then deceleration.\r\n            </summary>\r\n            <param name=\"time\">\r\n            Current time (in frames or seconds).\r\n            </param>\r\n            <param name=\"duration\">\r\n            Expected easing duration (in frames or seconds).\r\n            </param>\r\n            <param name=\"unusedOvershootOrAmplitude\">Unused: here to keep same delegate for all ease types.</param>\r\n            <param name=\"unusedPeriod\">Unused: here to keep same delegate for all ease types.</param>\r\n            <returns>\r\n            The eased value.\r\n            </returns>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.Easing.EaseManager.Evaluate(DG.Tweening.Tween,System.Single,System.Single,System.Single,System.Single)\">\r\n            <summary>\r\n            Returns a value between 0 and 1 (inclusive) based on the elapsed time and ease selected\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.Easing.EaseManager.Evaluate(DG.Tweening.Ease,DG.Tweening.EaseFunction,System.Single,System.Single,System.Single,System.Single)\">\r\n            <summary>\r\n            Returns a value between 0 and 1 (inclusive) based on the elapsed time and ease selected\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.Easing.EaseCurve\">\r\n            <summary>\r\n            Used to interpret AnimationCurves as eases.\r\n            Public so it can be used by external ease factories\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.Enums.NestedTweenFailureBehaviour\">\r\n            <summary>\r\n            Behaviour in case a tween nested inside a Sequence fails and is captured by safe mode\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.Enums.NestedTweenFailureBehaviour.TryToPreserveSequence\">\r\n            <summary>If the Sequence contains other elements, kill the failed tween but preserve the rest</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.Enums.NestedTweenFailureBehaviour.KillWholeSequence\">\r\n            <summary>Kill the whole Sequence</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.Enums.SafeModeLogBehaviour\">\r\n            <summary>\r\n            Log types thrown by errors captured and prevented by safe mode\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.Enums.SafeModeLogBehaviour.None\">\r\n            <summary>No logs. NOT RECOMMENDED</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.Enums.SafeModeLogBehaviour.Normal\">\r\n            <summary>Throw a normal log</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.Enums.SafeModeLogBehaviour.Warning\">\r\n            <summary>Throw a warning log (default)</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.Enums.SafeModeLogBehaviour.Error\">\r\n            <summary>Throw an error log</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.Enums.UpdateNotice\">\r\n            <summary>\r\n            Additional notices passed to plugins when updating.\r\n            Public so it can be used by custom plugins. Internally, only PathPlugin uses it\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.Enums.UpdateNotice.None\">\r\n            <summary>\r\n            None\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.Enums.UpdateNotice.RewindStep\">\r\n            <summary>\r\n            Lets the plugin know that we restarted or rewinded\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.Enums.RewindCallbackMode\">\r\n            <summary>\r\n            OnRewind callback behaviour (can only be set via DOTween's Utility Panel)\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.Enums.RewindCallbackMode.FireIfPositionChanged\">\r\n            <summary>\r\n            When calling Rewind or PlayBackwards/SmoothRewind, OnRewind callbacks will be fired only if the tween isn't already rewinded\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.Enums.RewindCallbackMode.FireAlwaysWithRewind\">\r\n            <summary>\r\n            When calling Rewind, OnRewind callbacks will always be fired, even if the tween is already rewinded.\r\n            When calling PlayBackwards/SmoothRewind instead, OnRewind callbacks will be fired only if the tween isn't already rewinded\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Core.Enums.RewindCallbackMode.FireAlways\">\r\n            <summary>\r\n            When calling Rewind or PlayBackwards/SmoothRewind, OnRewind callbacks will always be fired, even if the tween is already rewinded\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.Extensions\">\r\n            <summary>\r\n            Public only so custom shortcuts can access some of these methods\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.Extensions.SetSpecialStartupMode``1(``0,DG.Tweening.Core.Enums.SpecialStartupMode)\">\r\n            <summary>\r\n            INTERNAL: used by DO shortcuts and Modules to set special startup mode\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.Extensions.Blendable``3(DG.Tweening.Core.TweenerCore{``0,``1,``2})\">\r\n            <summary>\r\n            INTERNAL: used by DO shortcuts and Modules to set the tween as blendable\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.Extensions.NoFrom``3(DG.Tweening.Core.TweenerCore{``0,``1,``2})\">\r\n            <summary>\r\n            INTERNAL: used by DO shortcuts and Modules to prevent a tween from using a From setup even if passed\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Core.DOTweenExternalCommand\">\r\n            <summary>\r\n            Used to dispatch commands that need to be captured externally, usually by Modules\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.DOTweenUtils.Vector3FromAngle(System.Single,System.Single)\">\r\n            <summary>\r\n            Returns a Vector3 with z = 0\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.DOTweenUtils.Angle2D(UnityEngine.Vector3,UnityEngine.Vector3)\">\r\n            <summary>\r\n            Returns the 2D angle between two vectors\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.DOTweenUtils.GetPointOnCircle(UnityEngine.Vector2,System.Single,System.Single)\">\r\n            <summary>\r\n            Returns a point on a circle with the given center and radius,\r\n            using Unity's circle coordinates (0° points up and increases clockwise)\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.DOTweenUtils.Vector3AreApproximatelyEqual(UnityEngine.Vector3,UnityEngine.Vector3)\">\r\n            <summary>\r\n            Uses approximate equality on each axis instead of Unity's Vector3 equality,\r\n            because the latter fails (in some cases) when assigning a Vector3 to a transform.position and then checking it.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.DOTweenUtils.GetLooseScriptType(System.String)\">\r\n            <summary>\r\n            Looks for the type within all possible project assembly names\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.TweenerCore`3.ChangeStartValue(`1,System.Single)\">\r\n            <summary>NO-GC METHOD: changes the start value of a tween and rewinds it (without pausing it).\r\n            Has no effect with tweens that are inside Sequences</summary>\r\n            <param name=\"newStartValue\">The new start value</param>\r\n            <param name=\"newDuration\">If bigger than 0 applies it as the new tween duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.TweenerCore`3.ChangeEndValue(`1,System.Boolean)\">\r\n            <summary>NO-GC METHOD: changes the end value of a tween and rewinds it (without pausing it).\r\n            Has no effect with tweens that are inside Sequences</summary>\r\n            <param name=\"newEndValue\">The new end value</param>\r\n            <param name=\"snapStartValue\">If TRUE the start value will become the current target's value, otherwise it will stay the same</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.TweenerCore`3.ChangeEndValue(`1,System.Single,System.Boolean)\">\r\n            <summary>NO-GC METHOD: changes the end value of a tween and rewinds it (without pausing it).\r\n            Has no effect with tweens that are inside Sequences</summary>\r\n            <param name=\"newEndValue\">The new end value</param>\r\n            <param name=\"newDuration\">If bigger than 0 applies it as the new tween duration</param>\r\n            <param name=\"snapStartValue\">If TRUE the start value will become the current target's value, otherwise it will stay the same</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Core.TweenerCore`3.ChangeValues(`1,`1,System.Single)\">\r\n            <summary>NO-GC METHOD: changes the start and end value of a tween and rewinds it (without pausing it).\r\n            Has no effect with tweens that are inside Sequences</summary>\r\n            <param name=\"newStartValue\">The new start value</param>\r\n            <param name=\"newEndValue\">The new end value</param>\r\n            <param name=\"newDuration\">If bigger than 0 applies it as the new tween duration</param>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Color2\">\r\n            <summary>\r\n            Struct that stores two colors (used for LineRenderer tweens)\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.TweenCallback\">\r\n            <summary>\r\n            Used for tween callbacks\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.TweenCallback`1\">\r\n            <summary>\r\n            Used for tween callbacks\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.EaseFunction\">\r\n            <summary>\r\n            Used for custom and animationCurve-based ease functions. Must return a value between 0 and 1.\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.CustomPlugins.PureQuaternionPlugin\">\r\n            <summary>\r\n            Straight Quaternion plugin. Instead of using Vector3 values accepts Quaternion values directly.\r\n            <para>Beware: doesn't work with LoopType.Incremental (neither directly nor if inside a LoopType.Incremental Sequence).</para>\r\n            <para>To use it, call DOTween.To with the plugin parameter overload, passing it <c>PureQuaternionPlugin.Plug()</c> as first parameter\r\n            (do not use any of the other public PureQuaternionPlugin methods):</para>\r\n            <code>DOTween.To(PureQuaternionPlugin.Plug(), ()=> myQuaternionProperty, x=> myQuaternionProperty = x, myQuaternionEndValue, duration);</code>\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.Plug\">\r\n            <summary>\r\n            Plug this plugin inside a DOTween.To call.\r\n            <para>Example:</para>\r\n            <code>DOTween.To(PureQuaternionPlugin.Plug(), ()=> myQuaternionProperty, x=> myQuaternionProperty = x, myQuaternionEndValue, duration);</code>\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.Reset(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions})\">\r\n            <summary>INTERNAL: do not use</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.SetFrom(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions},System.Boolean)\">\r\n            <summary>INTERNAL: do not use</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.SetFrom(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions},UnityEngine.Quaternion,System.Boolean,System.Boolean)\">\r\n            <summary>INTERNAL: do not use</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.ConvertToStartValue(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions},UnityEngine.Quaternion)\">\r\n            <summary>INTERNAL: do not use</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.SetRelativeEndValue(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions})\">\r\n            <summary>INTERNAL: do not use</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.SetChangeValue(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions})\">\r\n            <summary>INTERNAL: do not use</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.GetSpeedBasedDuration(DG.Tweening.Plugins.Options.NoOptions,System.Single,UnityEngine.Quaternion)\">\r\n            <summary>INTERNAL: do not use</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.EvaluateAndApply(DG.Tweening.Plugins.Options.NoOptions,DG.Tweening.Tween,System.Boolean,DG.Tweening.Core.DOGetter{UnityEngine.Quaternion},DG.Tweening.Core.DOSetter{UnityEngine.Quaternion},System.Single,UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single,System.Boolean,System.Int32,DG.Tweening.Core.Enums.UpdateNotice)\">\r\n            <summary>INTERNAL: do not use</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.DOCurve\">\r\n            <summary>\r\n            Extra non-tweening-related curve methods\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.DOCurve.CubicBezier\">\r\n            <summary>\r\n            Cubic bezier curve methods\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOCurve.CubicBezier.GetPointOnSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)\">\r\n            <summary>\r\n            Calculates a point along the given Cubic Bezier segment-curve.<para/>\r\n            </summary>\r\n            <param name=\"startPoint\">Segment start point</param>\r\n            <param name=\"startControlPoint\">Start point's control point/handle</param>\r\n            <param name=\"endPoint\">Segment end point</param>\r\n            <param name=\"endControlPoint\">End point's control point/handle</param>\r\n            <param name=\"factor\">0-1 percentage along which to retrieve point</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOCurve.CubicBezier.GetSegmentPointCloud(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)\">\r\n            <summary>\r\n            Returns an array containing a series of points along the given Cubic Bezier segment-curve.<para/>\r\n            </summary>\r\n            <param name=\"startPoint\">Start point</param>\r\n            <param name=\"startControlPoint\">Start point's control point/handle</param>\r\n            <param name=\"endPoint\">End point</param>\r\n            <param name=\"endControlPoint\">End point's control point/handle</param>\r\n            <param name=\"resolution\">Cloud resolution (min: 2)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOCurve.CubicBezier.GetSegmentPointCloud(System.Collections.Generic.List{UnityEngine.Vector3},UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)\">\r\n            <summary>\r\n            Calculates a series of points along the given Cubic Bezier segment-curve and adds them to the given list.<para/>\r\n            </summary>\r\n            <param name=\"startPoint\">Start point</param>\r\n            <param name=\"startControlPoint\">Start point's control point/handle</param>\r\n            <param name=\"endPoint\">End point</param>\r\n            <param name=\"endControlPoint\">End point's control point/handle</param>\r\n            <param name=\"resolution\">Cloud resolution (min: 2)</param>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.DOTween\">\r\n            <summary>\r\n            Main DOTween class. Contains static methods to create and control tweens in a generic way\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.Version\">\r\n            <summary>DOTween's version</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.useSafeMode\">\r\n            <summary>If TRUE (default) makes tweens slightly slower but safer, automatically taking care of a series of things\r\n            (like targets becoming null while a tween is playing).\r\n            <para>Default: TRUE</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.safeModeLogBehaviour\">\r\n            <summary>Log type when safe mode reports capturing an error and preventing it</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.nestedTweenFailureBehaviour\">\r\n            <summary>Behaviour in case a tween nested inside a Sequence fails (and is caught by safe mode).\r\n            <para>Default: NestedTweenFailureBehaviour.TryToPreserveSequence</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.showUnityEditorReport\">\r\n            <summary>If TRUE you will get a DOTween report when exiting play mode (only in the Editor).\r\n            Useful to know how many max Tweeners and Sequences you reached and optimize your final project accordingly.\r\n            Beware, this will slightly slow down your tweens while inside Unity Editor.\r\n            <para>Default: FALSE</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.timeScale\">\r\n            <summary>Global DOTween global timeScale (default: 1).<para/>\r\n            The final timeScale of a non-timeScaleIndependent tween is:<para/>\r\n            <code>Unity's Time.timeScale * DOTween.timeScale * tween.timeScale</code><para/>\r\n            while the final timeScale of a timeScaleIndependent tween is:<para/>\r\n            <code>DOTween.unscaledTimeScale * DOTween.timeScale * tween.timeScale</code></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.unscaledTimeScale\">\r\n            <summary>DOTween timeScale applied only to timeScaleIndependent tweens (default: 1).<para/>\r\n            The final timeScale of a timeScaleIndependent tween is:<para/>\r\n            <code>DOTween.unscaledTimeScale * DOTween.timeScale * tween.timeScale</code></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.useSmoothDeltaTime\">\r\n            <summary>If TRUE, DOTween will use Time.smoothDeltaTime instead of Time.deltaTime for UpdateType.Normal and UpdateType.Late tweens\r\n            (unless they're set as timeScaleIndependent, in which case a value between the last timestep\r\n            and <see cref=\"F:DG.Tweening.DOTween.maxSmoothUnscaledTime\"/> will be used instead).\r\n            Setting this to TRUE will lead to smoother animations.\r\n            <para>Default: FALSE</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.maxSmoothUnscaledTime\">\r\n            <summary>If <see cref=\"F:DG.Tweening.DOTween.useSmoothDeltaTime\"/> is TRUE, this indicates the max timeStep that an independent update call can last.\r\n            Setting this to TRUE will lead to smoother animations.\r\n            <para>Default: FALSE</para></summary>\r\n        </member>\r\n        <member name=\"P:DG.Tweening.DOTween.logBehaviour\">\r\n            <summary>DOTween's log behaviour.\r\n            <para>Default: LogBehaviour.ErrorsOnly</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.onWillLog\">\r\n            <summary>Used to intercept DOTween's logs. If this method isn't NULL, DOTween will call it before writing a log via Unity's own Debug log methods.<para/>\r\n            Return TRUE if you want DOTween to proceed with the log, FALSE otherwise.<para/>\r\n            This method must return a <code>bool</code> and accept two parameters:<para/>\r\n            - <code>LogType</code>: the type of Unity log that DOTween is trying to log<para/>\r\n            - <code>object</code>: the log message that DOTween wants to log</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.drawGizmos\">\r\n            <summary>If TRUE draws path gizmos in Unity Editor (if the gizmos button is active).\r\n            Deactivate this if you want to avoid gizmos overhead while in Unity Editor</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.debugMode\">\r\n            <summary>If TRUE activates various debug options</summary>\r\n        </member>\r\n        <member name=\"P:DG.Tweening.DOTween.debugStoreTargetId\">\r\n            <summary>Stores the target id so it can be used to give more info in case of safeMode error capturing.\r\n            Only active if both <code>debugMode</code> and <code>useSafeMode</code> are TRUE</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.defaultUpdateType\">\r\n            <summary>Default updateType for new tweens.\r\n            <para>Default: UpdateType.Normal</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.defaultTimeScaleIndependent\">\r\n            <summary>Sets whether Unity's timeScale should be taken into account by default or not.\r\n            <para>Default: false</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.defaultAutoPlay\">\r\n            <summary>Default autoPlay behaviour for new tweens.\r\n            <para>Default: AutoPlay.All</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.defaultAutoKill\">\r\n            <summary>Default autoKillOnComplete behaviour for new tweens.\r\n            <para>Default: TRUE</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.defaultLoopType\">\r\n            <summary>Default loopType applied to all new tweens.\r\n            <para>Default: LoopType.Restart</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.defaultRecyclable\">\r\n            <summary>If TRUE all newly created tweens are set as recyclable, otherwise not.\r\n            <para>Default: FALSE</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.defaultEaseType\">\r\n            <summary>Default ease applied to all new Tweeners (not to Sequences which always have Ease.Linear as default).\r\n            <para>Default: Ease.InOutQuad</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.defaultEaseOvershootOrAmplitude\">\r\n            <summary>Default overshoot/amplitude used for eases\r\n            <para>Default: 1.70158f</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.defaultEasePeriod\">\r\n            <summary>Default period used for eases\r\n            <para>Default: 0</para></summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.DOTween.instance\">\r\n            <summary>Used internally. Assigned/removed by DOTweenComponent.Create/DestroyInstance</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Init(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{DG.Tweening.LogBehaviour})\">\r\n            <summary>\r\n            Must be called once, before the first ever DOTween call/reference,\r\n            otherwise it will be called automatically and will use default options.\r\n            Calling it a second time won't have any effect.\r\n            <para>You can chain <code>SetCapacity</code> to this method, to directly set the max starting size of Tweeners and Sequences:</para>\r\n            <code>DOTween.Init(false, false, LogBehaviour.Default).SetCapacity(100, 20);</code>\r\n            </summary>\r\n            <param name=\"recycleAllByDefault\">If TRUE all new tweens will be set for recycling, meaning that when killed,\r\n            instead of being destroyed, they will be put in a pool and reused instead of creating new tweens. This option allows you to avoid\r\n            GC allocations by reusing tweens, but you will have to take care of tween references, since they might result active\r\n            even if they were killed (since they might have been respawned and are now being used for other tweens).\r\n            <para>If you want to automatically set your tween references to NULL when a tween is killed \r\n            you can use the OnKill callback like this:</para>\r\n            <code>.OnKill(()=> myTweenReference = null)</code>\r\n            <para>You can change this setting at any time by changing the static <see cref=\"F:DG.Tweening.DOTween.defaultRecyclable\"/> property,\r\n            or you can set the recycling behaviour for each tween separately, using:</para>\r\n            <para><code>SetRecyclable(bool recyclable)</code></para>\r\n            <para>Default: FALSE</para></param>\r\n            <param name=\"useSafeMode\">If TRUE makes tweens slightly slower but safer, automatically taking care of a series of things\r\n            (like targets becoming null while a tween is playing).\r\n            You can change this setting at any time by changing the static <see cref=\"F:DG.Tweening.DOTween.useSafeMode\"/> property.\r\n            <para>Default: FALSE</para></param>\r\n            <param name=\"logBehaviour\">Type of logging to use.\r\n            You can change this setting at any time by changing the static <see cref=\"P:DG.Tweening.DOTween.logBehaviour\"/> property.\r\n            <para>Default: ErrorsOnly</para></param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.SetTweensCapacity(System.Int32,System.Int32)\">\r\n            <summary>\r\n            Directly sets the current max capacity of Tweeners and Sequences\r\n            (meaning how many Tweeners and Sequences can be running at the same time),\r\n            so that DOTween doesn't need to automatically increase them in case the max is reached\r\n            (which might lead to hiccups when that happens).\r\n            Sequences capacity must be less or equal to Tweeners capacity\r\n            (if you pass a low Tweener capacity it will be automatically increased to match the Sequence's).\r\n            Beware: use this method only when there are no tweens running.\r\n            </summary>\r\n            <param name=\"tweenersCapacity\">Max Tweeners capacity.\r\n            Default: 200</param>\r\n            <param name=\"sequencesCapacity\">Max Sequences capacity.\r\n            Default: 50</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Clear(System.Boolean)\">\r\n            <summary>\r\n            Kills all tweens, clears all cached tween pools and plugins and resets the max Tweeners/Sequences capacities to the default values.\r\n            </summary>\r\n            <param name=\"destroy\">If TRUE also destroys DOTween's gameObject and resets its initializiation, default settings and everything else\r\n            (so that next time you use it it will need to be re-initialized)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.ClearCachedTweens\">\r\n            <summary>\r\n            Clears all cached tween pools.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Validate\">\r\n            <summary>\r\n            Checks all active tweens to find and remove eventually invalid ones (usually because their targets became NULL)\r\n            and returns the total number of invalid tweens found and removed.\r\n            IMPORTANT: this will cause an error on UWP platform, so don't use it there \r\n            BEWARE: this is a slightly expensive operation so use it with care\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.ManualUpdate(System.Single,System.Single)\">\r\n            <summary>\r\n            Updates all tweens that are set to <see cref=\"F:DG.Tweening.UpdateType.Manual\"/>.\r\n            </summary>\r\n            <param name=\"deltaTime\">Manual deltaTime</param>\r\n            <param name=\"unscaledDeltaTime\">Unscaled delta time (used with tweens set as timeScaleIndependent)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.Single},DG.Tweening.Core.DOSetter{System.Single},System.Single,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.Double},DG.Tweening.Core.DOSetter{System.Double},System.Double,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.Int32},DG.Tweening.Core.DOSetter{System.Int32},System.Int32,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.UInt32},DG.Tweening.Core.DOSetter{System.UInt32},System.UInt32,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.Int64},DG.Tweening.Core.DOSetter{System.Int64},System.Int64,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.UInt64},DG.Tweening.Core.DOSetter{System.UInt64},System.UInt64,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.String},DG.Tweening.Core.DOSetter{System.String},System.String,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Vector2},DG.Tweening.Core.DOSetter{UnityEngine.Vector2},UnityEngine.Vector2,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},UnityEngine.Vector3,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Vector4},DG.Tweening.Core.DOSetter{UnityEngine.Vector4},UnityEngine.Vector4,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Quaternion},DG.Tweening.Core.DOSetter{UnityEngine.Quaternion},UnityEngine.Vector3,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Color},DG.Tweening.Core.DOSetter{UnityEngine.Color},UnityEngine.Color,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Rect},DG.Tweening.Core.DOSetter{UnityEngine.Rect},UnityEngine.Rect,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.RectOffset},DG.Tweening.Core.DOSetter{UnityEngine.RectOffset},UnityEngine.RectOffset,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To``3(DG.Tweening.Plugins.Core.ABSTweenPlugin{``0,``1,``2},DG.Tweening.Core.DOGetter{``0},DG.Tweening.Core.DOSetter{``0},``1,System.Single)\">\r\n            <summary>Tweens a property or field to the given value using a custom plugin</summary>\r\n            <param name=\"plugin\">The plugin to use. Each custom plugin implements a static <code>Get()</code> method\r\n            you'll need to call to assign the correct plugin in the correct way, like this:\r\n            <para><code>CustomPlugin.Get()</code></para></param>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.ToAxis(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},System.Single,System.Single,DG.Tweening.AxisConstraint)\">\r\n            <summary>Tweens only one axis of a Vector3 to the given value using default plugins.</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n            <param name=\"axisConstraint\">The axis to tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.ToAlpha(DG.Tweening.Core.DOGetter{UnityEngine.Color},DG.Tweening.Core.DOSetter{UnityEngine.Color},System.Single,System.Single)\">\r\n            <summary>Tweens only the alpha of a Color to the given value using default plugins</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The tween's duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOSetter{System.Single},System.Single,System.Single,System.Single)\">\r\n            <summary>Tweens a virtual property from the given start to the given end value \r\n            and implements a setter that allows to use that value with an external method or a lambda\r\n            <para>Example:</para>\r\n            <code>To(MyMethod, 0, 12, 0.5f);</code>\r\n            <para>Where MyMethod is a function that accepts a float parameter (which will be the result of the virtual tween)</para></summary>\r\n            <param name=\"setter\">The action to perform with the tweened value</param>\r\n            <param name=\"startValue\">The value to start from</param>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"duration\">The duration of the virtual tween\r\n            </param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Punch(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},UnityEngine.Vector3,System.Single,System.Int32,System.Single)\">\r\n            <summary>Punches a Vector3 towards the given direction and then back to the starting one\r\n            as if it was connected to the starting position via an elastic.\r\n            <para>This tween type generates some GC allocations at startup</para></summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"direction\">The direction and strength of the punch</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"vibrato\">Indicates how much will the punch vibrate</param>\r\n            <param name=\"elasticity\">Represents how much (0 to 1) the vector will go beyond the starting position when bouncing backwards.\r\n            1 creates a full oscillation between the direction and the opposite decaying direction,\r\n            while 0 oscillates only between the starting position and the decaying direction</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Shake(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},System.Single,System.Single,System.Int32,System.Single,System.Boolean,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Vector3 with the given values.</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction and behave like a random punch.</param>\r\n            <param name=\"ignoreZAxis\">If TRUE only shakes on the X Y axis (looks better with things like cameras).</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Shake(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Vector3 with the given values.</summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength on each axis</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction and behave like a random punch.</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.ToArray(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},UnityEngine.Vector3[],System.Single[])\">\r\n            <summary>Tweens a property or field to the given values using default plugins.\r\n            Ease is applied between each segment and not as a whole.\r\n            <para>This tween type generates some GC allocations at startup</para></summary>\r\n            <param name=\"getter\">A getter for the field or property to tween.\r\n            <para>Example usage with lambda:</para><code>()=> myProperty</code></param>\r\n            <param name=\"setter\">A setter for the field or property to tween\r\n            <para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>\r\n            <param name=\"endValues\">The end values to reach for each segment. This array must have the same length as <code>durations</code></param>\r\n            <param name=\"durations\">The duration of each segment. This array must have the same length as <code>endValues</code></param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Sequence\">\r\n            <summary>\r\n            Returns a new <see cref=\"T:DG.Tweening.Sequence\"/> to be used for tween groups.<para/>\r\n            Mind that Sequences don't have a target applied automatically like Tweener creation shortcuts,\r\n            so if you want to be able to kill this Sequence when calling DOTween.Kill(target) you'll have to add\r\n            the target manually; you can do that directly by using the <see cref=\"M:DG.Tweening.DOTween.Sequence(System.Object)\"/> overload instead of this one\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Sequence(System.Object)\">\r\n            <summary>\r\n            Returns a new <see cref=\"T:DG.Tweening.Sequence\"/> to be used for tween groups, and allows to set a target\r\n            (because Sequences don't have their target set automatically like Tweener creation shortcuts).\r\n            That way killing/controlling tweens by target will apply to this Sequence too.\r\n            </summary>\r\n            <param name=\"target\">The target of the Sequence. Relevant only for static target-based methods like DOTween.Kill(target),\r\n            useless otherwise</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.CompleteAll(System.Boolean)\">\r\n            <summary>Completes all tweens and returns the number of actual tweens completed\r\n            (meaning tweens that don't have infinite loops and were not already complete)</summary>\r\n            <param name=\"withCallbacks\">For Sequences only: if TRUE also internal Sequence callbacks will be fired,\r\n            otherwise they will be ignored</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Complete(System.Object,System.Boolean)\">\r\n            <summary>Completes all tweens with the given ID or target and returns the number of actual tweens completed\r\n            (meaning the tweens that don't have infinite loops and were not already complete)</summary>\r\n            <param name=\"withCallbacks\">For Sequences only: if TRUE internal Sequence callbacks will be fired,\r\n            otherwise they will be ignored</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.FlipAll\">\r\n            <summary>Flips all tweens (changing their direction to forward if it was backwards and viceversa),\r\n            then returns the number of actual tweens flipped</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Flip(System.Object)\">\r\n            <summary>Flips the tweens with the given ID or target (changing their direction to forward if it was backwards and viceversa),\r\n            then returns the number of actual tweens flipped</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.GotoAll(System.Single,System.Boolean)\">\r\n            <summary>Sends all tweens to the given position (calculating also eventual loop cycles) and returns the actual tweens involved</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Goto(System.Object,System.Single,System.Boolean)\">\r\n            <summary>Sends all tweens with the given ID or target to the given position (calculating also eventual loop cycles)\r\n            and returns the actual tweens involved</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.KillAll(System.Boolean)\">\r\n            <summary>Kills all tweens and returns the number of actual tweens killed</summary>\r\n            <param name=\"complete\">If TRUE completes the tweens before killing them</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.KillAll(System.Boolean,System.Object[])\">\r\n            <summary>Kills all tweens and returns the number of actual tweens killed</summary>\r\n            <param name=\"complete\">If TRUE completes the tweens before killing them</param>\r\n            <param name=\"idsOrTargetsToExclude\">Eventual IDs or targets to exclude from the killing</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Kill(System.Object,System.Boolean)\">\r\n            <summary>Kills all tweens with the given ID or target and returns the number of actual tweens killed</summary>\r\n            <param name=\"complete\">If TRUE completes the tweens before killing them</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Kill(System.Object,System.Object,System.Boolean)\">\r\n            <summary>Kills all tweens with the given target and the given ID, and returns the number of actual tweens killed</summary>\r\n            <param name=\"complete\">If TRUE completes the tweens before killing them</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.PauseAll\">\r\n            <summary>Pauses all tweens and returns the number of actual tweens paused</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Pause(System.Object)\">\r\n            <summary>Pauses all tweens with the given ID or target and returns the number of actual tweens paused\r\n            (meaning the tweens that were actually playing and have been paused)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.PlayAll\">\r\n            <summary>Plays all tweens and returns the number of actual tweens played\r\n            (meaning tweens that were not already playing or complete)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Play(System.Object)\">\r\n            <summary>Plays all tweens with the given ID or target and returns the number of actual tweens played\r\n            (meaning the tweens that were not already playing or complete)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Play(System.Object,System.Object)\">\r\n            <summary>Plays all tweens with the given target and the given ID, and returns the number of actual tweens played\r\n            (meaning the tweens that were not already playing or complete)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.PlayBackwardsAll\">\r\n            <summary>Plays backwards all tweens and returns the number of actual tweens played\r\n            (meaning tweens that were not already started, playing backwards or rewinded)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.PlayBackwards(System.Object)\">\r\n            <summary>Plays backwards all tweens with the given ID or target and returns the number of actual tweens played\r\n            (meaning the tweens that were not already started, playing backwards or rewinded)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.PlayBackwards(System.Object,System.Object)\">\r\n            <summary>Plays backwards all tweens with the given target and ID and returns the number of actual tweens played\r\n            (meaning the tweens that were not already started, playing backwards or rewinded)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.PlayForwardAll\">\r\n            <summary>Plays forward all tweens and returns the number of actual tweens played\r\n            (meaning tweens that were not already playing forward or complete)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.PlayForward(System.Object)\">\r\n            <summary>Plays forward all tweens with the given ID or target and returns the number of actual tweens played\r\n            (meaning the tweens that were not already playing forward or complete)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.PlayForward(System.Object,System.Object)\">\r\n            <summary>Plays forward all tweens with the given target and ID and returns the number of actual tweens played\r\n            (meaning the tweens that were not already started, playing backwards or rewinded)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.RestartAll(System.Boolean)\">\r\n            <summary>Restarts all tweens, then returns the number of actual tweens restarted</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Restart(System.Object,System.Boolean,System.Single)\">\r\n            <summary>Restarts all tweens with the given ID or target, then returns the number of actual tweens restarted</summary>\r\n            <param name=\"includeDelay\">If TRUE includes the eventual tweens delays, otherwise skips them</param>\r\n            <param name=\"changeDelayTo\">If >= 0 changes the startup delay of all involved tweens to this value, otherwise doesn't touch it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Restart(System.Object,System.Object,System.Boolean,System.Single)\">\r\n            <summary>Restarts all tweens with the given target and the given ID, and returns the number of actual tweens played\r\n            (meaning the tweens that were not already playing or complete)</summary>\r\n            <param name=\"includeDelay\">If TRUE includes the eventual tweens delays, otherwise skips them</param>\r\n            <param name=\"changeDelayTo\">If >= 0 changes the startup delay of all involved tweens to this value, otherwise doesn't touch it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.RewindAll(System.Boolean)\">\r\n            <summary>Rewinds and pauses all tweens, then returns the number of actual tweens rewinded\r\n            (meaning tweens that were not already rewinded)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.Rewind(System.Object,System.Boolean)\">\r\n            <summary>Rewinds and pauses all tweens with the given ID or target, then returns the number of actual tweens rewinded\r\n            (meaning the tweens that were not already rewinded)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.SmoothRewindAll\">\r\n            <summary>Smoothly rewinds all tweens (delays excluded), then returns the number of actual tweens rewinding/rewinded\r\n            (meaning tweens that were not already rewinded).\r\n            A \"smooth rewind\" animates the tween to its start position,\r\n            skipping all elapsed loops (except in case of LoopType.Incremental) while keeping the animation fluent.\r\n            <para>Note that a tween that was smoothly rewinded will have its play direction flipped</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.SmoothRewind(System.Object)\">\r\n            <summary>Smoothly rewinds all tweens (delays excluded) with the given ID or target, then returns the number of actual tweens rewinding/rewinded\r\n            (meaning the tweens that were not already rewinded).\r\n            A \"smooth rewind\" animates the tween to its start position,\r\n            skipping all elapsed loops (except in case of LoopType.Incremental) while keeping the animation fluent.\r\n            <para>Note that a tween that was smoothly rewinded will have its play direction flipped</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.TogglePauseAll\">\r\n            <summary>Toggles the play state of all tweens and returns the number of actual tweens toggled\r\n            (meaning tweens that could be played or paused, depending on the toggle state)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.TogglePause(System.Object)\">\r\n            <summary>Toggles the play state of all tweens with the given ID or target and returns the number of actual tweens toggled\r\n            (meaning the tweens that could be played or paused, depending on the toggle state)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.IsTweening(System.Object,System.Boolean)\">\r\n            <summary>\r\n            Returns TRUE if a tween with the given ID or target is active.\r\n            <para>You can also use this to know if a shortcut tween is active for a given target.</para>\r\n            <para>Example:</para>\r\n            <para><code>transform.DOMoveX(45, 1); // transform is automatically added as the tween target</code></para>\r\n            <para><code>DOTween.IsTweening(transform); // Returns true</code></para>\r\n            </summary>\r\n            <param name=\"targetOrId\">The target or ID to look for</param>\r\n            <param name=\"alsoCheckIfIsPlaying\">If FALSE (default) returns TRUE as long as a tween for the given target/ID is active,\r\n            otherwise also requires it to be playing</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.TotalActiveTweens\">\r\n            <summary>\r\n            Returns the total number of active tweens (so both Tweeners and Sequences).\r\n            A tween is considered active if it wasn't killed, regardless if it's playing or paused\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.TotalActiveTweeners\">\r\n            <summary>\r\n            Returns the total number of active Tweeners.\r\n            A Tweener is considered active if it wasn't killed, regardless if it's playing or paused\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.TotalActiveSequences\">\r\n            <summary>\r\n            Returns the total number of active Sequences.\r\n            A Sequence is considered active if it wasn't killed, regardless if it's playing or paused\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.TotalPlayingTweens\">\r\n            <summary>\r\n            Returns the total number of active and playing tweens.\r\n            A tween is considered as playing even if its delay is actually playing\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.TotalTweensById(System.Object,System.Boolean)\">\r\n            <summary>\r\n            Returns a the total number of active tweens with the given id.\r\n            </summary>\r\n            <param name=\"playingOnly\">If TRUE returns only the tweens with the given ID that are currently playing</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.PlayingTweens(System.Collections.Generic.List{DG.Tweening.Tween})\">\r\n            <summary>\r\n            Returns a list of all active tweens in a playing state.\r\n            Returns NULL if there are no active playing tweens.\r\n            <para>Beware: each time you call this method a new list is generated, so use it for debug only</para>\r\n            </summary>\r\n            <param name=\"fillableList\">If NULL creates a new list, otherwise clears and fills this one (and thus saves allocations)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.PausedTweens(System.Collections.Generic.List{DG.Tweening.Tween})\">\r\n            <summary>\r\n            Returns a list of all active tweens in a paused state.\r\n            Returns NULL if there are no active paused tweens.\r\n            <para>Beware: each time you call this method a new list is generated, so use it for debug only</para>\r\n            </summary>\r\n            <param name=\"fillableList\">If NULL creates a new list, otherwise clears and fills this one (and thus saves allocations)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.TweensById(System.Object,System.Boolean,System.Collections.Generic.List{DG.Tweening.Tween})\">\r\n            <summary>\r\n            Returns a list of all active tweens with the given id.\r\n            Returns NULL if there are no active tweens with the given id.\r\n            <para>Beware: each time you call this method a new list is generated</para>\r\n            </summary>\r\n            <param name=\"playingOnly\">If TRUE returns only the tweens with the given ID that are currently playing</param>\r\n            <param name=\"fillableList\">If NULL creates a new list, otherwise clears and fills this one (and thus saves allocations)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOTween.TweensByTarget(System.Object,System.Boolean,System.Collections.Generic.List{DG.Tweening.Tween})\">\r\n            <summary>\r\n            Returns a list of all active tweens with the given target.\r\n            Returns NULL if there are no active tweens with the given target.\r\n            <para>Beware: each time you call this method a new list is generated</para>\r\n            <param name=\"playingOnly\">If TRUE returns only the tweens with the given target that are currently playing</param>\r\n            <param name=\"fillableList\">If NULL creates a new list, otherwise clears and fills this one (and thus saves allocations)</param>\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.DOVirtual\">\r\n            <summary>\r\n            Creates virtual tweens that can be used to change other elements via their OnUpdate calls\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.Float(System.Single,System.Single,System.Single,DG.Tweening.TweenCallback{System.Single})\">\r\n            <summary>\r\n            Tweens a virtual float.\r\n            You can add regular settings to the generated tween,\r\n            but do not use <code>SetUpdate</code> or you will overwrite the onVirtualUpdate parameter\r\n            </summary>\r\n            <param name=\"from\">The value to start from</param>\r\n            <param name=\"to\">The value to tween to</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"onVirtualUpdate\">A callback which must accept a parameter of type float, called at each update</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.Int(System.Int32,System.Int32,System.Single,DG.Tweening.TweenCallback{System.Int32})\">\r\n            <summary>\r\n            Tweens a virtual int.\r\n            You can add regular settings to the generated tween,\r\n            but do not use <code>SetUpdate</code> or you will overwrite the onVirtualUpdate parameter\r\n            </summary>\r\n            <param name=\"from\">The value to start from</param>\r\n            <param name=\"to\">The value to tween to</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"onVirtualUpdate\">A callback which must accept a parameter of type int, called at each update</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.Vector3(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,DG.Tweening.TweenCallback{UnityEngine.Vector3})\">\r\n            <summary>\r\n            Tweens a virtual Vector3.\r\n            You can add regular settings to the generated tween,\r\n            but do not use <code>SetUpdate</code> or you will overwrite the onVirtualUpdate parameter\r\n            </summary>\r\n            <param name=\"from\">The value to start from</param>\r\n            <param name=\"to\">The value to tween to</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"onVirtualUpdate\">A callback which must accept a parameter of type Vector3, called at each update</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.Color(UnityEngine.Color,UnityEngine.Color,System.Single,DG.Tweening.TweenCallback{UnityEngine.Color})\">\r\n            <summary>\r\n            Tweens a virtual Color.\r\n            You can add regular settings to the generated tween,\r\n            but do not use <code>SetUpdate</code> or you will overwrite the onVirtualUpdate parameter\r\n            </summary>\r\n            <param name=\"from\">The value to start from</param>\r\n            <param name=\"to\">The value to tween to</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"onVirtualUpdate\">A callback which must accept a parameter of type Color, called at each update</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.EasedValue(System.Single,System.Single,System.Single,DG.Tweening.Ease)\">\r\n            <summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>\r\n            <param name=\"from\">The value to start from when lifetimePercentage is 0</param>\r\n            <param name=\"to\">The value to reach when lifetimePercentage is 1</param>\r\n            <param name=\"lifetimePercentage\">The time percentage (0 to 1) at which the value should be taken</param>\r\n            <param name=\"easeType\">The type of ease</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.EasedValue(System.Single,System.Single,System.Single,DG.Tweening.Ease,System.Single)\">\r\n            <summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>\r\n            <param name=\"from\">The value to start from when lifetimePercentage is 0</param>\r\n            <param name=\"to\">The value to reach when lifetimePercentage is 1</param>\r\n            <param name=\"lifetimePercentage\">The time percentage (0 to 1) at which the value should be taken</param>\r\n            <param name=\"easeType\">The type of ease</param>\r\n            <param name=\"overshoot\">Eventual overshoot to use with Back ease</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.EasedValue(System.Single,System.Single,System.Single,DG.Tweening.Ease,System.Single,System.Single)\">\r\n            <summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>\r\n            <param name=\"from\">The value to start from when lifetimePercentage is 0</param>\r\n            <param name=\"to\">The value to reach when lifetimePercentage is 1</param>\r\n            <param name=\"lifetimePercentage\">The time percentage (0 to 1) at which the value should be taken</param>\r\n            <param name=\"easeType\">The type of ease</param>\r\n            <param name=\"amplitude\">Eventual amplitude to use with Elastic easeType</param>\r\n            <param name=\"period\">Eventual period to use with Elastic easeType</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.EasedValue(System.Single,System.Single,System.Single,UnityEngine.AnimationCurve)\">\r\n            <summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>\r\n            <param name=\"from\">The value to start from when lifetimePercentage is 0</param>\r\n            <param name=\"to\">The value to reach when lifetimePercentage is 1</param>\r\n            <param name=\"lifetimePercentage\">The time percentage (0 to 1) at which the value should be taken</param>\r\n            <param name=\"easeCurve\">The AnimationCurve to use for ease</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.EasedValue(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,DG.Tweening.Ease)\">\r\n            <summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>\r\n            <param name=\"from\">The value to start from when lifetimePercentage is 0</param>\r\n            <param name=\"to\">The value to reach when lifetimePercentage is 1</param>\r\n            <param name=\"lifetimePercentage\">The time percentage (0 to 1) at which the value should be taken</param>\r\n            <param name=\"easeType\">The type of ease</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.EasedValue(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,DG.Tweening.Ease,System.Single)\">\r\n            <summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>\r\n            <param name=\"from\">The value to start from when lifetimePercentage is 0</param>\r\n            <param name=\"to\">The value to reach when lifetimePercentage is 1</param>\r\n            <param name=\"lifetimePercentage\">The time percentage (0 to 1) at which the value should be taken</param>\r\n            <param name=\"easeType\">The type of ease</param>\r\n            <param name=\"overshoot\">Eventual overshoot to use with Back ease</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.EasedValue(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,DG.Tweening.Ease,System.Single,System.Single)\">\r\n            <summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>\r\n            <param name=\"from\">The value to start from when lifetimePercentage is 0</param>\r\n            <param name=\"to\">The value to reach when lifetimePercentage is 1</param>\r\n            <param name=\"lifetimePercentage\">The time percentage (0 to 1) at which the value should be taken</param>\r\n            <param name=\"easeType\">The type of ease</param>\r\n            <param name=\"amplitude\">Eventual amplitude to use with Elastic easeType</param>\r\n            <param name=\"period\">Eventual period to use with Elastic easeType</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.EasedValue(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.AnimationCurve)\">\r\n            <summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>\r\n            <param name=\"from\">The value to start from when lifetimePercentage is 0</param>\r\n            <param name=\"to\">The value to reach when lifetimePercentage is 1</param>\r\n            <param name=\"lifetimePercentage\">The time percentage (0 to 1) at which the value should be taken</param>\r\n            <param name=\"easeCurve\">The AnimationCurve to use for ease</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.DOVirtual.DelayedCall(System.Single,DG.Tweening.TweenCallback,System.Boolean)\">\r\n            <summary>Fires the given callback after the given time.</summary>\r\n            <param name=\"delay\">Callback delay</param>\r\n            <param name=\"callback\">Callback to fire when the delay has expired</param>\r\n            <param name=\"ignoreTimeScale\">If TRUE (default) ignores Unity's timeScale</param>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Ease.INTERNAL_Zero\">\r\n            <summary>\r\n            Don't assign this! It's assigned automatically when creating 0 duration tweens\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Ease.INTERNAL_Custom\">\r\n            <summary>\r\n            Don't assign this! It's assigned automatically when setting the ease to an AnimationCurve or to a custom ease function\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.EaseFactory\">\r\n            <summary>\r\n            Allows to wrap ease method in special ways, adding extra features\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.EaseFactory.StopMotion(System.Int32,System.Nullable{DG.Tweening.Ease})\">\r\n            <summary>\r\n            Converts the given ease so that it also creates a stop-motion effect, by playing the tween at the given FPS\r\n            </summary>\r\n            <param name=\"motionFps\">FPS at which the tween should be played</param>\r\n            <param name=\"ease\">Ease type</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.EaseFactory.StopMotion(System.Int32,UnityEngine.AnimationCurve)\">\r\n            <summary>\r\n            Converts the given ease so that it also creates a stop-motion effect, by playing the tween at the given FPS\r\n            </summary>\r\n            <param name=\"motionFps\">FPS at which the tween should be played</param>\r\n            <param name=\"animCurve\">AnimationCurve to use for the ease</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.EaseFactory.StopMotion(System.Int32,DG.Tweening.EaseFunction)\">\r\n            <summary>\r\n            Converts the given ease so that it also creates a stop-motion effect, by playing the tween at the given FPS\r\n            </summary>\r\n            <param name=\"motionFps\">FPS at which the tween should be played</param>\r\n            <param name=\"customEase\">Custom ease function to use</param>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.IDOTweenInit\">\r\n            <summary>\r\n            Used to allow method chaining with DOTween.Init\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.IDOTweenInit.SetCapacity(System.Int32,System.Int32)\">\r\n            <summary>\r\n            Directly sets the current max capacity of Tweeners and Sequences\r\n            (meaning how many Tweeners and Sequences can be running at the same time),\r\n            so that DOTween doesn't need to automatically increase them in case the max is reached\r\n            (which might lead to hiccups when that happens).\r\n            Sequences capacity must be less or equal to Tweeners capacity\r\n            (if you pass a low Tweener capacity it will be automatically increased to match the Sequence's).\r\n            Beware: use this method only when there are no tweens running.\r\n            </summary>\r\n            <param name=\"tweenersCapacity\">Max Tweeners capacity.\r\n            Default: 200</param>\r\n            <param name=\"sequencesCapacity\">Max Sequences capacity.\r\n            Default: 50</param>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.LinkBehaviour\">\r\n            <summary>\r\n            Behaviour that can be assigned when chaining a SetLink to a tween\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LinkBehaviour.PauseOnDisable\">\r\n            <summary>Pauses the tween when the link target is disabled</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LinkBehaviour.PauseOnDisablePlayOnEnable\">\r\n            <summary>Pauses the tween when the link target is disabled, plays it when it's enabled</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LinkBehaviour.PauseOnDisableRestartOnEnable\">\r\n            <summary>Pauses the tween when the link target is disabled, restarts it when it's enabled</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LinkBehaviour.PlayOnEnable\">\r\n            <summary>Plays the tween when the link target is enabled</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LinkBehaviour.RestartOnEnable\">\r\n            <summary>Restarts the tween when the link target is enabled</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LinkBehaviour.KillOnDisable\">\r\n            <summary>Kills the tween when the link target is disabled</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LinkBehaviour.KillOnDestroy\">\r\n            <summary>Kills the tween when the link target is destroyed (becomes NULL). This is always active even if another behaviour is chosen</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LinkBehaviour.CompleteOnDisable\">\r\n            <summary>Completes the tween when the link target is disabled</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LinkBehaviour.CompleteAndKillOnDisable\">\r\n            <summary>Completes and kills the tween when the link target is disabled</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LinkBehaviour.RewindOnDisable\">\r\n            <summary>Rewinds the tween (delay excluded) when the link target is disabled</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LinkBehaviour.RewindAndKillOnDisable\">\r\n            <summary>Rewinds and kills the tween when the link target is disabled</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.PathMode\">\r\n            <summary>\r\n            Path mode (used to determine correct LookAt orientation)\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.PathMode.Ignore\">\r\n            <summary>Ignores the path mode (and thus LookAt behaviour)</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.PathMode.Full3D\">\r\n            <summary>Regular 3D path</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.PathMode.TopDown2D\">\r\n            <summary>2D top-down path</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.PathMode.Sidescroller2D\">\r\n            <summary>2D side-scroller path</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.PathType\">\r\n            <summary>\r\n            Type of path to use with DOPath tweens\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.PathType.Linear\">\r\n            <summary>Linear, composed of straight segments between each waypoint</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.PathType.CatmullRom\">\r\n            <summary>Curved path (which uses Catmull-Rom curves)</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.PathType.CubicBezier\">\r\n            <summary><code>EXPERIMENTAL: </code>Curved path (which uses Cubic Bezier curves, where each point requires two extra control points)</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Plugins.CirclePlugin\">\r\n            <summary>\r\n            Tweens a Vector2 along a circle.\r\n            EndValue represents the center of the circle, start and end value degrees are inside options\r\n            ChangeValue x is changeValue°, y is unused\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Plugins.Core.PathCore.ControlPoint\">\r\n            <summary>\r\n            Path control point\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Plugins.Core.PathCore.Path.wps\">\r\n            <summary>\r\n            Path waypoints (modified by PathPlugin when setting relative end/change value or by CubicBezierDecoder) and by DOTweenPathInspector\r\n            </summary>\r\n        </member>\r\n        <member name=\"P:DG.Tweening.Plugins.Core.PathCore.Path.minInputWaypoints\">\r\n            <summary>\r\n            Minimum input points necessary to create the path (doesn't correspond to actual waypoints required)\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Plugins.Core.PathCore.Path.GetPoint(System.Single,System.Boolean)\">\r\n            <summary>\r\n            Gets the point on the path at the given percentage (0 to 1)\r\n            </summary>\r\n            <param name=\"perc\">The percentage (0 to 1) at which to get the point</param>\r\n            <param name=\"convertToConstantPerc\">If TRUE constant speed is taken into account, otherwise not</param>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Plugins.Options.IPlugOptions\">\r\n            <summary>\r\n            Base interface for all tween plugins options\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Plugins.Options.IPlugOptions.Reset\">\r\n            <summary>Resets the plugin</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Plugins.Vector3ArrayPlugin\">\r\n            <summary>\r\n            This plugin generates some GC allocations at startup\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Plugins.PathPlugin\">\r\n            <summary>\r\n            Path plugin works exclusively with Transforms\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.RotateMode\">\r\n            <summary>\r\n            Rotation mode used with DORotate methods\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.RotateMode.Fast\">\r\n            <summary>\r\n            Fastest way that never rotates beyond 360°\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.RotateMode.FastBeyond360\">\r\n            <summary>\r\n            Fastest way that rotates beyond 360°\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.RotateMode.WorldAxisAdd\">\r\n            <summary>\r\n            Adds the given rotation to the transform using world axis and an advanced precision mode\r\n            (like when using transform.Rotate(Space.World)).\r\n            <para>In this mode the end value is is always considered relative</para>\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.RotateMode.LocalAxisAdd\">\r\n            <summary>\r\n            Adds the given rotation to the transform's local axis\r\n            (like when rotating an object with the \"local\" switch enabled in Unity's editor or using transform.Rotate(Space.Self)).\r\n            <para>In this mode the end value is is always considered relative</para>\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.ScrambleMode\">\r\n            <summary>\r\n            Type of scramble to apply to string tweens\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.ScrambleMode.None\">\r\n            <summary>\r\n            No scrambling of characters\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.ScrambleMode.All\">\r\n            <summary>\r\n            A-Z + a-z + 0-9 characters\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.ScrambleMode.Uppercase\">\r\n            <summary>\r\n            A-Z characters\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.ScrambleMode.Lowercase\">\r\n            <summary>\r\n            a-z characters\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.ScrambleMode.Numerals\">\r\n            <summary>\r\n            0-9 characters\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.ScrambleMode.Custom\">\r\n            <summary>\r\n            Custom characters\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.ShakeRandomnessMode\">\r\n            <summary>\r\n            Type of randomness to apply to a shake tween\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.ShakeRandomnessMode.Full\">\r\n            <summary>Default, full randomness</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.ShakeRandomnessMode.Harmonic\">\r\n            <summary>Creates a more balanced randomness that looks more harmonic</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.TweenExtensions\">\r\n            <summary>\r\n            Methods that extend Tween objects and allow to control or get data from them\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Complete(DG.Tweening.Tween)\">\r\n            <summary>Completes the tween</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Complete(DG.Tweening.Tween,System.Boolean)\">\r\n            <summary>Completes the tween</summary>\r\n            <param name=\"withCallbacks\">For Sequences only: if TRUE also internal Sequence callbacks will be fired,\r\n            otherwise they will be ignored</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Flip(DG.Tweening.Tween)\">\r\n            <summary>Flips the direction of this tween (backwards if it was going forward or viceversa)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.ForceInit(DG.Tweening.Tween)\">\r\n            <summary>Forces the tween to initialize its settings immediately</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Goto(DG.Tweening.Tween,System.Single,System.Boolean)\">\r\n            <summary>Send the tween to the given position in time</summary>\r\n            <param name=\"to\">Time position to reach\r\n            (if higher than the whole tween duration the tween will simply reach its end)</param>\r\n            <param name=\"andPlay\">If TRUE will play the tween after reaching the given position, otherwise it will pause it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.GotoWithCallbacks(DG.Tweening.Tween,System.Single,System.Boolean)\">\r\n            <summary>Send the tween to the given position in time while also executing any callback between the previous time position and the new one</summary>\r\n            <param name=\"to\">Time position to reach\r\n            (if higher than the whole tween duration the tween will simply reach its end)</param>\r\n            <param name=\"andPlay\">If TRUE will play the tween after reaching the given position, otherwise it will pause it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Kill(DG.Tweening.Tween,System.Boolean)\">\r\n            <summary>Kills the tween</summary>\r\n            <param name=\"complete\">If TRUE completes the tween before killing it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.ManualUpdate(DG.Tweening.Tween,System.Single,System.Single)\">\r\n            <summary>\r\n            Forces this tween to update manually, regardless of the <see cref=\"T:DG.Tweening.UpdateType\"/> set via SetUpdate.\r\n            Note that the tween will still be subject to normal tween rules, so if for example it's paused this method will do nothing.<para/>\r\n            Also note that if you only want to update this tween instance manually you'll have to set it to <see cref=\"F:DG.Tweening.UpdateType.Manual\"/> anyway,\r\n            so that it's not updated automatically.\r\n            </summary>\r\n            <param name=\"deltaTime\">Manual deltaTime</param>\r\n            <param name=\"unscaledDeltaTime\">Unscaled delta time (used with tweens set as timeScaleIndependent)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Pause``1(``0)\">\r\n            <summary>Pauses the tween</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Play``1(``0)\">\r\n            <summary>Plays the tween</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.PlayBackwards(DG.Tweening.Tween)\">\r\n            <summary>Sets the tween in a backwards direction and plays it</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.PlayForward(DG.Tweening.Tween)\">\r\n            <summary>Sets the tween in a forward direction and plays it</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Restart(DG.Tweening.Tween,System.Boolean,System.Single)\">\r\n            <summary>Restarts the tween from the beginning</summary>\r\n            <param name=\"includeDelay\">Ignored in case of Sequences. If TRUE includes the eventual tween delay, otherwise skips it</param>\r\n            <param name=\"changeDelayTo\">Ignored in case of Sequences. If >= 0 changes the startup delay to this value, otherwise doesn't touch it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Rewind(DG.Tweening.Tween,System.Boolean)\">\r\n            <summary>Rewinds and pauses the tween</summary>\r\n            <param name=\"includeDelay\">Ignored in case of Sequences. If TRUE includes the eventual tween delay, otherwise skips it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.SmoothRewind(DG.Tweening.Tween)\">\r\n            <summary>Smoothly rewinds the tween (delays excluded).\r\n            A \"smooth rewind\" animates the tween to its start position,\r\n            skipping all elapsed loops (except in case of LoopType.Incremental) while keeping the animation fluent.\r\n            If called on a tween who is still waiting for its delay to happen, it will simply set the delay to 0 and pause the tween.\r\n            <para>Note that a tween that was smoothly rewinded will have its play direction flipped</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.TogglePause(DG.Tweening.Tween)\">\r\n            <summary>Plays the tween if it was paused, pauses it if it was playing</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.GotoWaypoint(DG.Tweening.Tween,System.Int32,System.Boolean)\">\r\n            <summary>Send a path tween to the given waypoint.\r\n            Has no effect if this is not a path tween.\r\n            <para>BEWARE, this is a special utility method:\r\n            it works only with Linear eases. Also, the lookAt direction might be wrong after calling this and might need to be set manually\r\n            (because it relies on a smooth path movement and doesn't work well with jumps that encompass dramatic direction changes)</para></summary>\r\n            <param name=\"waypointIndex\">Waypoint index to reach\r\n            (if higher than the max waypoint index the tween will simply go to the last one)</param>\r\n            <param name=\"andPlay\">If TRUE will play the tween after reaching the given waypoint, otherwise it will pause it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.WaitForCompletion(DG.Tweening.Tween)\">\r\n            <summary>\r\n            Creates a yield instruction that waits until the tween is killed or complete.\r\n            It can be used inside a coroutine as a yield.\r\n            <para>Example usage:</para><code>yield return myTween.WaitForCompletion();</code>\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.WaitForRewind(DG.Tweening.Tween)\">\r\n            <summary>\r\n            Creates a yield instruction that waits until the tween is killed or rewinded.\r\n            It can be used inside a coroutine as a yield.\r\n            <para>Example usage:</para><code>yield return myTween.WaitForRewind();</code>\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.WaitForKill(DG.Tweening.Tween)\">\r\n            <summary>\r\n            Creates a yield instruction that waits until the tween is killed.\r\n            It can be used inside a coroutine as a yield.\r\n            <para>Example usage:</para><code>yield return myTween.WaitForKill();</code>\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.WaitForElapsedLoops(DG.Tweening.Tween,System.Int32)\">\r\n            <summary>\r\n            Creates a yield instruction that waits until the tween is killed or has gone through the given amount of loops.\r\n            It can be used inside a coroutine as a yield.\r\n            <para>Example usage:</para><code>yield return myTween.WaitForElapsedLoops(2);</code>\r\n            </summary>\r\n            <param name=\"elapsedLoops\">Elapsed loops to wait for</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.WaitForPosition(DG.Tweening.Tween,System.Single)\">\r\n            <summary>\r\n            Creates a yield instruction that waits until the tween is killed or has reached the given position (loops included, delays excluded).\r\n            It can be used inside a coroutine as a yield.\r\n            <para>Example usage:</para><code>yield return myTween.WaitForPosition(2.5f);</code>\r\n            </summary>\r\n            <param name=\"position\">Position (loops included, delays excluded) to wait for</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.WaitForStart(DG.Tweening.Tween)\">\r\n            <summary>\r\n            Creates a yield instruction that waits until the tween is killed or started\r\n            (meaning when the tween is set in a playing state the first time, after any eventual delay).\r\n            It can be used inside a coroutine as a yield.\r\n            <para>Example usage:</para><code>yield return myTween.WaitForStart();</code>\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.CompletedLoops(DG.Tweening.Tween)\">\r\n            <summary>Returns the total number of loops completed by this tween</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Delay(DG.Tweening.Tween)\">\r\n            <summary>Returns the eventual delay set for this tween</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.ElapsedDelay(DG.Tweening.Tween)\">\r\n            <summary>Returns the eventual elapsed delay set for this tween</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Duration(DG.Tweening.Tween,System.Boolean)\">\r\n            <summary>Returns the duration of this tween (delays excluded).\r\n            <para>NOTE: when using settings like SpeedBased, the duration will be recalculated when the tween starts</para></summary>\r\n            <param name=\"includeLoops\">If TRUE returns the full duration loops included,\r\n             otherwise the duration of a single loop cycle</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Elapsed(DG.Tweening.Tween,System.Boolean)\">\r\n            <summary>Returns the elapsed time for this tween (delays exluded)</summary>\r\n            <param name=\"includeLoops\">If TRUE returns the elapsed time since startup loops included,\r\n             otherwise the elapsed time within the current loop cycle</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.ElapsedPercentage(DG.Tweening.Tween,System.Boolean)\">\r\n            <summary>Returns the elapsed percentage (0 to 1) of this tween (delays exluded)</summary>\r\n            <param name=\"includeLoops\">If TRUE returns the elapsed percentage since startup loops included,\r\n            otherwise the elapsed percentage within the current loop cycle</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.ElapsedDirectionalPercentage(DG.Tweening.Tween)\">\r\n            <summary>Returns the elapsed percentage (0 to 1) of this tween (delays exluded),\r\n            based on a single loop, and calculating eventual backwards Yoyo loops as 1 to 0 instead of 0 to 1</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.IsActive(DG.Tweening.Tween)\">\r\n            <summary>Returns FALSE if this tween has been killed or is NULL, TRUE otherwise.\r\n            <para>BEWARE: if this tween is recyclable it might have been spawned again for another use and thus return TRUE anyway.</para>\r\n            When working with recyclable tweens you should take care to know when a tween has been killed and manually set your references to NULL.\r\n            If you want to be sure your references are set to NULL when a tween is killed you can use the <code>OnKill</code> callback like this:\r\n            <para><code>.OnKill(()=> myTweenReference = null)</code></para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.IsBackwards(DG.Tweening.Tween)\">\r\n            <summary>Returns TRUE if this tween was reversed and is set to go backwards</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.IsComplete(DG.Tweening.Tween)\">\r\n            <summary>Returns TRUE if the tween is complete\r\n            (silently fails and returns FALSE if the tween has been killed)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.IsInitialized(DG.Tweening.Tween)\">\r\n            <summary>Returns TRUE if this tween has been initialized</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.IsPlaying(DG.Tweening.Tween)\">\r\n            <summary>Returns TRUE if this tween is playing</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.Loops(DG.Tweening.Tween)\">\r\n            <summary>Returns the total number of loops set for this tween\r\n            (returns -1 if the loops are infinite)</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.PathGetPoint(DG.Tweening.Tween,System.Single)\">\r\n            <summary>\r\n            Returns a point on a path based on the given path percentage.\r\n            Returns <code>Vector3.zero</code> if this is not a path tween, if the tween is invalid, or if the path is not yet initialized.\r\n            A path is initialized after its tween starts, or immediately if the tween was created with the Path Editor (DOTween Pro feature).\r\n            You can force a path to be initialized by calling <code>myTween.ForceInit()</code>.\r\n            </summary>\r\n            <param name=\"pathPercentage\">Percentage of the path (0 to 1) on which to get the point</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.PathGetDrawPoints(DG.Tweening.Tween,System.Int32)\">\r\n            <summary>\r\n            Returns an array of points that can be used to draw the path.\r\n            Note that this method generates allocations, because it creates a new array.\r\n            Returns <code>NULL</code> if this is not a path tween, if the tween is invalid, or if the path is not yet initialized.\r\n            A path is initialized after its tween starts, or immediately if the tween was created with the Path Editor (DOTween Pro feature).\r\n            You can force a path to be initialized by calling <code>myTween.ForceInit()</code>.\r\n            </summary>\r\n            <param name=\"subdivisionsXSegment\">How many points to create for each path segment (waypoint to waypoint).\r\n            Only used in case of non-Linear paths</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenExtensions.PathLength(DG.Tweening.Tween)\">\r\n            <summary>\r\n            Returns the length of a path.\r\n            Returns -1 if this is not a path tween, if the tween is invalid, or if the path is not yet initialized.\r\n            A path is initialized after its tween starts, or immediately if the tween was created with the Path Editor (DOTween Pro feature).\r\n            You can force a path to be initialized by calling <code>myTween.ForceInit()</code>.\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.LoopType\">\r\n            <summary>\r\n            Types of loop\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LoopType.Restart\">\r\n            <summary>Each loop cycle restarts from the beginning</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LoopType.Yoyo\">\r\n            <summary>The tween moves forward and backwards at alternate cycles</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LoopType.Incremental\">\r\n            <summary>Continuously increments the tween at the end of each loop cycle (A to B, B to B+(A-B), and so on), thus always moving \"onward\".\r\n            <para>In case of String tweens works only if the tween is set as relative</para></summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Sequence\">\r\n            <summary>\r\n            Controls other tweens as a group\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.ShortcutExtensions\">\r\n            <summary>\r\n            Methods that extend known Unity objects and allow to directly create and control tweens from their instances\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOAspect(UnityEngine.Camera,System.Single,System.Single)\">\r\n            <summary>Tweens a Camera's <code>aspect</code> to the given value.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.Camera,UnityEngine.Color,System.Single)\">\r\n            <summary>Tweens a Camera's backgroundColor to the given value.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOFarClipPlane(UnityEngine.Camera,System.Single,System.Single)\">\r\n            <summary>Tweens a Camera's <code>farClipPlane</code> to the given value.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOFieldOfView(UnityEngine.Camera,System.Single,System.Single)\">\r\n            <summary>Tweens a Camera's <code>fieldOfView</code> to the given value.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DONearClipPlane(UnityEngine.Camera,System.Single,System.Single)\">\r\n            <summary>Tweens a Camera's <code>nearClipPlane</code> to the given value.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOOrthoSize(UnityEngine.Camera,System.Single,System.Single)\">\r\n            <summary>Tweens a Camera's <code>orthographicSize</code> to the given value.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPixelRect(UnityEngine.Camera,UnityEngine.Rect,System.Single)\">\r\n            <summary>Tweens a Camera's <code>pixelRect</code> to the given value.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DORect(UnityEngine.Camera,UnityEngine.Rect,System.Single)\">\r\n            <summary>Tweens a Camera's <code>rect</code> to the given value.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOShakePosition(UnityEngine.Camera,System.Single,System.Single,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Camera's localPosition along its relative X Y axes with the given values.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction.</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOShakePosition(UnityEngine.Camera,System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Camera's localPosition along its relative X Y axes with the given values.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength on each axis</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction.</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOShakeRotation(UnityEngine.Camera,System.Single,System.Single,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Camera's localRotation.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction.</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOShakeRotation(UnityEngine.Camera,System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Camera's localRotation.\r\n            Also stores the camera as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength on each axis</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction.</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.Light,UnityEngine.Color,System.Single)\">\r\n            <summary>Tweens a Light's color to the given value.\r\n            Also stores the light as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOIntensity(UnityEngine.Light,System.Single,System.Single)\">\r\n            <summary>Tweens a Light's intensity to the given value.\r\n            Also stores the light as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOShadowStrength(UnityEngine.Light,System.Single,System.Single)\">\r\n            <summary>Tweens a Light's shadowStrength to the given value.\r\n            Also stores the light as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.LineRenderer,DG.Tweening.Color2,DG.Tweening.Color2,System.Single)\">\r\n            <summary>Tweens a LineRenderer's color to the given value.\r\n            Also stores the LineRenderer as the tween's target so it can be used for filtered operations.\r\n            <para>Note that this method requires to also insert the start colors for the tween, \r\n            since LineRenderers have no way to get them.</para></summary>\r\n            <param name=\"startValue\">The start value to tween from</param>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.Material,UnityEngine.Color,System.Single)\">\r\n            <summary>Tweens a Material's color to the given value.\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.Material,UnityEngine.Color,System.String,System.Single)\">\r\n            <summary>Tweens a Material's named color property to the given value.\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"property\">The name of the material property to tween (like _Tint or _SpecColor)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.Material,UnityEngine.Color,System.Int32,System.Single)\">\r\n            <summary>Tweens a Material's named color property with the given ID to the given value.\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"propertyID\">The ID of the material property to tween (also called nameID in Unity's manual)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOFade(UnityEngine.Material,System.Single,System.Single)\">\r\n            <summary>Tweens a Material's alpha color to the given value\r\n            (will have no effect unless your material supports transparency).\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOFade(UnityEngine.Material,System.Single,System.String,System.Single)\">\r\n            <summary>Tweens a Material's alpha color to the given value\r\n            (will have no effect unless your material supports transparency).\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"property\">The name of the material property to tween (like _Tint or _SpecColor)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOFade(UnityEngine.Material,System.Single,System.Int32,System.Single)\">\r\n            <summary>Tweens a Material's alpha color with the given ID to the given value\r\n            (will have no effect unless your material supports transparency).\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"propertyID\">The ID of the material property to tween (also called nameID in Unity's manual)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOFloat(UnityEngine.Material,System.Single,System.String,System.Single)\">\r\n            <summary>Tweens a Material's named float property to the given value.\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"property\">The name of the material property to tween</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOFloat(UnityEngine.Material,System.Single,System.Int32,System.Single)\">\r\n            <summary>Tweens a Material's named float property with the given ID to the given value.\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"propertyID\">The ID of the material property to tween (also called nameID in Unity's manual)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOOffset(UnityEngine.Material,UnityEngine.Vector2,System.Single)\">\r\n            <summary>Tweens a Material's texture offset to the given value.\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOOffset(UnityEngine.Material,UnityEngine.Vector2,System.String,System.Single)\">\r\n            <summary>Tweens a Material's named texture offset property to the given value.\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"property\">The name of the material property to tween</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOTiling(UnityEngine.Material,UnityEngine.Vector2,System.Single)\">\r\n            <summary>Tweens a Material's texture scale to the given value.\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOTiling(UnityEngine.Material,UnityEngine.Vector2,System.String,System.Single)\">\r\n            <summary>Tweens a Material's named texture scale property to the given value.\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"property\">The name of the material property to tween</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOVector(UnityEngine.Material,UnityEngine.Vector4,System.String,System.Single)\">\r\n            <summary>Tweens a Material's named Vector property to the given value.\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"property\">The name of the material property to tween</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOVector(UnityEngine.Material,UnityEngine.Vector4,System.Int32,System.Single)\">\r\n            <summary>Tweens a Material's named Vector property with the given ID to the given value.\r\n            Also stores the material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"propertyID\">The ID of the material property to tween (also called nameID in Unity's manual)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOResize(UnityEngine.TrailRenderer,System.Single,System.Single,System.Single)\">\r\n            <summary>Tweens a TrailRenderer's startWidth/endWidth to the given value.\r\n            Also stores the TrailRenderer as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"toStartWidth\">The end startWidth to reach</param><param name=\"toEndWidth\">The end endWidth to reach</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOTime(UnityEngine.TrailRenderer,System.Single,System.Single)\">\r\n            <summary>Tweens a TrailRenderer's time to the given value.\r\n            Also stores the TrailRenderer as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOMove(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's position to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOMoveX(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's X position to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOMoveY(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's Y position to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOMoveZ(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's Z position to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOLocalMove(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's localPosition to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOLocalMoveX(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's X localPosition to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOLocalMoveY(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's Y localPosition to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOLocalMoveZ(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's Z localPosition to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DORotate(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.RotateMode)\">\r\n            <summary>Tweens a Transform's rotation to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"mode\">Rotation mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DORotateQuaternion(UnityEngine.Transform,UnityEngine.Quaternion,System.Single)\">\r\n            <summary>Tweens a Transform's rotation to the given value using pure quaternion values.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations.\r\n            <para>PLEASE NOTE: DORotate, which takes Vector3 values, is the preferred rotation method.\r\n            This method was implemented for very special cases, and doesn't support LoopType.Incremental loops\r\n            (neither for itself nor if placed inside a LoopType.Incremental Sequence)</para>\r\n            </summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOLocalRotate(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.RotateMode)\">\r\n            <summary>Tweens a Transform's localRotation to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"mode\">Rotation mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOLocalRotateQuaternion(UnityEngine.Transform,UnityEngine.Quaternion,System.Single)\">\r\n            <summary>Tweens a Transform's rotation to the given value using pure quaternion values.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations.\r\n            <para>PLEASE NOTE: DOLocalRotate, which takes Vector3 values, is the preferred rotation method.\r\n            This method was implemented for very special cases, and doesn't support LoopType.Incremental loops\r\n            (neither for itself nor if placed inside a LoopType.Incremental Sequence)</para>\r\n            </summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOScale(UnityEngine.Transform,UnityEngine.Vector3,System.Single)\">\r\n            <summary>Tweens a Transform's localScale to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOScale(UnityEngine.Transform,System.Single,System.Single)\">\r\n            <summary>Tweens a Transform's localScale uniformly to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOScaleX(UnityEngine.Transform,System.Single,System.Single)\">\r\n            <summary>Tweens a Transform's X localScale to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOScaleY(UnityEngine.Transform,System.Single,System.Single)\">\r\n            <summary>Tweens a Transform's Y localScale to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOScaleZ(UnityEngine.Transform,System.Single,System.Single)\">\r\n            <summary>Tweens a Transform's Z localScale to the given value.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOLookAt(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.AxisConstraint,System.Nullable{UnityEngine.Vector3})\">\r\n            <summary>Tweens a Transform's rotation so that it will look towards the given world position.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"towards\">The position to look at</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"axisConstraint\">Eventual axis constraint for the rotation</param>\r\n            <param name=\"up\">The vector that defines in which direction up is (default: Vector3.up)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DODynamicLookAt(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.AxisConstraint,System.Nullable{UnityEngine.Vector3})\">\r\n            <summary><code>EXPERIMENTAL</code> Tweens a Transform's rotation so that it will look towards the given world position,\r\n            while also updating the lookAt position every frame\r\n            (contrary to <see cref=\"M:DG.Tweening.ShortcutExtensions.DOLookAt(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.AxisConstraint,System.Nullable{UnityEngine.Vector3})\"/> which calculates the lookAt rotation only once, when the tween starts).\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"towards\">The position to look at</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"axisConstraint\">Eventual axis constraint for the rotation</param>\r\n            <param name=\"up\">The vector that defines in which direction up is (default: Vector3.up)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPunchPosition(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single,System.Boolean)\">\r\n            <summary>Punches a Transform's localPosition towards the given direction and then back to the starting one\r\n            as if it was connected to the starting position via an elastic.</summary>\r\n            <param name=\"punch\">The direction and strength of the punch (added to the Transform's current position)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"vibrato\">Indicates how much will the punch vibrate</param>\r\n            <param name=\"elasticity\">Represents how much (0 to 1) the vector will go beyond the starting position when bouncing backwards.\r\n            1 creates a full oscillation between the punch direction and the opposite direction,\r\n            while 0 oscillates only between the punch and the start position</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPunchScale(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single)\">\r\n            <summary>Punches a Transform's localScale towards the given size and then back to the starting one\r\n            as if it was connected to the starting scale via an elastic.</summary>\r\n            <param name=\"punch\">The punch strength (added to the Transform's current scale)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"vibrato\">Indicates how much will the punch vibrate</param>\r\n            <param name=\"elasticity\">Represents how much (0 to 1) the vector will go beyond the starting size when bouncing backwards.\r\n            1 creates a full oscillation between the punch scale and the opposite scale,\r\n            while 0 oscillates only between the punch scale and the start scale</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPunchRotation(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single)\">\r\n            <summary>Punches a Transform's localRotation towards the given size and then back to the starting one\r\n            as if it was connected to the starting rotation via an elastic.</summary>\r\n            <param name=\"punch\">The punch strength (added to the Transform's current rotation)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"vibrato\">Indicates how much will the punch vibrate</param>\r\n            <param name=\"elasticity\">Represents how much (0 to 1) the vector will go beyond the starting rotation when bouncing backwards.\r\n            1 creates a full oscillation between the punch rotation and the opposite rotation,\r\n            while 0 oscillates only between the punch and the start rotation</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOShakePosition(UnityEngine.Transform,System.Single,System.Single,System.Int32,System.Single,System.Boolean,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Transform's localPosition with the given values.</summary>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction.</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOShakePosition(UnityEngine.Transform,System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Transform's localPosition with the given values.</summary>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength on each axis</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction.</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOShakeRotation(UnityEngine.Transform,System.Single,System.Single,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Transform's localRotation.</summary>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction.</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOShakeRotation(UnityEngine.Transform,System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Transform's localRotation.</summary>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength on each axis</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction.</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOShakeScale(UnityEngine.Transform,System.Single,System.Single,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Transform's localScale.</summary>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction.</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOShakeScale(UnityEngine.Transform,System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\">\r\n            <summary>Shakes a Transform's localScale.</summary>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"strength\">The shake strength on each axis</param>\r\n            <param name=\"vibrato\">Indicates how much will the shake vibrate</param>\r\n            <param name=\"randomness\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). \r\n            Setting it to 0 will shake along a single direction.</param>\r\n            <param name=\"fadeOut\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>\r\n            <param name=\"randomnessMode\">Randomness mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOJump(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's position to the given value, while also applying a jump effect along the Y axis.\r\n            Returns a Sequence instead of a Tweener.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"jumpPower\">Power of the jump (the max height of the jump is represented by this plus the final Y offset)</param>\r\n            <param name=\"numJumps\">Total number of jumps</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOLocalJump(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's localPosition to the given value, while also applying a jump effect along the Y axis.\r\n            Returns a Sequence instead of a Tweener.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param>\r\n            <param name=\"jumpPower\">Power of the jump (the max height of the jump is represented by this plus the final Y offset)</param>\r\n            <param name=\"numJumps\">Total number of jumps</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPath(UnityEngine.Transform,UnityEngine.Vector3[],System.Single,DG.Tweening.PathType,DG.Tweening.PathMode,System.Int32,System.Nullable{UnityEngine.Color})\">\r\n            <summary>Tweens a Transform's position through the given path waypoints, using the chosen path algorithm.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"path\">The waypoints to go through</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"pathType\">The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)</param>\r\n            <param name=\"pathMode\">The path mode: 3D, side-scroller 2D, top-down 2D</param>\r\n            <param name=\"resolution\">The resolution of the path (useless in case of Linear paths): higher resolutions make for more detailed curved paths but are more expensive.\r\n            Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints</param>\r\n            <param name=\"gizmoColor\">The color of the path (shown when gizmos are active in the Play panel and the tween is running)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOLocalPath(UnityEngine.Transform,UnityEngine.Vector3[],System.Single,DG.Tweening.PathType,DG.Tweening.PathMode,System.Int32,System.Nullable{UnityEngine.Color})\">\r\n            <summary>Tweens a Transform's localPosition through the given path waypoints, using the chosen path algorithm.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"path\">The waypoint to go through</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"pathType\">The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)</param>\r\n            <param name=\"pathMode\">The path mode: 3D, side-scroller 2D, top-down 2D</param>\r\n            <param name=\"resolution\">The resolution of the path: higher resolutions make for more detailed curved paths but are more expensive.\r\n            Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints</param>\r\n            <param name=\"gizmoColor\">The color of the path (shown when gizmos are active in the Play panel and the tween is running)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPath(UnityEngine.Transform,DG.Tweening.Plugins.Core.PathCore.Path,System.Single,DG.Tweening.PathMode)\">\r\n            <summary>IMPORTANT: Unless you really know what you're doing, you should use the overload that accepts a Vector3 array instead.<para/>\r\n            Tweens a Transform's position via the given path.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"path\">The path to use</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"pathMode\">The path mode: 3D, side-scroller 2D, top-down 2D</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOLocalPath(UnityEngine.Transform,DG.Tweening.Plugins.Core.PathCore.Path,System.Single,DG.Tweening.PathMode)\">\r\n            <summary>IMPORTANT: Unless you really know what you're doing, you should use the overload that accepts a Vector3 array instead.<para/>\r\n            Tweens a Transform's localPosition via the given path.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"path\">The path to use</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"pathMode\">The path mode: 3D, side-scroller 2D, top-down 2D</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOTimeScale(DG.Tweening.Tween,System.Single,System.Single)\">\r\n            <summary>Tweens a Tween's timeScale to the given value.\r\n            Also stores the Tween as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The end value to reach</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOBlendableColor(UnityEngine.Light,UnityEngine.Color,System.Single)\">\r\n            <summary>Tweens a Light's color to the given value,\r\n            in a way that allows other DOBlendableColor tweens to work together on the same target,\r\n            instead than fight each other as multiple DOColor would do.\r\n            Also stores the Light as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The value to tween to</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOBlendableColor(UnityEngine.Material,UnityEngine.Color,System.Single)\">\r\n            <summary>Tweens a Material's color to the given value,\r\n            in a way that allows other DOBlendableColor tweens to work together on the same target,\r\n            instead than fight each other as multiple DOColor would do.\r\n            Also stores the Material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The value to tween to</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOBlendableColor(UnityEngine.Material,UnityEngine.Color,System.String,System.Single)\">\r\n            <summary>Tweens a Material's named color property to the given value,\r\n            in a way that allows other DOBlendableColor tweens to work together on the same target,\r\n            instead than fight each other as multiple DOColor would do.\r\n            Also stores the Material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The value to tween to</param>\r\n            <param name=\"property\">The name of the material property to tween (like _Tint or _SpecColor)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOBlendableColor(UnityEngine.Material,UnityEngine.Color,System.Int32,System.Single)\">\r\n            <summary>Tweens a Material's named color property with the given ID to the given value,\r\n            in a way that allows other DOBlendableColor tweens to work together on the same target,\r\n            instead than fight each other as multiple DOColor would do.\r\n            Also stores the Material as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"endValue\">The value to tween to</param>\r\n            <param name=\"propertyID\">The ID of the material property to tween (also called nameID in Unity's manual)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOBlendableMoveBy(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's position BY the given value (as if you chained a <code>SetRelative</code>),\r\n            in a way that allows other DOBlendableMove tweens to work together on the same target,\r\n            instead than fight each other as multiple DOMove would do.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"byValue\">The value to tween by</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOBlendableLocalMoveBy(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Boolean)\">\r\n            <summary>Tweens a Transform's localPosition BY the given value (as if you chained a <code>SetRelative</code>),\r\n            in a way that allows other DOBlendableMove tweens to work together on the same target,\r\n            instead than fight each other as multiple DOMove would do.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"byValue\">The value to tween by</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOBlendableRotateBy(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.RotateMode)\">\r\n            <summary>EXPERIMENTAL METHOD - Tweens a Transform's rotation BY the given value (as if you chained a <code>SetRelative</code>),\r\n            in a way that allows other DOBlendableRotate tweens to work together on the same target,\r\n            instead than fight each other as multiple DORotate would do.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"byValue\">The value to tween by</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"mode\">Rotation mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOBlendableLocalRotateBy(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.RotateMode)\">\r\n            <summary>EXPERIMENTAL METHOD - Tweens a Transform's lcoalRotation BY the given value (as if you chained a <code>SetRelative</code>),\r\n            in a way that allows other DOBlendableRotate tweens to work together on the same target,\r\n            instead than fight each other as multiple DORotate would do.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"byValue\">The value to tween by</param><param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"mode\">Rotation mode</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOBlendablePunchRotation(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single)\">\r\n            <summary>Punches a Transform's localRotation BY the given value and then back to the starting one\r\n            as if it was connected to the starting rotation via an elastic. Does it in a way that allows other\r\n            DOBlendableRotate tweens to work together on the same target</summary>\r\n            <param name=\"punch\">The punch strength (added to the Transform's current rotation)</param>\r\n            <param name=\"duration\">The duration of the tween</param>\r\n            <param name=\"vibrato\">Indicates how much will the punch vibrate</param>\r\n            <param name=\"elasticity\">Represents how much (0 to 1) the vector will go beyond the starting rotation when bouncing backwards.\r\n            1 creates a full oscillation between the punch rotation and the opposite rotation,\r\n            while 0 oscillates only between the punch and the start rotation</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOBlendableScaleBy(UnityEngine.Transform,UnityEngine.Vector3,System.Single)\">\r\n            <summary>Tweens a Transform's localScale BY the given value (as if you chained a <code>SetRelative</code>),\r\n            in a way that allows other DOBlendableScale tweens to work together on the same target,\r\n            instead than fight each other as multiple DOScale would do.\r\n            Also stores the transform as the tween's target so it can be used for filtered operations</summary>\r\n            <param name=\"byValue\">The value to tween by</param><param name=\"duration\">The duration of the tween</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOComplete(UnityEngine.Component,System.Boolean)\">\r\n            <summary>\r\n            Completes all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens completed\r\n            (meaning the tweens that don't have infinite loops and were not already complete)\r\n            </summary>\r\n            <param name=\"withCallbacks\">For Sequences only: if TRUE also internal Sequence callbacks will be fired,\r\n            otherwise they will be ignored</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOComplete(UnityEngine.Material,System.Boolean)\">\r\n            <summary>\r\n            Completes all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens completed\r\n            (meaning the tweens that don't have infinite loops and were not already complete)\r\n            </summary>\r\n            <param name=\"withCallbacks\">For Sequences only: if TRUE also internal Sequence callbacks will be fired,\r\n            otherwise they will be ignored</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOKill(UnityEngine.Component,System.Boolean)\">\r\n            <summary>\r\n            Kills all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens killed.\r\n            </summary>\r\n            <param name=\"complete\">If TRUE completes the tween before killing it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOKill(UnityEngine.Material,System.Boolean)\">\r\n            <summary>\r\n            Kills all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens killed.\r\n            </summary>\r\n            <param name=\"complete\">If TRUE completes the tween before killing it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOFlip(UnityEngine.Component)\">\r\n            <summary>\r\n            Flips the direction (backwards if it was going forward or viceversa) of all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens flipped.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOFlip(UnityEngine.Material)\">\r\n            <summary>\r\n            Flips the direction (backwards if it was going forward or viceversa) of all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens flipped.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOGoto(UnityEngine.Component,System.Single,System.Boolean)\">\r\n            <summary>\r\n            Sends to the given position all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens involved.\r\n            </summary>\r\n            <param name=\"to\">Time position to reach\r\n            (if higher than the whole tween duration the tween will simply reach its end)</param>\r\n            <param name=\"andPlay\">If TRUE will play the tween after reaching the given position, otherwise it will pause it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOGoto(UnityEngine.Material,System.Single,System.Boolean)\">\r\n            <summary>\r\n            Sends to the given position all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens involved.\r\n            </summary>\r\n            <param name=\"to\">Time position to reach\r\n            (if higher than the whole tween duration the tween will simply reach its end)</param>\r\n            <param name=\"andPlay\">If TRUE will play the tween after reaching the given position, otherwise it will pause it</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPause(UnityEngine.Component)\">\r\n            <summary>\r\n            Pauses all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens paused.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPause(UnityEngine.Material)\">\r\n            <summary>\r\n            Pauses all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens paused.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPlay(UnityEngine.Component)\">\r\n            <summary>\r\n            Plays all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens played.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPlay(UnityEngine.Material)\">\r\n            <summary>\r\n            Plays all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens played.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPlayBackwards(UnityEngine.Component)\">\r\n            <summary>\r\n            Plays backwards all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens played.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPlayBackwards(UnityEngine.Material)\">\r\n            <summary>\r\n            Plays backwards all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens played.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPlayForward(UnityEngine.Component)\">\r\n            <summary>\r\n            Plays forward all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens played.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOPlayForward(UnityEngine.Material)\">\r\n            <summary>\r\n            Plays forward all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens played.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DORestart(UnityEngine.Component,System.Boolean)\">\r\n            <summary>\r\n            Restarts all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens restarted.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DORestart(UnityEngine.Material,System.Boolean)\">\r\n            <summary>\r\n            Restarts all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens restarted.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DORewind(UnityEngine.Component,System.Boolean)\">\r\n            <summary>\r\n            Rewinds all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens rewinded.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DORewind(UnityEngine.Material,System.Boolean)\">\r\n            <summary>\r\n            Rewinds all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens rewinded.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOSmoothRewind(UnityEngine.Component)\">\r\n            <summary>\r\n            Smoothly rewinds all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens rewinded.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOSmoothRewind(UnityEngine.Material)\">\r\n            <summary>\r\n            Smoothly rewinds all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens rewinded.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOTogglePause(UnityEngine.Component)\">\r\n            <summary>\r\n            Toggles the paused state (plays if it was paused, pauses if it was playing) of all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens involved.\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.ShortcutExtensions.DOTogglePause(UnityEngine.Material)\">\r\n            <summary>\r\n            Toggles the paused state (plays if it was paused, pauses if it was playing) of all tweens that have this target as a reference\r\n            (meaning tweens that were started from this target, or that had this target added as an Id)\r\n            and returns the total number of tweens involved.\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.TweenParams\">\r\n            <summary>\r\n            This class serves only as a utility class to store tween settings to apply on multiple tweens.\r\n            It is in no way needed otherwise, since you can directly apply tween settings to a tween via chaining\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.TweenParams.Params\">\r\n            <summary>A variable you can eventually Clear and reuse when needed,\r\n            to avoid instantiating TweenParams objects</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.#ctor\">\r\n            <summary>Creates a new TweenParams object, which you can use to store tween settings\r\n            to pass to multiple tweens via <code>myTween.SetAs(myTweenParms)</code></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.Clear\">\r\n            <summary>Clears and resets this TweenParams instance using default values,\r\n            so it can be reused without instantiating another one</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetAutoKill(System.Boolean)\">\r\n            <summary>Sets the autoKill behaviour of the tween. \r\n            Has no effect if the tween has already started</summary>\r\n            <param name=\"autoKillOnCompletion\">If TRUE the tween will be automatically killed when complete</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetId(System.Object)\">\r\n            <summary>Sets an ID for the tween, which can then be used as a filter with DOTween's static methods.</summary>\r\n            <param name=\"objectId\">The ID to assign to this tween. Can be an int, a string, an object or anything else.</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetId(System.String)\">\r\n            <summary>Sets an ID for the tween, which can then be used as a filter with DOTween's static methods.</summary>\r\n            <param name=\"stringId\">The ID to assign to this tween. Can be an int, a string, an object or anything else.</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetId(System.Int32)\">\r\n            <summary>Sets an ID for the tween, which can then be used as a filter with DOTween's static methods.</summary>\r\n            <param name=\"intId\">The ID to assign to this tween. Can be an int, a string, an object or anything else.</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetTarget(System.Object)\">\r\n            <summary>Sets the target for the tween, which can then be used as a filter with DOTween's static methods.\r\n            <para>IMPORTANT: use it with caution. If you just want to set an ID for the tween use <code>SetId</code> instead.</para>\r\n            When using shorcuts the shortcut target is already assigned as the tween's target,\r\n            so using this method will overwrite it and prevent shortcut-operations like myTarget.DOPause from working correctly.</summary>\r\n            <param name=\"target\">The target to assign to this tween. Can be an int, a string, an object or anything else.</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetLoops(System.Int32,System.Nullable{DG.Tweening.LoopType})\">\r\n            <summary>Sets the looping options for the tween. \r\n            Has no effect if the tween has already started</summary>\r\n            <param name=\"loops\">Number of cycles to play (-1 for infinite - will be converted to 1 in case the tween is nested in a Sequence)</param>\r\n            <param name=\"loopType\">Loop behaviour type (default: LoopType.Restart)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetEase(DG.Tweening.Ease,System.Nullable{System.Single},System.Nullable{System.Single})\">\r\n            <summary>Sets the ease of the tween.\r\n            <para>If applied to Sequences eases the whole sequence animation</para></summary>\r\n            <param name=\"overshootOrAmplitude\">Eventual overshoot or amplitude to use with Back or Elastic easeType (default is 1.70158)</param>\r\n            <param name=\"period\">Eventual period to use with Elastic easeType (default is 0)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetEase(UnityEngine.AnimationCurve)\">\r\n            <summary>Sets the ease of the tween using an AnimationCurve.\r\n            <para>If applied to Sequences eases the whole sequence animation</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetEase(DG.Tweening.EaseFunction)\">\r\n            <summary>Sets the ease of the tween using a custom ease function.\r\n            <para>If applied to Sequences eases the whole sequence animation</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetRecyclable(System.Boolean)\">\r\n            <summary>Sets the recycling behaviour for the tween.</summary>\r\n            <param name=\"recyclable\">If TRUE the tween will be recycled after being killed, otherwise it will be destroyed.</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetUpdate(System.Boolean)\">\r\n            <summary>Sets the update type to the one defined in DOTween.defaultUpdateType (UpdateType.Normal unless changed)\r\n            and lets you choose if it should be independent from Unity's Time.timeScale</summary>\r\n            <param name=\"isIndependentUpdate\">If TRUE the tween will ignore Unity's Time.timeScale</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetUpdate(DG.Tweening.UpdateType,System.Boolean)\">\r\n            <summary>Sets the type of update (default or independent) for the tween</summary>\r\n            <param name=\"updateType\">The type of update (default: UpdateType.Normal)</param>\r\n            <param name=\"isIndependentUpdate\">If TRUE the tween will ignore Unity's Time.timeScale</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.OnStart(DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the onStart callback for the tween.\r\n            Called the first time the tween is set in a playing state, after any eventual delay</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.OnPlay(DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the onPlay callback for the tween.\r\n            Called when the tween is set in a playing state, after any eventual delay.\r\n            Also called each time the tween resumes playing from a paused state</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.OnRewind(DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the onRewind callback for the tween.\r\n            Called when the tween is rewinded,\r\n            either by calling <code>Rewind</code> or by reaching the start position while playing backwards.\r\n            Rewinding a tween that is already rewinded will not fire this callback</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.OnUpdate(DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the onUpdate callback for the tween.\r\n            Called each time the tween updates</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.OnStepComplete(DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the onStepComplete callback for the tween.\r\n            Called the moment the tween completes one loop cycle, even when going backwards</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.OnComplete(DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the onComplete callback for the tween.\r\n            Called the moment the tween reaches its final forward position, loops included</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.OnKill(DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the onKill callback for the tween.\r\n            Called the moment the tween is killed</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.OnWaypointChange(DG.Tweening.TweenCallback{System.Int32})\">\r\n            <summary>Sets the onWaypointChange callback for the tween.\r\n            Called when a path tween reaches a new waypoint</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetDelay(System.Single)\">\r\n            <summary>Sets a delayed startup for the tween.\r\n            <para>Has no effect on Sequences or if the tween has already started</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetRelative(System.Boolean)\">\r\n            <summary>If isRelative is TRUE sets the tween as relative\r\n            (the endValue will be calculated as <code>startValue + endValue</code> instead than being used directly).\r\n            <para>Has no effect on Sequences or if the tween has already started</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenParams.SetSpeedBased(System.Boolean)\">\r\n            <summary>If isSpeedBased is TRUE sets the tween as speed based\r\n            (the duration will represent the number of units the tween moves x second).\r\n            <para>Has no effect on Sequences, nested tweens, or if the tween has already started</para></summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.TweenSettingsExtensions\">\r\n            <summary>\r\n            Methods that extend Tween objects and allow to set their parameters\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetAutoKill``1(``0)\">\r\n            <summary>Sets the autoKill behaviour of the tween to TRUE. \r\n            <code>Has no effect</code> if the tween has already started or if it's added to a Sequence</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetAutoKill``1(``0,System.Boolean)\">\r\n            <summary>Sets the autoKill behaviour of the tween. \r\n            <code>Has no effect</code> if the tween has already started or if it's added to a Sequence</summary>\r\n            <param name=\"autoKillOnCompletion\">If TRUE the tween will be automatically killed when complete</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetId``1(``0,System.Object)\">\r\n            <summary>Sets an ID for the tween (<see cref=\"F:DG.Tweening.Tween.id\"/>), which can then be used as a filter with DOTween's static methods.</summary>\r\n            <param name=\"objectId\">The ID to assign to this tween. Can be an int, a string, an object or anything else.</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetId``1(``0,System.String)\">\r\n            <summary>Sets a string ID for the tween (<see cref=\"F:DG.Tweening.Tween.stringId\"/>), which can then be used as a filter with DOTween's static methods.<para/>\r\n            Filtering via string is 2X faster than using an object as an ID (using the alternate obejct overload)</summary>\r\n            <param name=\"stringId\">The string ID to assign to this tween.</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetId``1(``0,System.Int32)\">\r\n            <summary>Sets an int ID for the tween (<see cref=\"F:DG.Tweening.Tween.intId\"/>), which can then be used as a filter with DOTween's static methods.<para/>\r\n            Filtering via int is 4X faster than via object, 2X faster than via string (using the alternate object/string overloads)</summary>\r\n            <param name=\"intId\">The int ID to assign to this tween.</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetLink``1(``0,UnityEngine.GameObject)\">\r\n            <summary>Allows to link this tween to a GameObject\r\n            so that it will be automatically killed when the GameObject is destroyed.\r\n            <code>Has no effect</code> if the tween is added to a Sequence</summary>\r\n            <param name=\"gameObject\">The link target (unrelated to the target set via <code>SetTarget</code>)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetLink``1(``0,UnityEngine.GameObject,DG.Tweening.LinkBehaviour)\">\r\n            <summary>Allows to link this tween to a GameObject and assign a behaviour depending on it.\r\n            This will also automatically kill the tween when the GameObject is destroyed.\r\n            <code>Has no effect</code> if the tween is added to a Sequence</summary>\r\n            <param name=\"gameObject\">The link target (unrelated to the target set via <code>SetTarget</code>)</param>\r\n            <param name=\"behaviour\">The behaviour to use (<see cref=\"F:DG.Tweening.LinkBehaviour.KillOnDestroy\"/> is always evaluated even if you choose another one)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetTarget``1(``0,System.Object)\">\r\n            <summary>Sets the target for the tween, which can then be used as a filter with DOTween's static methods.\r\n            <para>IMPORTANT: use it with caution. If you just want to set an ID for the tween use <code>SetId</code> instead.</para>\r\n            When using shorcuts the shortcut target is already assigned as the tween's target,\r\n            so using this method will overwrite it and prevent shortcut-operations like myTarget.DOPause from working correctly.</summary>\r\n            <param name=\"target\">The target to assign to this tween. Can be an int, a string, an object or anything else.</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetLoops``1(``0,System.Int32)\">\r\n            <summary>Sets the looping options for the tween. \r\n            Has no effect if the tween has already started</summary>\r\n            <param name=\"loops\">Number of cycles to play (-1 for infinite - will be converted to 1 in case the tween is nested in a Sequence)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetLoops``1(``0,System.Int32,DG.Tweening.LoopType)\">\r\n            <summary>Sets the looping options for the tween. \r\n            Has no effect if the tween has already started</summary>\r\n            <param name=\"loops\">Number of cycles to play (-1 for infinite - will be converted to 1 in case the tween is nested in a Sequence)</param>\r\n            <param name=\"loopType\">Loop behaviour type (default: LoopType.Restart)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetEase``1(``0,DG.Tweening.Ease)\">\r\n            <summary>Sets the ease of the tween.\r\n            <para>If applied to Sequences eases the whole sequence animation</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetEase``1(``0,DG.Tweening.Ease,System.Single)\">\r\n            <summary>Sets the ease of the tween.\r\n            <para>If applied to Sequences eases the whole sequence animation</para></summary>\r\n            <param name=\"overshoot\">\r\n            Eventual overshoot to use with Back or Flash ease (default is 1.70158 - 1 for Flash).\r\n            <para>In case of Flash ease it must be an intenger and sets the total number of flashes that will happen.\r\n            Using an even number will complete the tween on the starting value, while an odd one will complete it on the end value.</para>\r\n            </param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetEase``1(``0,DG.Tweening.Ease,System.Single,System.Single)\">\r\n            <summary>Sets the ease of the tween.\r\n            <para>If applied to Sequences eases the whole sequence animation</para></summary>\r\n            <param name=\"amplitude\">Eventual amplitude to use with Elastic easeType or overshoot to use with Flash easeType (default is 1.70158 - 1 for Flash).\r\n            <para>In case of Flash ease it must be an integer and sets the total number of flashes that will happen.\r\n            Using an even number will complete the tween on the starting value, while an odd one will complete it on the end value.</para>\r\n            </param>\r\n            <param name=\"period\">Eventual period to use with Elastic or Flash easeType (default is 0).\r\n            <para>In case of Flash ease it indicates the power in time of the ease, and must be between -1 and 1.\r\n            0 is balanced, 1 weakens the ease with time, -1 starts the ease weakened and gives it power towards the end.</para>\r\n            </param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetEase``1(``0,UnityEngine.AnimationCurve)\">\r\n            <summary>Sets the ease of the tween using an AnimationCurve.\r\n            <para>If applied to Sequences eases the whole sequence animation</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetEase``1(``0,DG.Tweening.EaseFunction)\">\r\n            <summary>Sets the ease of the tween using a custom ease function (which must return a value between 0 and 1).\r\n            <para>If applied to Sequences eases the whole sequence animation</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetRecyclable``1(``0)\">\r\n            <summary>Allows the tween to be recycled after being killed.</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetRecyclable``1(``0,System.Boolean)\">\r\n            <summary>Sets the recycling behaviour for the tween.</summary>\r\n            <param name=\"recyclable\">If TRUE the tween will be recycled after being killed, otherwise it will be destroyed.</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetUpdate``1(``0,System.Boolean)\">\r\n            <summary>Sets the update type to UpdateType.Normal and lets you choose if it should be independent from Unity's Time.timeScale</summary>\r\n            <param name=\"isIndependentUpdate\">If TRUE the tween will ignore Unity's Time.timeScale</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetUpdate``1(``0,DG.Tweening.UpdateType)\">\r\n            <summary>Sets the type of update for the tween</summary>\r\n            <param name=\"updateType\">The type of update (defalt: UpdateType.Normal)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetUpdate``1(``0,DG.Tweening.UpdateType,System.Boolean)\">\r\n            <summary>Sets the type of update for the tween and lets you choose if it should be independent from Unity's Time.timeScale</summary>\r\n            <param name=\"updateType\">The type of update</param>\r\n            <param name=\"isIndependentUpdate\">If TRUE the tween will ignore Unity's Time.timeScale</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetInverted``1(``0)\">\r\n            <summary>EXPERIMENTAL: inverts this tween, so that it will play from the end to the beginning\r\n            (playing it backwards will actually play it from the beginning to the end). \r\n            <code>Has no effect</code> if the tween has already started or if it's added to a Sequence</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetInverted``1(``0,System.Boolean)\">\r\n            <summary>EXPERIMENTAL: inverts this tween, so that it will play from the end to the beginning\r\n            (playing it backwards will actually play it from the beginning to the end). \r\n            <code>Has no effect</code> if the tween has already started or if it's added to a Sequence</summary>\r\n            <param name=\"inverted\">If TRUE the tween will be inverted, otherwise it won't</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.OnStart``1(``0,DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the <code>onStart</code> callback for the tween, clearing any previous <code>onStart</code> callback that was set.\r\n            Called the first time the tween is set in a playing state, after any eventual delay</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.OnPlay``1(``0,DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the <code>onPlay</code> callback for the tween, clearing any previous <code>onPlay</code> callback that was set.\r\n            Called when the tween is set in a playing state, after any eventual delay.\r\n            Also called each time the tween resumes playing from a paused state</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.OnPause``1(``0,DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the <code>onPause</code> callback for the tween, clearing any previous <code>onPause</code> callback that was set.\r\n            Called when the tween state changes from playing to paused.\r\n            If the tween has autoKill set to FALSE, this is called also when the tween reaches completion.</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.OnRewind``1(``0,DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the <code>onRewind</code> callback for the tween, clearing any previous <code>onRewind</code> callback that was set.\r\n            Called when the tween is rewinded,\r\n            either by calling <code>Rewind</code> or by reaching the start position while playing backwards.\r\n            Rewinding a tween that is already rewinded will not fire this callback</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.OnUpdate``1(``0,DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the <code>onUpdate</code> callback for the tween, clearing any previous <code>onUpdate</code> callback that was set.\r\n            Called each time the tween updates</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.OnStepComplete``1(``0,DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the <code>onStepComplete</code> callback for the tween, clearing any previous <code>onStepComplete</code> callback that was set.\r\n            Called the moment the tween completes one loop cycle, even when going backwards</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.OnComplete``1(``0,DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the <code>onComplete</code> callback for the tween, clearing any previous <code>onComplete</code> callback that was set.\r\n            Called the moment the tween reaches its final forward position, loops included</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.OnKill``1(``0,DG.Tweening.TweenCallback)\">\r\n            <summary>Sets the <code>onKill</code> callback for the tween, clearing any previous <code>onKill</code> callback that was set.\r\n            Called the moment the tween is killed</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.OnWaypointChange``1(``0,DG.Tweening.TweenCallback{System.Int32})\">\r\n            <summary>Sets the <code>onWaypointChange</code> callback for the tween, clearing any previous <code>onWaypointChange</code> callback that was set.\r\n            Called when a path tween's current waypoint changes</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetAs``1(``0,DG.Tweening.Tween)\">\r\n            <summary>Sets the parameters of the tween (id, ease, loops, delay, timeScale, callbacks, etc) as the parameters of the given one.\r\n            Doesn't copy specific SetOptions settings: those will need to be applied manually each time.\r\n            <para>Has no effect if the tween has already started.</para>\r\n            NOTE: the tween's <code>target</code> will not be changed</summary>\r\n            <param name=\"asTween\">Tween from which to copy the parameters</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetAs``1(``0,DG.Tweening.TweenParams)\">\r\n            <summary>Sets the parameters of the tween (id, ease, loops, delay, timeScale, callbacks, etc) as the parameters of the given TweenParams.\r\n            <para>Has no effect if the tween has already started.</para></summary>\r\n            <param name=\"tweenParams\">TweenParams from which to copy the parameters</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.Append(DG.Tweening.Sequence,DG.Tweening.Tween)\">\r\n            <summary>Adds the given tween to the end of the Sequence. \r\n            Has no effect if the Sequence has already started</summary>\r\n            <param name=\"t\">The tween to append</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.Prepend(DG.Tweening.Sequence,DG.Tweening.Tween)\">\r\n            <summary>Adds the given tween to the beginning of the Sequence, pushing forward the other nested content. \r\n            Has no effect if the Sequence has already started</summary>\r\n            <param name=\"t\">The tween to prepend</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.Join(DG.Tweening.Sequence,DG.Tweening.Tween)\">\r\n            <summary>Inserts the given tween at the same time position of the last tween, callback or intervale added to the Sequence.\r\n            Note that, in case of a Join after an interval, the insertion time will be the time where the interval starts, not where it finishes.\r\n            Has no effect if the Sequence has already started</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.Insert(DG.Tweening.Sequence,System.Single,DG.Tweening.Tween)\">\r\n            <summary>Inserts the given tween at the given time position in the Sequence,\r\n            automatically adding an interval if needed. \r\n            Has no effect if the Sequence has already started</summary>\r\n            <param name=\"atPosition\">The time position where the tween will be placed</param>\r\n            <param name=\"t\">The tween to insert</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.AppendInterval(DG.Tweening.Sequence,System.Single)\">\r\n            <summary>Adds the given interval to the end of the Sequence. \r\n            Has no effect if the Sequence has already started</summary>\r\n            <param name=\"interval\">The interval duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.PrependInterval(DG.Tweening.Sequence,System.Single)\">\r\n            <summary>Adds the given interval to the beginning of the Sequence, pushing forward the other nested content. \r\n            Has no effect if the Sequence has already started</summary>\r\n            <param name=\"interval\">The interval duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.AppendCallback(DG.Tweening.Sequence,DG.Tweening.TweenCallback)\">\r\n            <summary>Adds the given callback to the end of the Sequence. \r\n            Has no effect if the Sequence has already started</summary>\r\n            <param name=\"callback\">The callback to append</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.PrependCallback(DG.Tweening.Sequence,DG.Tweening.TweenCallback)\">\r\n            <summary>Adds the given callback to the beginning of the Sequence, pushing forward the other nested content. \r\n            Has no effect if the Sequence has already started</summary>\r\n            <param name=\"callback\">The callback to prepend</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.InsertCallback(DG.Tweening.Sequence,System.Single,DG.Tweening.TweenCallback)\">\r\n            <summary>Inserts the given callback at the given time position in the Sequence,\r\n            automatically adding an interval if needed. \r\n            Has no effect if the Sequence has already started</summary>\r\n            <param name=\"atPosition\">The time position where the callback will be placed</param>\r\n            <param name=\"callback\">The callback to insert</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.From``1(``0)\">\r\n            <summary>Changes a TO tween into a FROM tween: sets the current target's position as the tween's endValue\r\n            then immediately sends the target to the previously set endValue.</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.From``1(``0,System.Boolean)\">\r\n            <summary>Changes a TO tween into a FROM tween: sets the current target's position as the tween's endValue\r\n            then immediately sends the target to the previously set endValue.</summary>\r\n            <param name=\"isRelative\">If TRUE the FROM value will be calculated as relative to the current one</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.From``1(``0,System.Boolean,System.Boolean)\">\r\n            <summary>Changes a TO tween into a FROM tween: sets the current value of the target as the endValue,\r\n            and the previously passed endValue as the actual startValue.</summary>\r\n            <param name=\"setImmediately\">If TRUE sets the target to from value immediately, otherwise waits for the tween to start</param>\r\n            <param name=\"isRelative\">If TRUE the FROM value will be calculated as relative to the current one</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.From``3(DG.Tweening.Core.TweenerCore{``0,``1,``2},``1,System.Boolean,System.Boolean)\">\r\n            <summary>Changes a TO tween into a FROM tween: sets the tween's starting value to the given one\r\n            and eventually sets the tween's target to that value immediately.</summary>\r\n            <param name=\"fromValue\">Value to start from</param>\r\n            <param name=\"setImmediately\">If TRUE sets the target to from value immediately, otherwise waits for the tween to start</param>\r\n            <param name=\"isRelative\">If TRUE the FROM/TO values will be calculated as relative to the current ones</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.From(DG.Tweening.Core.TweenerCore{UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions},System.Single,System.Boolean,System.Boolean)\">\r\n            <summary>Changes a TO tween into a FROM tween: sets the tween's starting value to the given one\r\n            and eventually sets the tween's target to that value immediately.</summary>\r\n            <param name=\"fromAlphaValue\">Alpha value to start from (in case of Fade tweens)</param>\r\n            <param name=\"setImmediately\">If TRUE sets the target to from value immediately, otherwise waits for the tween to start</param>\r\n            <param name=\"isRelative\">If TRUE the FROM/TO values will be calculated as relative to the current ones</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.From(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions},System.Single,System.Boolean,System.Boolean)\">\r\n            <summary>Changes a TO tween into a FROM tween: sets the tween's starting value to the given one\r\n            and eventually sets the tween's target to that value immediately.</summary>\r\n            <param name=\"fromValue\">Value to start from (in case of Vector tweens that act on a single coordinate or scale tweens)</param>\r\n            <param name=\"setImmediately\">If TRUE sets the target to from value immediately, otherwise waits for the tween to start</param>\r\n            <param name=\"isRelative\">If TRUE the FROM/TO values will be calculated as relative to the current ones</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.From(DG.Tweening.Core.TweenerCore{UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.CircleOptions},System.Single,System.Boolean,System.Boolean)\">\r\n            <summary>Changes a TO tween into a FROM tween: sets the tween's starting value to the given one\r\n            and eventually sets the tween's target to that value immediately.</summary>\r\n            <param name=\"fromValueDegrees\">Value to start from (in case of Vector tweens that act on a single coordinate or scale tweens)</param>\r\n            <param name=\"setImmediately\">If TRUE sets the target to from value immediately, otherwise waits for the tween to start</param>\r\n            <param name=\"isRelative\">If TRUE the FROM/TO values will be calculated as relative to the current ones</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetDelay``1(``0,System.Single)\">\r\n            <summary>Sets a delayed startup for the tween.<para/>\r\n            In case of Sequences behaves the same as <see cref=\"M:DG.Tweening.TweenSettingsExtensions.PrependInterval(DG.Tweening.Sequence,System.Single)\"/>,\r\n            which means the delay will repeat in case of loops (while with tweens it's ignored after the first loop cycle).<para/>\r\n            Has no effect if the tween has already started</summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetDelay``1(``0,System.Single,System.Boolean)\">\r\n            <summary>EXPERIMENTAL: implemented in v1.2.340.<para/>\r\n            Sets a delayed startup for the tween with options to choose how the delay is applied in case of Sequences.<para/>\r\n            Has no effect if the tween has already started</summary>\r\n            <param name=\"asPrependedIntervalIfSequence\">Only used by <see cref=\"T:DG.Tweening.Sequence\"/> types: If FALSE sets the delay as a one-time occurrence\r\n            (defaults to this for <see cref=\"T:DG.Tweening.Tweener\"/> types),\r\n            otherwise as a Sequence interval which will repeat at the beginning of every loop cycle</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetRelative``1(``0)\">\r\n            <summary>Sets the tween as relative\r\n            (the endValue will be calculated as <code>startValue + endValue</code> instead than being used directly).\r\n            <para>Has no effect on Sequences or if the tween has already started</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetRelative``1(``0,System.Boolean)\">\r\n            <summary>If isRelative is TRUE sets the tween as relative\r\n            (the endValue will be calculated as <code>startValue + endValue</code> instead than being used directly).\r\n            <para>Has no effect on Sequences or if the tween has already started</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetSpeedBased``1(``0)\">\r\n            <summary>If isSpeedBased is TRUE sets the tween as speed based\r\n            (the duration will represent the number of units the tween moves x second).\r\n            <para>Has no effect on Sequences, nested tweens, or if the tween has already started</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetSpeedBased``1(``0,System.Boolean)\">\r\n            <summary>If isSpeedBased is TRUE sets the tween as speed based\r\n            (the duration will represent the number of units the tween moves x second).\r\n            <para>Has no effect on Sequences, nested tweens, or if the tween has already started</para></summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions},System.Boolean)\">\r\n            <summary>Options for float tweens</summary>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions},System.Boolean)\">\r\n            <summary>Options for Vector2 tweens</summary>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions},DG.Tweening.AxisConstraint,System.Boolean)\">\r\n            <summary>Options for Vector2 tweens</summary>\r\n            <param name=\"axisConstraint\">Selecting an axis will tween the vector only on that axis, leaving the others untouched</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions},System.Boolean)\">\r\n            <summary>Options for Vector3 tweens</summary>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions},DG.Tweening.AxisConstraint,System.Boolean)\">\r\n            <summary>Options for Vector3 tweens</summary>\r\n            <param name=\"axisConstraint\">Selecting an axis will tween the vector only on that axis, leaving the others untouched</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector4,UnityEngine.Vector4,DG.Tweening.Plugins.Options.VectorOptions},System.Boolean)\">\r\n            <summary>Options for Vector4 tweens</summary>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector4,UnityEngine.Vector4,DG.Tweening.Plugins.Options.VectorOptions},DG.Tweening.AxisConstraint,System.Boolean)\">\r\n            <summary>Options for Vector4 tweens</summary>\r\n            <param name=\"axisConstraint\">Selecting an axis will tween the vector only on that axis, leaving the others untouched</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions},System.Boolean)\">\r\n            <summary>Options for Quaternion tweens</summary>\r\n            <param name=\"useShortest360Route\">If TRUE (default) the rotation will take the shortest route, and will not rotate more than 360°.\r\n            If FALSE the rotation will be fully accounted. Is always FALSE if the tween is set as relative</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions},System.Boolean)\">\r\n            <summary>Options for Color tweens</summary>\r\n            <param name=\"alphaOnly\">If TRUE only the alpha value of the color will be tweened</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Rect,UnityEngine.Rect,DG.Tweening.Plugins.Options.RectOptions},System.Boolean)\">\r\n            <summary>Options for Vector4 tweens</summary>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{System.String,System.String,DG.Tweening.Plugins.Options.StringOptions},System.Boolean,DG.Tweening.ScrambleMode,System.String)\">\r\n            <summary>Options for Vector4 tweens</summary>\r\n            <param name=\"richTextEnabled\">If TRUE, rich text will be interpreted correctly while animated,\r\n            otherwise all tags will be considered as normal text</param>\r\n            <param name=\"scrambleMode\">The type of scramble to use, if any</param>\r\n            <param name=\"scrambleChars\">A string containing the characters to use for scrambling.\r\n            Use as many characters as possible (minimum 10) because DOTween uses a fast scramble mode which gives better results with more characters.\r\n            Leave it to NULL to use default ones</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,UnityEngine.Vector3[],DG.Tweening.Plugins.Options.Vector3ArrayOptions},System.Boolean)\">\r\n            <summary>Options for Vector3Array tweens</summary>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,UnityEngine.Vector3[],DG.Tweening.Plugins.Options.Vector3ArrayOptions},DG.Tweening.AxisConstraint,System.Boolean)\">\r\n            <summary>Options for Vector3Array tweens</summary>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.CircleOptions},System.Single,System.Boolean,System.Boolean)\">\r\n            <summary>Options for ShapeCircle tweens</summary>\r\n            <param name=\"relativeCenter\">If TRUE the center you set in the DOTween.To method will be considered as relative\r\n            to the starting position of the target</param>\r\n            <param name=\"snapping\">If TRUE the tween will smoothly snap all values to integers</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},DG.Tweening.AxisConstraint,DG.Tweening.AxisConstraint)\">\r\n            <summary>Options for Path tweens (created via the <code>DOPath</code> shortcut)</summary>\r\n            <param name=\"lockPosition\">The eventual movement axis to lock. You can input multiple axis if you separate them like this:\r\n            <para>AxisConstrain.X | AxisConstraint.Y</para></param>\r\n            <param name=\"lockRotation\">The eventual rotation axis to lock. You can input multiple axis if you separate them like this:\r\n            <para>AxisConstrain.X | AxisConstraint.Y</para></param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},System.Boolean,DG.Tweening.AxisConstraint,DG.Tweening.AxisConstraint)\">\r\n            <summary>Options for Path tweens (created via the <code>DOPath</code> shortcut)</summary>\r\n            <param name=\"closePath\">If TRUE the path will be automatically closed</param>\r\n            <param name=\"lockPosition\">The eventual movement axis to lock. You can input multiple axis if you separate them like this:\r\n            <para>AxisConstrain.X | AxisConstraint.Y</para></param>\r\n            <param name=\"lockRotation\">The eventual rotation axis to lock. You can input multiple axis if you separate them like this:\r\n            <para>AxisConstrain.X | AxisConstraint.Y</para></param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3})\">\r\n            <summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).\r\n            Orients the target towards the given position.\r\n            Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>\r\n            <param name=\"lookAtPosition\">The position to look at</param>\r\n            <param name=\"forwardDirection\">The eventual direction to consider as \"forward\".\r\n            If left to NULL defaults to the regular forward side of the transform</param>\r\n            <param name=\"up\">The vector that defines in which direction up is (default: Vector3.up)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},UnityEngine.Vector3,System.Boolean)\">\r\n            <summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).\r\n            Orients the target towards the given position with options to keep the Z rotation stable.\r\n            Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>\r\n            <param name=\"lookAtPosition\">The position to look at</param>\r\n            <param name=\"stableZRotation\">If TRUE doesn't rotate the target along the Z axis</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},UnityEngine.Transform,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3})\">\r\n            <summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).\r\n            Orients the target towards another transform.\r\n            Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>\r\n            <param name=\"lookAtTransform\">The transform to look at</param>\r\n            <param name=\"forwardDirection\">The eventual direction to consider as \"forward\".\r\n            If left to NULL defaults to the regular forward side of the transform</param>\r\n            <param name=\"up\">The vector that defines in which direction up is (default: Vector3.up)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},UnityEngine.Transform,System.Boolean)\">\r\n            <summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).\r\n            Orients the target towards another transform with options to keep the Z rotation stable.\r\n            Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>\r\n            <param name=\"lookAtTransform\">The transform to look at</param>\r\n            <param name=\"stableZRotation\">If TRUE doesn't rotate the target along the Z axis</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},System.Single,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3})\">\r\n            <summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).\r\n            Orients the target to the path, with the given lookAhead.\r\n            Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>\r\n            <param name=\"lookAhead\">The percentage of lookAhead to use (0 to 1)</param>\r\n            <param name=\"forwardDirection\">The eventual direction to consider as \"forward\".\r\n            If left to NULL defaults to the regular forward side of the transform</param>\r\n            <param name=\"up\">The vector that defines in which direction up is (default: Vector3.up)</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},System.Single,System.Boolean)\">\r\n            <summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).\r\n            Orients the path with options to keep the Z rotation stable.\r\n            Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>\r\n            <param name=\"lookAhead\">The percentage of lookAhead to use (0 to 1)</param>\r\n            <param name=\"stableZRotation\">If TRUE doesn't rotate the target along the Z axis</param>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.LogBehaviour\">\r\n            <summary>\r\n            Types of log behaviours\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LogBehaviour.Default\">\r\n            <summary>Log only warnings and errors</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LogBehaviour.Verbose\">\r\n            <summary>Log warnings, errors and additional infos</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.LogBehaviour.ErrorsOnly\">\r\n            <summary>Log only errors</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Tween\">\r\n            <summary>\r\n            Indicates either a Tweener or a Sequence\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.timeScale\">\r\n            <summary>TimeScale for the tween</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.isBackwards\">\r\n            <summary>If TRUE the tween will play backwards</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.isInverted\">\r\n            <summary>If TRUE the tween is completely inverted but without playing it backwards\r\n            (play backwards will actually play the tween in the original direction)</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.id\">\r\n            <summary>Object ID (usable for filtering with DOTween static methods). Can be anything except a string or an int\r\n            (use <see cref=\"F:DG.Tweening.Tween.stringId\"/> or <see cref=\"F:DG.Tweening.Tween.intId\"/> for those)</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.stringId\">\r\n            <summary>String ID (usable for filtering with DOTween static methods). 2X faster than using an object id</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.intId\">\r\n            <summary>Int ID (usable for filtering with DOTween static methods). 4X faster than using an object id, 2X faster than using a string id.\r\n            Default is -999 so avoid using an ID like that or it will capture all unset intIds</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.target\">\r\n            <summary>Tween target (usable for filtering with DOTween static methods). Automatically set by tween creation shortcuts</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.onPlay\">\r\n            <summary>Called when the tween is set in a playing state, after any eventual delay.\r\n            Also called each time the tween resumes playing from a paused state</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.onPause\">\r\n            <summary>Called when the tween state changes from playing to paused.\r\n            If the tween has autoKill set to FALSE, this is called also when the tween reaches completion.</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.onRewind\">\r\n            <summary>Called when the tween is rewinded,\r\n            either by calling <code>Rewind</code> or by reaching the start position while playing backwards.\r\n            Rewinding a tween that is already rewinded will not fire this callback</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.onUpdate\">\r\n            <summary>Called each time the tween updates</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.onStepComplete\">\r\n            <summary>Called the moment the tween completes one loop cycle</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.onComplete\">\r\n            <summary>Called the moment the tween reaches completion (loops included)</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.onKill\">\r\n            <summary>Called the moment the tween is killed</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.onWaypointChange\">\r\n            <summary>Called when a path tween's current waypoint changes</summary>\r\n        </member>\r\n        <member name=\"P:DG.Tweening.Tween.isRelative\">\r\n            <summary>Tweeners-only (ignored by Sequences), returns TRUE if the tween was set as relative</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.Tween.debugTargetId\">\r\n            <summary>\r\n            Set by SetTarget if DOTween's Debug Mode is on (see DOTween Utility Panel -> \"Store GameObject's ID\" debug option\r\n            </summary>\r\n        </member>\r\n        <member name=\"P:DG.Tweening.Tween.active\">\r\n            <summary>FALSE when tween is (or should be) despawned - set only by TweenManager</summary>\r\n        </member>\r\n        <member name=\"P:DG.Tweening.Tween.fullPosition\">\r\n            <summary>Gets and sets the time position (loops included, delays excluded) of the tween</summary>\r\n        </member>\r\n        <member name=\"P:DG.Tweening.Tween.hasLoops\">\r\n            <summary>Returns TRUE if the tween is set to loop (either a set number of times or infinitely)</summary>\r\n        </member>\r\n        <member name=\"P:DG.Tweening.Tween.playedOnce\">\r\n            <summary>TRUE after the tween was set in a play state at least once, AFTER any delay is elapsed</summary>\r\n        </member>\r\n        <member name=\"P:DG.Tweening.Tween.position\">\r\n            <summary>Time position within a single loop cycle</summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.Tweener\">\r\n            <summary>\r\n            Animates a single value\r\n            </summary>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Tweener.ChangeStartValue(System.Object,System.Single)\">\r\n            <summary>Changes the start value of a tween and rewinds it (without pausing it).\r\n            Has no effect with tweens that are inside Sequences</summary>\r\n            <param name=\"newStartValue\">The new start value</param>\r\n            <param name=\"newDuration\">If bigger than 0 applies it as the new tween duration</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Tweener.ChangeEndValue(System.Object,System.Single,System.Boolean)\">\r\n            <summary>Changes the end value of a tween and rewinds it (without pausing it).\r\n            Has no effect with tweens that are inside Sequences</summary>\r\n            <param name=\"newEndValue\">The new end value</param>\r\n            <param name=\"newDuration\">If bigger than 0 applies it as the new tween duration</param>\r\n            <param name=\"snapStartValue\">If TRUE the start value will become the current target's value, otherwise it will stay the same</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Tweener.ChangeEndValue(System.Object,System.Boolean)\">\r\n            <summary>Changes the end value of a tween and rewinds it (without pausing it).\r\n            Has no effect with tweens that are inside Sequences</summary>\r\n            <param name=\"newEndValue\">The new end value</param>\r\n            <param name=\"snapStartValue\">If TRUE the start value will become the current target's value, otherwise it will stay the same</param>\r\n        </member>\r\n        <member name=\"M:DG.Tweening.Tweener.ChangeValues(System.Object,System.Object,System.Single)\">\r\n            <summary>Changes the start and end value of a tween and rewinds it (without pausing it).\r\n            Has no effect with tweens that are inside Sequences</summary>\r\n            <param name=\"newStartValue\">The new start value</param>\r\n            <param name=\"newEndValue\">The new end value</param>\r\n            <param name=\"newDuration\">If bigger than 0 applies it as the new tween duration</param>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.TweenType\">\r\n            <summary>\r\n            Used internally\r\n            </summary>\r\n        </member>\r\n        <member name=\"T:DG.Tweening.UpdateType\">\r\n            <summary>\r\n            Update type\r\n            </summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.UpdateType.Normal\">\r\n            <summary>Updates every frame during Update calls</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.UpdateType.Late\">\r\n            <summary>Updates every frame during LateUpdate calls</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.UpdateType.Fixed\">\r\n            <summary>Updates using FixedUpdate calls</summary>\r\n        </member>\r\n        <member name=\"F:DG.Tweening.UpdateType.Manual\">\r\n            <summary>Updates using manual update calls</summary>\r\n        </member>\r\n    </members>\r\n</doc>\r\n"]}